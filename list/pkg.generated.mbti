// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/list"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[X] default() -> List[X]

// Errors

// Types and methods
pub enum List[A] {
  Empty
  More(A, mut tail~ : List[A])
}
fn[A] List::all(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A] List::any(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A] List::concat(Self[A], Self[A]) -> Self[A]
#as_free_fn(construct, deprecated)
#as_free_fn
fn[A] List::cons(A, Self[A]) -> Self[A]
fn[A : Eq] List::contains(Self[A], A) -> Bool
fn[A] List::drop(Self[A], Int) -> Self[A]
fn[A] List::drop_while(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A] List::each(Self[A], (A) -> Unit raise?) -> Unit raise?
fn[A] List::eachi(Self[A], (Int, A) -> Unit raise?) -> Unit raise?
fn[A] List::filter(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A, B] List::filter_map(Self[A], (A) -> B? raise?) -> Self[B] raise?
fn[A] List::find(Self[A], (A) -> Bool raise?) -> A? raise?
fn[A] List::find_index(Self[A], (A) -> Bool raise?) -> Int? raise?
fn[A] List::findi(Self[A], (A, Int) -> Bool raise?) -> A? raise?
fn[A, B] List::flat_map(Self[A], (A) -> Self[B] raise?) -> Self[B] raise?
fn[A] List::flatten(Self[Self[A]]) -> Self[A]
fn[A, B] List::fold(Self[A], init~ : B, (B, A) -> B raise?) -> B raise?
fn[A, B] List::foldi(Self[A], init~ : B, (Int, B, A) -> B raise?) -> B raise?
#as_free_fn
fn[A] List::from_array(Array[A]) -> Self[A]
#as_free_fn
fn[A] List::from_iter(Iter[A]) -> Self[A]
#as_free_fn
fn[A] List::from_iter_rev(Iter[A]) -> Self[A]
#as_free_fn
fn[A : @json.FromJson] List::from_json(Json) -> Self[A] raise @json.JsonDecodeError
fn[A] List::head(Self[A]) -> A?
fn[A] List::intercalate(Self[Self[A]], Self[A]) -> Self[A]
fn[A] List::intersperse(Self[A], A) -> Self[A]
fn[A] List::is_empty(Self[A]) -> Bool
fn[A : Eq] List::is_prefix(Self[A], Self[A]) -> Bool
fn[A : Eq] List::is_suffix(Self[A], Self[A]) -> Bool
fn[A] List::iter(Self[A]) -> Iter[A]
fn[A] List::iter2(Self[A]) -> Iter2[Int, A]
fn[A] List::last(Self[A]) -> A?
fn[A] List::length(Self[A]) -> Int
fn[A : Eq, B] List::lookup(Self[(A, B)], A) -> B?
fn[A, B] List::map(Self[A], (A) -> B raise?) -> Self[B] raise?
fn[A, B] List::mapi(Self[A], (Int, A) -> B raise?) -> Self[B] raise?
fn[A : Compare] List::maximum(Self[A]) -> A?
fn[A : Compare] List::minimum(Self[A]) -> A?
#alias(empty)
#as_free_fn(empty)
#as_free_fn
fn[A] List::new() -> Self[A]
fn[A] List::nth(Self[A], Int) -> A?
#as_free_fn
fn[A] List::of(FixedArray[A]) -> Self[A]
#alias(add)
fn[A] List::prepend(Self[A], A) -> Self[A]
fn[A : Eq] List::remove(Self[A], A) -> Self[A]
fn[A] List::remove_at(Self[A], Int) -> Self[A]
#as_free_fn
fn[A] List::repeat(Int, A) -> Self[A]
fn[A] List::rev(Self[A]) -> Self[A]
fn[A] List::rev_concat(Self[A], Self[A]) -> Self[A]
#deprecated
fn[A, B] List::rev_fold(Self[A], init~ : B, (B, A) -> B) -> B
#deprecated
fn[A, B] List::rev_foldi(Self[A], init~ : B, (Int, B, A) -> B) -> B
fn[A, B] List::rev_map(Self[A], (A) -> B raise?) -> Self[B] raise?
#as_free_fn
fn[A, S] List::rev_unfold((S) -> (A, S)? raise?, init~ : S) -> Self[A] raise?
fn[A, E] List::scan_left(Self[A], (E, A) -> E raise?, init~ : E) -> Self[E] raise?
fn[A, B] List::scan_right(Self[A], (B, A) -> B raise?, init~ : B) -> Self[B] raise?
#as_free_fn
fn[A] List::singleton(A) -> Self[A]
fn[A : Compare] List::sort(Self[A]) -> Self[A]
#deprecated
fn[A] List::tail(Self[A]) -> Self[A]
fn[A] List::take(Self[A], Int) -> Self[A]
fn[A] List::take_while(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A] List::to_array(Self[A]) -> Array[A]
fn[A : ToJson] List::to_json(Self[A]) -> Json
#as_free_fn
fn[A, S] List::unfold((S) -> (A, S)? raise?, init~ : S) -> Self[A] raise?
fn[A] List::unsafe_head(Self[A]) -> A
fn[A] List::unsafe_last(Self[A]) -> A
fn[A : Compare] List::unsafe_maximum(Self[A]) -> A
fn[A : Compare] List::unsafe_minimum(Self[A]) -> A
fn[A] List::unsafe_nth(Self[A], Int) -> A
fn[A] List::unsafe_tail(Self[A]) -> Self[A]
fn[A, B] List::unzip(Self[(A, B)]) -> (Self[A], Self[B])
#as_free_fn
fn[A, B] List::zip(Self[A], Self[B]) -> Self[(A, B)]
impl[A] Add for List[A]
impl[X] Default for List[X]
impl[A : Eq] Eq for List[A]
impl[A : Hash] Hash for List[A]
impl[A : Show] Show for List[A]
impl[A : ToJson] ToJson for List[A]
impl[A : @json.FromJson] @json.FromJson for List[A]
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for List[X]

// Type aliases
pub typealias List as T

// Traits

