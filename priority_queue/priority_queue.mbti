package "moonbitlang/core/priority_queue"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[A : Compare] from_array(Array[A]) -> T[A]

fn[K : Compare] from_iter(Iter[K]) -> T[K]

fn[A] new() -> T[A]

fn[A : Compare] of(FixedArray[A]) -> T[A]

// Types and methods
type T[A]
fn[A] T::clear(Self[A]) -> Unit
fn[A] T::copy(Self[A]) -> Self[A]
fn[A] T::is_empty(Self[A]) -> Bool
fn[A : Compare] T::iter(Self[A]) -> Iter[A]
fn[A] T::length(Self[A]) -> Int
fn[A] T::peek(Self[A]) -> A?
fn[A : Compare] T::pop(Self[A]) -> A?
fn[A : Compare] T::push(Self[A], A) -> Unit
fn[A : Compare] T::to_array(Self[A]) -> Array[A]
fn[A : Compare] T::unsafe_pop(Self[A]) -> Unit
impl[K] Default for T[K]
impl[A : Show + Compare] Show for T[A]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

