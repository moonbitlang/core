package "moonbitlang/core/priority_queue"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[A] clear(T[A]) -> Unit

fn[A] copy(T[A]) -> T[A]

fn[A : Compare] from_array(Array[A]) -> T[A]

fn[K : Compare] from_iter(Iter[K]) -> T[K]

fn[A] is_empty(T[A]) -> Bool

fn[A : Compare] iter(T[A]) -> Iter[A]

fn[A] length(T[A]) -> Int

fn[A] new() -> T[A]

fn[A : Compare] of(FixedArray[A]) -> T[A]

fn[A] peek(T[A]) -> A?

fn[A : Compare] pop(T[A]) -> A?

fn[A : Compare] push(T[A], A) -> Unit

fn[A : Compare] to_array(T[A]) -> Array[A]

fn[A : Compare] unsafe_pop(T[A]) -> Unit

// Types and methods
type T[A]
impl T {
  clear[A](Self[A]) -> Unit
  copy[A](Self[A]) -> Self[A]
  is_empty[A](Self[A]) -> Bool
  iter[A : Compare](Self[A]) -> Iter[A]
  length[A](Self[A]) -> Int
  peek[A](Self[A]) -> A?
  pop[A : Compare](Self[A]) -> A?
  push[A : Compare](Self[A], A) -> Unit
  to_array[A : Compare](Self[A]) -> Array[A]
  unsafe_pop[A : Compare](Self[A]) -> Unit
}
impl[K] Default for T[K]
impl[A : Show + Compare] Show for T[A]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

