// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/cmp"

// Values
fn[T : Compare] maximum(T, T) -> T

fn[T, K : Compare] maximum_by_key(T, T, (T) -> K) -> T

fn[T : Compare] minimum(T, T) -> T

fn[T, K : Compare] minimum_by_key(T, T, (T) -> K) -> T

fn[T : Compare] minmax(T, T) -> (T, T)

fn[T, K : Compare] minmax_by_key(T, T, (T) -> K) -> (T, T)

// Errors

// Types and methods
pub(all) struct Reverse[T](T)
fn[T : Compare] Reverse::compare(Self[T], Self[T]) -> Int // from trait `Compare`
fn[T : Eq] Reverse::equal(Self[T], Self[T]) -> Bool // from trait `Eq`
fn[T : Hash] Reverse::hash(Self[T]) -> Int // from trait `Hash`
fn[T : Hash] Reverse::hash_combine(Self[T], Hasher) -> Unit // from trait `Hash`
#deprecated
fn[T] Reverse::inner(Self[T]) -> T
#deprecated
fn[T : Eq] Reverse::op_equal(Self[T], Self[T]) -> Bool // from trait `Eq`
fn[T : Compare] Reverse::op_ge(Self[T], Self[T]) -> Bool // from trait `Compare`
fn[T : Compare] Reverse::op_gt(Self[T], Self[T]) -> Bool // from trait `Compare`
fn[T : Compare] Reverse::op_le(Self[T], Self[T]) -> Bool // from trait `Compare`
fn[T : Compare] Reverse::op_lt(Self[T], Self[T]) -> Bool // from trait `Compare`
fn[T : Show] Reverse::output(Self[T], &Logger) -> Unit // from trait `Show`
fn[T : Show] Reverse::to_string(Self[T]) -> String // from trait `Show`
impl[T : Compare] Compare for Reverse[T]
impl[T : Eq] Eq for Reverse[T]
impl[T : Hash] Hash for Reverse[T]
impl[T : Show] Show for Reverse[T]

// Type aliases

// Traits

