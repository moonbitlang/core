package "moonbitlang/core/sorted_map"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Compare, V] add(T[K, V], K, V) -> Unit

fn[K, V] clear(T[K, V]) -> Unit

fn[K : Compare, V] contains(T[K, V], K) -> Bool

fn[K, V] each(T[K, V], (K, V) -> Unit) -> Unit

fn[K, V] eachi(T[K, V], (Int, K, V) -> Unit) -> Unit

fn[K : Compare, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Compare, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[K : Compare, V] get(T[K, V], K) -> V?

fn[K, V] is_empty(T[K, V]) -> Bool

fn[K, V] iter(T[K, V]) -> Iter[(K, V)]

fn[K, V] iter2(T[K, V]) -> Iter2[K, V]

fn[K, V] keys(T[K, V]) -> Array[K]

fn[K, V] new() -> T[K, V]

#deprecated
fn[K : Compare, V] of(Array[(K, V)]) -> T[K, V]

#deprecated
fn[K : Compare, V] op_get(T[K, V], K) -> V?

fn[K : Compare, V] op_set(T[K, V], K, V) -> Unit

fn[K : Compare, V] range(T[K, V], K, K) -> Iter2[K, V]

fn[K : Compare, V] remove(T[K, V], K) -> Unit

fn[K, V] size(T[K, V]) -> Int

fn[K, V] to_array(T[K, V]) -> Array[(K, V)]

fn[K, V] values(T[K, V]) -> Array[V]

// Types and methods
type T[K, V]
impl T {
  add[K : Compare, V](Self[K, V], K, V) -> Unit
  clear[K, V](Self[K, V]) -> Unit
  contains[K : Compare, V](Self[K, V], K) -> Bool
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  eachi[K, V](Self[K, V], (Int, K, V) -> Unit) -> Unit
  get[K : Compare, V](Self[K, V], K) -> V?
  is_empty[K, V](Self[K, V]) -> Bool
  iter[K, V](Self[K, V]) -> Iter[(K, V)]
  iter2[K, V](Self[K, V]) -> Iter2[K, V]
  keys[K, V](Self[K, V]) -> Array[K]
  #deprecated
  op_get[K : Compare, V](Self[K, V], K) -> V?
  op_set[K : Compare, V](Self[K, V], K, V) -> Unit
  range[K : Compare, V](Self[K, V], K, K) -> Iter2[K, V]
  remove[K : Compare, V](Self[K, V], K) -> Unit
  size[K, V](Self[K, V]) -> Int
  to_array[K, V](Self[K, V]) -> Array[(K, V)]
  values[K, V](Self[K, V]) -> Array[V]
}
impl[K, V] Default for T[K, V]
impl[K : Eq, V : Eq] Eq for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : @quickcheck.Arbitrary + Compare, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

