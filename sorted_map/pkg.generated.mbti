// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/sorted_map"

import(
  "moonbitlang/core/quickcheck"
)

// Values

// Errors

// Types and methods
type SortedMap[K, V]
#alias(op_get)
fn[K : Compare, V] SortedMap::at(Self[K, V], K) -> V
fn[K, V] SortedMap::clear(Self[K, V]) -> Unit
fn[K : Compare, V] SortedMap::contains(Self[K, V], K) -> Bool
fn[K, V] SortedMap::each(Self[K, V], (K, V) -> Unit raise?) -> Unit raise?
fn[K, V] SortedMap::eachi(Self[K, V], (Int, K, V) -> Unit raise?) -> Unit raise?
#as_free_fn
fn[K : Compare, V] SortedMap::from_array(Array[(K, V)]) -> Self[K, V]
#as_free_fn
fn[K : Compare, V] SortedMap::from_iter(Iter[(K, V)]) -> Self[K, V]
fn[K : Compare, V] SortedMap::get(Self[K, V], K) -> V?
fn[K, V] SortedMap::is_empty(Self[K, V]) -> Bool
fn[K, V] SortedMap::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] SortedMap::iter2(Self[K, V]) -> Iter2[K, V]
#deprecated
fn[K, V] SortedMap::keys(Self[K, V]) -> Array[K]
fn[K, V] SortedMap::keys_as_iter(Self[K, V]) -> Iter[K]
#as_free_fn
fn[K, V] SortedMap::new() -> Self[K, V]
#as_free_fn
fn[K : Compare, V] SortedMap::of(FixedArray[(K, V)]) -> Self[K, V]
fn[K : Compare, V] SortedMap::range(Self[K, V], K, K) -> Iter2[K, V]
fn[K : Compare, V] SortedMap::remove(Self[K, V], K) -> Unit
#alias(add, deprecated)
#alias(op_set)
fn[K : Compare, V] SortedMap::set(Self[K, V], K, V) -> Unit
fn[K, V] SortedMap::size(Self[K, V]) -> Int
fn[K, V] SortedMap::to_array(Self[K, V]) -> Array[(K, V)]
#deprecated
fn[K, V] SortedMap::values(Self[K, V]) -> Array[V]
fn[K, V] SortedMap::values_as_iter(Self[K, V]) -> Iter[V]
impl[K, V] Default for SortedMap[K, V]
impl[K : Eq, V : Eq] Eq for SortedMap[K, V]
impl[K : Show, V : Show] Show for SortedMap[K, V]
impl[K : @quickcheck.Arbitrary + Compare, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for SortedMap[K, V]

// Type aliases
pub typealias SortedMap as T

// Traits

