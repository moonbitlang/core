// Package for high-precision decimal arithmetic
package "Decimal"

// Values
fn from_parts(@bigint.BigInt, Int) -> Decimal
// Create a Decimal from mantissa (BigInt) and scale (number of decimal places)

fn from_int(Int) -> Decimal
// Create a Decimal from a regular integer (scale = 0)

// Adds two Decimal numbers.
fn add(a: Decimal, b: Decimal) -> Decimal

// Subtracts one Decimal number from another.
fn sub(a: Decimal, b: Decimal) -> Decimal

// Multiplies two Decimal numbers.
fn mul(a: Decimal, b: Decimal) -> Decimal

// Divides one Decimal number by another with a specified precision.
// The default precision is 28 decimal places.
fn div(a: Decimal, b: Decimal, precision~: Int) -> Decimal

// Types and methods
pub struct Decimal {
    mantissa: @bigint.BigInt // integer representation of the number without decimal point
    scale: Int               // number of decimal digits
}

// Type aliases
// (none)

// Traits
impl Show for Decimal
// Convert Decimal to string representation with correct decimal point placement

impl Eq for Decimal
// Equality comparison

impl Compare for Decimal
// Ordering comparison, considers normalized scale
