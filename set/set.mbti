package "moonbitlang/core/set"

// Values
fn[K : Hash + Eq] add(Set[K], K) -> Unit

fn[K : Hash + Eq] add_and_check(Set[K], K) -> Bool

fn[K] capacity(Set[K]) -> Int

fn[K] clear(Set[K]) -> Unit

fn[K : Hash + Eq] contains(Set[K], K) -> Bool

fn[K : Hash + Eq] difference(Set[K], Set[K]) -> Set[K]

fn[K] each(Set[K], (K) -> Unit) -> Unit

fn[K] eachi(Set[K], (Int, K) -> Unit) -> Unit

#deprecated
fn[K : Hash + Eq] insert(Set[K], K) -> Unit

fn[K : Hash + Eq] intersection(Set[K], Set[K]) -> Set[K]

fn[K] is_empty(Set[K]) -> Bool

fn[K] iter(Set[K]) -> Iter[K]

fn[K : Hash + Eq] remove(Set[K], K) -> Unit

fn[K : Hash + Eq] remove_and_check(Set[K], K) -> Bool

fn[K] size(Set[K]) -> Int

fn[K : Hash + Eq] symmetric_difference(Set[K], Set[K]) -> Set[K]

fn[K] to_array(Set[K]) -> Array[K]

fn[K : Hash + Eq] union(Set[K], Set[K]) -> Set[K]

// Types and methods
type Set[K]
impl Set {
  add[K : Hash + Eq](Self[K], K) -> Unit
  add_and_check[K : Hash + Eq](Self[K], K) -> Bool
  capacity[K](Self[K]) -> Int
  clear[K](Self[K]) -> Unit
  contains[K : Hash + Eq](Self[K], K) -> Bool
  difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  each[K](Self[K], (K) -> Unit) -> Unit
  eachi[K](Self[K], (Int, K) -> Unit) -> Unit
  from_array[K : Hash + Eq](Array[K]) -> Self[K]
  from_iter[K : Hash + Eq](Iter[K]) -> Self[K]
  #deprecated
  insert[K : Hash + Eq](Self[K], K) -> Unit
  intersection[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  is_empty[K](Self[K]) -> Bool
  iter[K](Self[K]) -> Iter[K]
  new[K](capacity~ : Int = ..) -> Self[K]
  of[K : Hash + Eq](FixedArray[K]) -> Self[K]
  remove[K : Hash + Eq](Self[K], K) -> Unit
  remove_and_check[K : Hash + Eq](Self[K], K) -> Bool
  size[K](Self[K]) -> Int
  symmetric_difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  to_array[K](Self[K]) -> Array[K]
  union[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
}
impl[K] Default for Set[K]
impl[K : Hash + Eq] Eq for Set[K]
impl[K : Show] Show for Set[K]
impl[X : ToJson] ToJson for Set[X]

// Type aliases

// Traits

