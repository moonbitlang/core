package "moonbitlang/core/set"

// Values

// Types and methods
type Set[K]
fn[K : Hash + Eq] Set::add(Self[K], K) -> Unit
fn[K : Hash + Eq] Set::add_and_check(Self[K], K) -> Bool
fn[K] Set::capacity(Self[K]) -> Int
fn[K] Set::clear(Self[K]) -> Unit
fn[K : Hash + Eq] Set::contains(Self[K], K) -> Bool
fn[K : Hash + Eq] Set::difference(Self[K], Self[K]) -> Self[K]
fn[K] Set::each(Self[K], (K) -> Unit raise?) -> Unit raise?
fn[K] Set::eachi(Self[K], (Int, K) -> Unit raise?) -> Unit raise?
fn[K : Hash + Eq] Set::from_array(Array[K]) -> Self[K]
fn[K : Hash + Eq] Set::from_iter(Iter[K]) -> Self[K]
#deprecated
fn[K : Hash + Eq] Set::insert(Self[K], K) -> Unit
fn[K : Hash + Eq] Set::intersection(Self[K], Self[K]) -> Self[K]
fn[K] Set::is_empty(Self[K]) -> Bool
fn[K] Set::iter(Self[K]) -> Iter[K]
fn[K] Set::new(capacity~ : Int = ..) -> Self[K]
fn[K : Hash + Eq] Set::of(FixedArray[K]) -> Self[K]
fn[K : Hash + Eq] Set::remove(Self[K], K) -> Unit
fn[K : Hash + Eq] Set::remove_and_check(Self[K], K) -> Bool
fn[K] Set::size(Self[K]) -> Int
fn[K : Hash + Eq] Set::symmetric_difference(Self[K], Self[K]) -> Self[K]
fn[K] Set::to_array(Self[K]) -> Array[K]
fn[K : Hash + Eq] Set::union(Self[K], Self[K]) -> Self[K]
impl[K] Default for Set[K]
impl[K : Hash + Eq] Eq for Set[K]
impl[K : Show] Show for Set[K]
impl[X : ToJson] ToJson for Set[X]

// Type aliases

// Traits

