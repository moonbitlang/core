package "moonbitlang/core/set"

// Values
fn add[K : Hash + Eq](Set[K], K) -> Unit

fn add_and_check[K : Hash + Eq](Set[K], K) -> Bool

fn capacity[K](Set[K]) -> Int

fn clear[K](Set[K]) -> Unit

fn contains[K : Hash + Eq](Set[K], K) -> Bool

fn difference[K : Hash + Eq](Set[K], Set[K]) -> Set[K]

fn each[K](Set[K], (K) -> Unit) -> Unit

fn eachi[K](Set[K], (Int, K) -> Unit) -> Unit

#deprecated
fn insert[K : Hash + Eq](Set[K], K) -> Unit

fn intersection[K : Hash + Eq](Set[K], Set[K]) -> Set[K]

fn is_empty[K](Set[K]) -> Bool

fn iter[K](Set[K]) -> Iter[K]

fn remove[K : Hash + Eq](Set[K], K) -> Unit

fn remove_and_check[K : Hash + Eq](Set[K], K) -> Bool

fn size[K](Set[K]) -> Int

fn symmetric_difference[K : Hash + Eq](Set[K], Set[K]) -> Set[K]

fn to_array[K](Set[K]) -> Array[K]

fn union[K : Hash + Eq](Set[K], Set[K]) -> Set[K]

// Types and methods
type Set[K]
impl Set {
  add[K : Hash + Eq](Self[K], K) -> Unit
  add_and_check[K : Hash + Eq](Self[K], K) -> Bool
  capacity[K](Self[K]) -> Int
  clear[K](Self[K]) -> Unit
  contains[K : Hash + Eq](Self[K], K) -> Bool
  difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  each[K](Self[K], (K) -> Unit) -> Unit
  eachi[K](Self[K], (Int, K) -> Unit) -> Unit
  from_array[K : Hash + Eq](Array[K]) -> Self[K]
  from_iter[K : Hash + Eq](Iter[K]) -> Self[K]
  #deprecated
  insert[K : Hash + Eq](Self[K], K) -> Unit
  intersection[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  is_empty[K](Self[K]) -> Bool
  iter[K](Self[K]) -> Iter[K]
  new[K](capacity~ : Int = ..) -> Self[K]
  of[K : Hash + Eq](FixedArray[K]) -> Self[K]
  remove[K : Hash + Eq](Self[K], K) -> Unit
  remove_and_check[K : Hash + Eq](Self[K], K) -> Bool
  size[K](Self[K]) -> Int
  symmetric_difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  to_array[K](Self[K]) -> Array[K]
  union[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
}
impl[K] Default for Set[K]
impl[K : Hash + Eq] Eq for Set[K]
impl[K : Show] Show for Set[K]
impl[X : ToJson] ToJson for Set[X]

// Type aliases

// Traits

