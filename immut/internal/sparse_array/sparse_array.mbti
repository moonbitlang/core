package "moonbitlang/core/immut/internal/sparse_array"

// Values
fn[X] doubleton(Int, X, Int, X) -> SparseArray[X]

fn[X] empty() -> SparseArray[X]

fn[X] singleton(Int, X) -> SparseArray[X]

// Types and methods
pub(all) type Bitset UInt
fn Bitset::add(Self, Int) -> Self
fn Bitset::first_idx(Self) -> Int
fn Bitset::has(Self, Int) -> Bool
fn Bitset::index_of(Self, Int) -> Int
fn Bitset::inner(Self) -> UInt
fn Bitset::intersection(Self, Self) -> Self
fn Bitset::remove(Self, Int) -> Self
fn Bitset::size(Self) -> Int
fn Bitset::union(Self, Self) -> Self
impl Eq for Bitset

pub(all) struct SparseArray[X] {
  elem_info : Bitset
  data : FixedArray[X]
}
fn[X] SparseArray::add(Self[X], Int, X) -> Self[X]
fn[X] SparseArray::difference(Self[X], Self[X], (X, X) -> X?) -> Self[X]?
fn[X] SparseArray::each(Self[X], (X) -> Unit raise?) -> Unit raise?
fn[X] SparseArray::filter(Self[X], (X) -> X? raise?) -> Self[X]? raise?
fn[X] SparseArray::intersection(Self[X], Self[X], (X, X) -> X? raise?) -> Self[X]? raise?
fn[X, Y] SparseArray::map(Self[X], (X) -> Y raise?) -> Self[Y] raise?
fn[X] SparseArray::op_get(Self[X], Int) -> X?
fn[X] SparseArray::remove(Self[X], Int) -> Self[X]
fn[X] SparseArray::replace(Self[X], Int, X) -> Self[X]
fn[X] SparseArray::size(Self[X]) -> Int
fn[X] SparseArray::union(Self[X], Self[X], (X, X) -> X raise?) -> Self[X] raise?
impl[X : Eq] Eq for SparseArray[X]

// Type aliases

// Traits

