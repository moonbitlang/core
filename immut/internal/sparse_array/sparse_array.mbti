package "moonbitlang/core/immut/internal/sparse_array"

// Values
fn add[X](SparseArray[X], Int, X) -> SparseArray[X]

fn each[X](SparseArray[X], (X) -> Unit) -> Unit

fn has[X](SparseArray[X], Int) -> Bool

fn op_get[X](SparseArray[X], Int) -> X?

fn replace[X](SparseArray[X], Int, X) -> SparseArray[X]

fn singleton[X](Int, X) -> SparseArray[X]

fn size[X](SparseArray[X]) -> Int

// Types and methods
pub(all) type Bitset UInt
impl Bitset {
  add(Self, Int) -> Self
  has(Self, Int) -> Bool
  index_of(Self, Int) -> Int
  remove(Self, Int) -> Self
  size(Self) -> Int
}
impl Eq for Bitset

pub(all) struct SparseArray[X] {
  elem_info : Bitset
  data : FixedArray[X]
}
impl SparseArray {
  add[X](Self[X], Int, X) -> Self[X]
  each[X](Self[X], (X) -> Unit) -> Unit
  has[X](Self[X], Int) -> Bool
  op_get[X](Self[X], Int) -> X?
  replace[X](Self[X], Int, X) -> Self[X]
  size[X](Self[X]) -> Int
}
impl[X : Eq] Eq for SparseArray[X]

// Type aliases

// Traits

