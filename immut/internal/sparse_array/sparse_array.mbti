package "moonbitlang/core/immut/internal/sparse_array"

// Values
fn[X] add(SparseArray[X], Int, X) -> SparseArray[X]

fn[X] each(SparseArray[X], (X) -> Unit) -> Unit

fn[X] empty() -> SparseArray[X]

fn[X] has(SparseArray[X], Int) -> Bool

fn[X] op_get(SparseArray[X], Int) -> X?

fn[X] replace(SparseArray[X], Int, X) -> SparseArray[X]

fn[X] singleton(Int, X) -> SparseArray[X]

fn[X] size(SparseArray[X]) -> Int

fn[X] union(SparseArray[X], SparseArray[X], (X, X) -> X) -> SparseArray[X]

// Types and methods
pub(all) type Bitset UInt
impl Bitset {
  add(Self, Int) -> Self
  difference(Self, Self) -> Self
  has(Self, Int) -> Bool
  index_of(Self, Int) -> Int
  intersection(Self, Self) -> Self
  iter(Self) -> Iter[Int]
  remove(Self, Int) -> Self
  size(Self) -> Int
  union(Self, Self) -> Self
}
impl Eq for Bitset

pub(all) struct SparseArray[X] {
  elem_info : Bitset
  data : FixedArray[X]
}
impl SparseArray {
  add[X](Self[X], Int, X) -> Self[X]
  each[X](Self[X], (X) -> Unit) -> Unit
  has[X](Self[X], Int) -> Bool
  op_get[X](Self[X], Int) -> X?
  replace[X](Self[X], Int, X) -> Self[X]
  size[X](Self[X]) -> Int
  union[X](Self[X], Self[X], (X, X) -> X) -> Self[X]
}
impl[X : Eq] Eq for SparseArray[X]

// Type aliases

// Traits

