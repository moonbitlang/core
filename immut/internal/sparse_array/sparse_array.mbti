package "moonbitlang/core/immut/internal/sparse_array"

// Values
fn[A] doubleton(Int, A, Int, A) -> T[A]

fn[A] singleton(Int, A) -> T[A]

// Types and methods
pub(all) struct T[A] {
  data : FixedArray[A]
  // private fields
}
fn[A] T::add(Self[A], Int, A) -> Self[A]
fn[A] T::difference(Self[A], Self[A], (A, A) -> A?) -> Self[A]?
fn[A] T::each(Self[A], (A) -> Unit) -> Unit
fn[A] T::first_index(Self[A]) -> Int
fn[A] T::has(Self[A], Int) -> Bool
fn[A] T::intersection(Self[A], Self[A], (A, A) -> A?) -> Self[A]?
fn[A] T::op_get(Self[A], Int) -> A
fn[A] T::remove(Self[A], Int) -> Self[A]
fn[A] T::replace(Self[A], Int, A) -> Self[A]
fn[A] T::replace_inplace(Self[A], Int, A) -> Unit
fn[A] T::union(Self[A], Self[A], (A, A) -> A) -> Self[A]
impl[A : Eq] Eq for T[A]

// Type aliases

// Traits

