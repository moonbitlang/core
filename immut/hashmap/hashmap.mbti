package "moonbitlang/core/immut/hashmap"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Eq + Hash, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Eq + Hash, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[K, V] new() -> T[K, V]

fn[K : Eq + Hash, V] of(FixedArray[(K, V)]) -> T[K, V]

fn[K : Hash, V] singleton(K, V) -> T[K, V]

// Types and methods
type T[K, V]
fn[K : Eq + Hash, V] T::add(Self[K, V], K, V) -> Self[K, V]
fn[K : Eq + Hash, V] T::contains(Self[K, V], K) -> Bool
fn[K : Eq, V] T::difference(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K, V] T::each(Self[K, V], (K, V) -> Unit raise?) -> Unit raise?
#deprecated
fn[K, V] T::elems(Self[K, V]) -> Iter[V]
fn[K, V] T::filter(Self[K, V], (V) -> Bool raise?) -> Self[K, V] raise?
#deprecated
fn[K : Eq + Hash, V] T::find(Self[K, V], K) -> V?
fn[K, V, A] T::fold(Self[K, V], init~ : A, (A, V) -> A raise?) -> A raise?
fn[K, V, A] T::fold_with_key(Self[K, V], init~ : A, (A, K, V) -> A raise?) -> A raise?
fn[K : Eq + Hash, V] T::get(Self[K, V], K) -> V?
fn[K : Eq, V] T::intersection(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K : Eq, V] T::intersection_with(Self[K, V], Self[K, V], (K, V, V) -> V raise?) -> Self[K, V] raise?
fn[K, V] T::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] T::iter2(Self[K, V]) -> Iter2[K, V]
fn[K, V] T::keys(Self[K, V]) -> Iter[K]
fn[K, V, A] T::map(Self[K, V], (V) -> A raise?) -> Self[K, A] raise?
fn[K, V, A] T::map_with_key(Self[K, V], (K, V) -> A raise?) -> Self[K, A] raise?
#deprecated
fn[K : Eq + Hash, V] T::op_get(Self[K, V], K) -> V?
fn[K : Eq + Hash, V] T::remove(Self[K, V], K) -> Self[K, V]
fn[K, V] T::size(Self[K, V]) -> Int
fn[K, V] T::to_array(Self[K, V]) -> Array[(K, V)]
fn[K : Eq, V] T::union(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K : Eq, V] T::union_with(Self[K, V], Self[K, V], (K, V, V) -> V raise?) -> Self[K, V] raise?
fn[K, V] T::values(Self[K, V]) -> Iter[V]
impl[K : Eq, V : Eq] Eq for T[K, V]
impl[K : Hash, V : Hash] Hash for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Eq + Hash + @quickcheck.Arbitrary, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

