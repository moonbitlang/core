package moonbitlang/core/immut/hashmap

// Values

// Types and methods
type Map
impl Map {
  add[K : Eq + Hash, V](Self[K, V], K, V) -> Self[K, V]
  as_iter[K, V](Self[K, V]) -> Iter[Tuple[K, V]]
  debug_write[K : Debug, V : Debug](Self[K, V], Buffer) -> Unit
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  find[K : Eq + Hash, V](Self[K, V], K) -> V?
  from_array[K : Eq + Hash, V](Array[Tuple[K, V]]) -> Self[K, V]
  new[K, V]() -> Self[K, V]
  of[K : Eq + Hash, V](FixedArray[Tuple[K, V]]) -> Self[K, V]
  op_get[K : Eq + Hash, V](Self[K, V], K) -> V?
  remove[K : Eq + Hash, V](Self[K, V], K) -> Self[K, V]
  size[K, V](Self[K, V]) -> Int
  to_string[K : Debug, V : Debug](Self[K, V]) -> String
}

// Traits

// Extension Methods

