package moonbitlang/core/immut/hashmap

alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods
type T
impl T {
  add[K : Eq + Hash, V](Self[K, V], K, V) -> Self[K, V]
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  find[K : Eq + Hash, V](Self[K, V], K) -> V?
  from_array[K : Eq + Hash, V](Array[(K, V)]) -> Self[K, V]
  from_iter[K : Eq + Hash, V](Iter[(K, V)]) -> Self[K, V]
  iter[K, V](Self[K, V]) -> Iter[(K, V)]
  new[K, V]() -> Self[K, V]
  of[K : Eq + Hash, V](FixedArray[(K, V)]) -> Self[K, V]
  op_get[K : Eq + Hash, V](Self[K, V], K) -> V?
  remove[K : Eq + Hash, V](Self[K, V], K) -> Self[K, V]
  size[K, V](Self[K, V]) -> Int
}
impl[K : Eq + Hash, V : Eq] Eq for T[K, V]
impl[K : Hash, V : Hash] Hash for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Eq + Hash + @quickcheck.Arbitrary, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

