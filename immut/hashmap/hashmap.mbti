package "moonbitlang/core/immut/hashmap"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Eq + Hash, V] add(T[K, V], K, V) -> T[K, V]

fn[K : Eq + Hash, V] contains(T[K, V], K) -> Bool

fn[K, V] each(T[K, V], (K, V) -> Unit) -> Unit

#deprecated
fn[K, V] elems(T[K, V]) -> Iter[V]

fn[K : Eq + Hash, V] filter(T[K, V], (V) -> Bool) -> T[K, V]

#deprecated
fn[K : Eq + Hash, V] find(T[K, V], K) -> V?

fn[K, V, A] fold(T[K, V], init~ : A, (A, V) -> A) -> A

fn[K, V, A] fold_with_key(T[K, V], init~ : A, (A, K, V) -> A) -> A

fn[K : Eq + Hash, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Eq + Hash, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[K : Eq + Hash, V] get(T[K, V], K) -> V?

fn[K, V] iter(T[K, V]) -> Iter[(K, V)]

fn[K, V] iter2(T[K, V]) -> Iter2[K, V]

fn[K, V] keys(T[K, V]) -> Iter[K]

fn[K : Eq + Hash, V, A] map(T[K, V], (V) -> A) -> T[K, A]

fn[K : Eq + Hash, V, A] map_with_key(T[K, V], (K, V) -> A) -> T[K, A]

fn[K, V] new() -> T[K, V]

fn[K : Eq + Hash, V] of(FixedArray[(K, V)]) -> T[K, V]

#deprecated
fn[K : Eq + Hash, V] op_get(T[K, V], K) -> V?

fn[K : Eq + Hash, V] remove(T[K, V], K) -> T[K, V]

fn[K, V] singleton(K, V) -> T[K, V]

fn[K, V] size(T[K, V]) -> Int

fn[K, V] to_array(T[K, V]) -> Array[(K, V)]

fn[K : Eq + Hash, V] union(T[K, V], T[K, V]) -> T[K, V]

fn[K, V] values(T[K, V]) -> Iter[V]

// Types and methods
type T[K, V]
impl T {
  add[K : Eq + Hash, V](Self[K, V], K, V) -> Self[K, V]
  contains[K : Eq + Hash, V](Self[K, V], K) -> Bool
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  #deprecated
  elems[K, V](Self[K, V]) -> Iter[V]
  filter[K : Eq + Hash, V](Self[K, V], (V) -> Bool) -> Self[K, V]
  #deprecated
  find[K : Eq + Hash, V](Self[K, V], K) -> V?
  fold[K, V, A](Self[K, V], init~ : A, (A, V) -> A) -> A
  fold_with_key[K, V, A](Self[K, V], init~ : A, (A, K, V) -> A) -> A
  get[K : Eq + Hash, V](Self[K, V], K) -> V?
  iter[K, V](Self[K, V]) -> Iter[(K, V)]
  iter2[K, V](Self[K, V]) -> Iter2[K, V]
  keys[K, V](Self[K, V]) -> Iter[K]
  map[K : Eq + Hash, V, A](Self[K, V], (V) -> A) -> Self[K, A]
  map_with_key[K : Eq + Hash, V, A](Self[K, V], (K, V) -> A) -> Self[K, A]
  #deprecated
  op_get[K : Eq + Hash, V](Self[K, V], K) -> V?
  remove[K : Eq + Hash, V](Self[K, V], K) -> Self[K, V]
  size[K, V](Self[K, V]) -> Int
  to_array[K, V](Self[K, V]) -> Array[(K, V)]
  union[K : Eq + Hash, V](Self[K, V], Self[K, V]) -> Self[K, V]
  values[K, V](Self[K, V]) -> Iter[V]
}
impl[K : Eq + Hash, V : Eq] Eq for T[K, V]
impl[K : Hash, V : Hash] Hash for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Eq + Hash + @quickcheck.Arbitrary, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

