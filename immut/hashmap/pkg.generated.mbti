// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/immut/hashmap"

import(
  "moonbitlang/core/quickcheck"
  "moonbitlang/core/quickcheck/splitmix"
)

// Values

// Errors

// Types and methods
type HashMap[K, V]
fn[K : Eq + Hash, V] HashMap::add(Self[K, V], K, V) -> Self[K, V]
fn[K : Eq + Hash + @quickcheck.Arbitrary, V : @quickcheck.Arbitrary] HashMap::arbitrary(Int, @splitmix.RandomState) -> Self[K, V] // from trait `@quickcheck.Arbitrary`
#alias("_[_]")
fn[K : Eq + Hash, V] HashMap::at(Self[K, V], K) -> V
fn[K : Eq + Hash, V] HashMap::contains(Self[K, V], K) -> Bool
fn[K : Eq, V] HashMap::difference(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K, V] HashMap::each(Self[K, V], (K, V) -> Unit raise?) -> Unit raise?
fn[K : Eq, V : Eq] HashMap::equal(Self[K, V], Self[K, V]) -> Bool // from trait `Eq`
#deprecated
fn[K, V] HashMap::filter(Self[K, V], (V) -> Bool raise?) -> Self[K, V] raise?
fn[K, V] HashMap::filter_with_key(Self[K, V], (K, V) -> Bool raise?) -> Self[K, V] raise?
#deprecated
fn[K, V, A] HashMap::fold(Self[K, V], init~ : A, (A, V) -> A raise?) -> A raise?
fn[K, V, A] HashMap::fold_with_key(Self[K, V], init~ : A, (A, K, V) -> A raise?) -> A raise?
#alias(of, deprecated)
#as_free_fn(of, deprecated)
#as_free_fn
fn[K : Eq + Hash, V] HashMap::from_array(ArrayView[(K, V)]) -> Self[K, V]
#as_free_fn
fn[K : Eq + Hash, V] HashMap::from_iter(Iter[(K, V)]) -> Self[K, V]
#as_free_fn
fn[K : Eq + Hash, V] HashMap::from_iterator(Iterator[(K, V)]) -> Self[K, V]
#alias(find, deprecated)
fn[K : Eq + Hash, V] HashMap::get(Self[K, V], K) -> V?
fn[K : Hash, V : Hash] HashMap::hash(Self[K, V]) -> Int // from trait `Hash`
fn[K : Hash, V : Hash] HashMap::hash_combine(Self[K, V], Hasher) -> Unit // from trait `Hash`
fn[K : Eq, V] HashMap::intersection(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K : Eq, V] HashMap::intersection_with(Self[K, V], Self[K, V], (K, V, V) -> V raise?) -> Self[K, V] raise?
fn[K, V] HashMap::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] HashMap::iter2(Self[K, V]) -> Iter2[K, V]
fn[K, V] HashMap::iterator(Self[K, V]) -> Iterator[(K, V)]
fn[K, V] HashMap::iterator2(Self[K, V]) -> Iterator2[K, V]
fn[K, V] HashMap::keys(Self[K, V]) -> Iter[K]
#alias(size, deprecated)
fn[K, V] HashMap::length(Self[K, V]) -> Int
#deprecated
fn[K, V, A] HashMap::map(Self[K, V], (V) -> A raise?) -> Self[K, A] raise?
fn[K, V, A] HashMap::map_with_key(Self[K, V], (K, V) -> A raise?) -> Self[K, A] raise?
#as_free_fn
fn[K, V] HashMap::new() -> Self[K, V]
#deprecated
fn[K : Eq, V : Eq] HashMap::op_equal(Self[K, V], Self[K, V]) -> Bool // from trait `Eq`
fn[K : Show, V : Show] HashMap::output(Self[K, V], &Logger) -> Unit // from trait `Show`
fn[K : Eq + Hash, V] HashMap::remove(Self[K, V], K) -> Self[K, V]
#as_free_fn
fn[K : Hash, V] HashMap::singleton(K, V) -> Self[K, V]
fn[K, V] HashMap::to_array(Self[K, V]) -> Array[(K, V)]
fn[K : Show, V : Show] HashMap::to_string(Self[K, V]) -> String // from trait `Show`
fn[K : Eq, V] HashMap::union(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K : Eq, V] HashMap::union_with(Self[K, V], Self[K, V], (K, V, V) -> V raise?) -> Self[K, V] raise?
#alias(elems, deprecated)
fn[K, V] HashMap::values(Self[K, V]) -> Iter[V]
impl[K : Eq, V : Eq] Eq for HashMap[K, V]
impl[K : Hash, V : Hash] Hash for HashMap[K, V]
impl[K : Show, V : Show] Show for HashMap[K, V]
impl[K : Eq + Hash + @quickcheck.Arbitrary, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for HashMap[K, V]

// Type aliases
pub typealias HashMap as T

// Traits

