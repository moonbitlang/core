package moonbitlang/core/immut/array

// Values
fn immutable_push[T](Array[T], T) -> Array[T]

fn immutable_set[T](Array[T], Int, T) -> Array[T]

fn is_empty[T](ImmutableVec[T]) -> Bool

fn length[T](ImmutableVec[T]) -> Int

// Types and methods
type ImmutableVec
impl ImmutableVec {
  copy[T](Self[T]) -> Self[T]
  debug_write[T : Debug](Self[T], Buffer) -> Unit
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  empty[T]() -> Self[T]
  fold_left[T](Self[T], (T, T) -> T, ~init : T) -> T
  fold_right[T](Self[T], (T, T) -> T, ~init : T) -> T
  from_array[T](Array[T]) -> Self[T]
  iter[T](Self[T]) -> Iter[T]
  map[T, U](Self[T], (T) -> U) -> Self[U]
  new[T](Int, T) -> Self[T]
  new_with_index[T](Int, (Int) -> T) -> Self[T]
  of[T](FixedArray[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  op_get[T](Self[T], Int) -> T
  push[T](Self[T], T) -> Self[T]
  set[T](Self[T], Int, T) -> Self[T]
  to_array[T](Self[T]) -> Array[T]
  to_string[T : Show](Self[T]) -> String
}

// Traits

// Extension Methods

