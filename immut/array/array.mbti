package moonbitlang/core/immut/array

alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods
type T
impl T {
  copy[A](Self[A]) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  fold[A, B](Self[A], ~init : B, (B, A) -> B) -> B
  fold_left[A](Self[A], (A, A) -> A, ~init : A) -> A
  fold_right[A](Self[A], (A, A) -> A, ~init : A) -> A
  from_array[A](Array[A]) -> Self[A]
  from_iter[A](Iter[A]) -> Self[A]
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  length[A](Self[A]) -> Int
  make[A](Int, A) -> Self[A]
  makei[A](Int, (Int) -> A) -> Self[A]
  map[A, B](Self[A], (A) -> B) -> Self[B]
  new[A]() -> Self[A]
  of[A](FixedArray[A]) -> Self[A]
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
  op_get[A](Self[A], Int) -> A
  push[A](Self[A], A) -> Self[A]
  rev_fold[A, B](Self[A], ~init : B, (B, A) -> B) -> B
  set[A](Self[A], Int, A) -> Self[A]
  to_array[A](Self[A]) -> Array[A]
  to_string[A : Show](Self[A]) -> String
}

// Type aliases

// Traits

// Extension Methods
impl Show for T

impl @quickcheck.Arbitrary for T

