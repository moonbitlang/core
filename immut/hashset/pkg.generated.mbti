// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/immut/hashset"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[A : Eq + Hash] from_array(Array[A]) -> HashSet[A]

fn[A : Eq + Hash] from_iter(Iter[A]) -> HashSet[A]

fn[A] new() -> HashSet[A]

fn[A : Eq + Hash] of(FixedArray[A]) -> HashSet[A]

// Errors

// Types and methods
type HashSet[A]
fn[A : Eq + Hash] HashSet::add(Self[A], A) -> Self[A]
fn[A : Eq + Hash] HashSet::contains(Self[A], A) -> Bool
fn[K : Eq] HashSet::difference(Self[K], Self[K]) -> Self[K]
fn[A] HashSet::each(Self[A], (A) -> Unit raise?) -> Unit raise?
fn[K : Eq] HashSet::intersection(Self[K], Self[K]) -> Self[K]
fn[A] HashSet::is_empty(Self[A]) -> Bool
fn[A] HashSet::iter(Self[A]) -> Iter[A]
fn[A : Eq + Hash] HashSet::remove(Self[A], A) -> Self[A]
fn[A] HashSet::size(Self[A]) -> Int
fn[K : Eq] HashSet::union(Self[K], Self[K]) -> Self[K]
impl[A : Eq] Eq for HashSet[A]
impl[A : Hash] Hash for HashSet[A]
impl[A : Show] Show for HashSet[A]
impl[K : Eq + Hash + @quickcheck.Arbitrary] @quickcheck.Arbitrary for HashSet[K]

// Type aliases
pub typealias HashSet as T

// Traits

