package "moonbitlang/core/immut/list"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[A] add(T[A], A) -> T[A]

fn[A] all(T[A], (A) -> Bool raise?) -> Bool raise?

fn[A] any(T[A], (A) -> Bool raise?) -> Bool raise?

fn[A] concat(T[A], T[A]) -> T[A]

#deprecated
fn[A, B] concat_map(T[A], (A) -> T[B]) -> T[B]

fn[A : Eq] contains(T[A], A) -> Bool

fn[X] default() -> T[X]

fn[A] drop(T[A], Int) -> T[A]

fn[A] drop_while(T[A], (A) -> Bool raise?) -> T[A] raise?

fn[A] each(T[A], (A) -> Unit raise?) -> Unit raise?

fn[A] eachi(T[A], (Int, A) -> Unit raise?) -> Unit raise?

#deprecated
fn[A : Eq] equal(T[A], T[A]) -> Bool

fn[A] filter(T[A], (A) -> Bool raise?) -> T[A] raise?

fn[A, B] filter_map(T[A], (A) -> B?) -> T[B]

fn[A] find(T[A], (A) -> Bool raise?) -> A? raise?

fn[A] findi(T[A], (A, Int) -> Bool raise?) -> A? raise?

fn[A, B] flat_map(T[A], (A) -> T[B] raise?) -> T[B] raise?

fn[A] flatten(T[T[A]]) -> T[A]

fn[A, B] fold(T[A], init~ : B, (B, A) -> B raise?) -> B raise?

#deprecated
fn[A, B] fold_left(T[A], (B, A) -> B raise?, init~ : B) -> B raise?

#deprecated
fn[A, B] fold_lefti(T[A], (Int, B, A) -> B raise?, init~ : B) -> B raise?

#deprecated
fn[A, B] fold_right(T[A], (A, B) -> B raise?, init~ : B) -> B raise?

#deprecated
fn[A, B] fold_righti(T[A], (Int, A, B) -> B raise?, init~ : B) -> B raise?

fn[A, B] foldi(T[A], init~ : B, (Int, B, A) -> B raise?) -> B raise?

fn[A] from_array(Array[A]) -> T[A]

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] from_iter_rev(Iter[A]) -> T[A]

fn[A : @json.FromJson] from_json(Json) -> T[A] raise @json.JsonDecodeError

fn[A] head(T[A]) -> A?

#deprecated
fn[A] head_exn(T[A]) -> A

#deprecated
fn[A] init_(T[A]) -> T[A]

fn[A] intercalate(T[T[A]], T[A]) -> T[A]

fn[A] intersperse(T[A], A) -> T[A]

fn[A] is_empty(T[A]) -> Bool

fn[A : Eq] is_prefix(T[A], T[A]) -> Bool

fn[A : Eq] is_suffix(T[A], T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A] iter2(T[A]) -> Iter2[Int, A]

fn[A] last(T[A]) -> A?

fn[A] length(T[A]) -> Int

fn[A : Eq, B] lookup(T[(A, B)], A) -> B?

fn[A, B] map(T[A], (A) -> B) -> T[B]

fn[A, B] mapi(T[A], (Int, A) -> B raise?) -> T[B] raise?

fn[A : Compare] maximum(T[A]) -> A?

fn[A : Compare] minimum(T[A]) -> A?

fn[A] nth(T[A], Int) -> A?

#deprecated
fn[A] nth_exn(T[A], Int) -> A

fn[A] of(FixedArray[A]) -> T[A]

fn[A : Eq] remove(T[A], A) -> T[A]

fn[A] remove_at(T[A], Int) -> T[A]

fn[A] repeat(Int, A) -> T[A]

fn[A] rev(T[A]) -> T[A]

fn[A] rev_concat(T[A], T[A]) -> T[A]

fn[A, B] rev_fold(T[A], init~ : B, (A, B) -> B raise?) -> B raise?

fn[A, B] rev_foldi(T[A], init~ : B, (Int, A, B) -> B raise?) -> B raise?

fn[A, B] rev_map(T[A], (A) -> B raise?) -> T[B] raise?

fn[A, E] scan_left(T[A], (E, A) -> E raise?, init~ : E) -> T[E] raise?

fn[A, B] scan_right(T[A], (A, B) -> B raise?, init~ : B) -> T[B] raise?

fn[A] singleton(A) -> T[A]

fn[A : Compare] sort(T[A]) -> T[A]

fn[A] tail(T[A]) -> T[A]

fn[A] take(T[A], Int) -> T[A]

fn[A] take_while(T[A], (A) -> Bool) -> T[A]

fn[A] to_array(T[A]) -> Array[A]

fn[A : ToJson] to_json(T[A]) -> Json

fn[A, S] unfold((S) -> (A, S)? raise?, init~ : S) -> T[A] raise?

fn[A] unsafe_head(T[A]) -> A

fn[A] unsafe_last(T[A]) -> A

fn[A : Compare] unsafe_maximum(T[A]) -> A

fn[A : Compare] unsafe_minimum(T[A]) -> A

fn[A] unsafe_nth(T[A], Int) -> A

fn[A, B] unzip(T[(A, B)]) -> (T[A], T[B])

fn[A, B] zip(T[A], T[B]) -> T[(A, B)]?

// Types and methods
pub(all) enum T[A] {
  Nil
  Cons(A, T[A])
}
fn[A] T::add(Self[A], A) -> Self[A]
fn[A] T::all(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A] T::any(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A] T::concat(Self[A], Self[A]) -> Self[A]
#deprecated
fn[A, B] T::concat_map(Self[A], (A) -> Self[B]) -> Self[B]
fn[A : Eq] T::contains(Self[A], A) -> Bool
#deprecated
fn[X] T::default() -> Self[X]
fn[A] T::drop(Self[A], Int) -> Self[A]
fn[A] T::drop_while(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A] T::each(Self[A], (A) -> Unit raise?) -> Unit raise?
fn[A] T::eachi(Self[A], (Int, A) -> Unit raise?) -> Unit raise?
#deprecated
fn[A : Eq] T::equal(Self[A], Self[A]) -> Bool
fn[A] T::filter(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A, B] T::filter_map(Self[A], (A) -> B?) -> Self[B]
fn[A] T::find(Self[A], (A) -> Bool raise?) -> A? raise?
fn[A] T::findi(Self[A], (A, Int) -> Bool raise?) -> A? raise?
fn[A, B] T::flat_map(Self[A], (A) -> Self[B] raise?) -> Self[B] raise?
fn[A] T::flatten(Self[Self[A]]) -> Self[A]
fn[A, B] T::fold(Self[A], init~ : B, (B, A) -> B raise?) -> B raise?
#deprecated
fn[A, B] T::fold_left(Self[A], (B, A) -> B raise?, init~ : B) -> B raise?
#deprecated
fn[A, B] T::fold_lefti(Self[A], (Int, B, A) -> B raise?, init~ : B) -> B raise?
#deprecated
fn[A, B] T::fold_right(Self[A], (A, B) -> B raise?, init~ : B) -> B raise?
#deprecated
fn[A, B] T::fold_righti(Self[A], (Int, A, B) -> B raise?, init~ : B) -> B raise?
fn[A, B] T::foldi(Self[A], init~ : B, (Int, B, A) -> B raise?) -> B raise?
#deprecated
fn[A] T::from_array(Array[A]) -> Self[A]
#deprecated
fn[A] T::from_iter(Iter[A]) -> Self[A]
#deprecated
fn[A : @json.FromJson] T::from_json(Json) -> Self[A] raise @json.JsonDecodeError
fn[A] T::head(Self[A]) -> A?
#deprecated
fn[A] T::head_exn(Self[A]) -> A
#deprecated
fn[A] T::init_(Self[A]) -> Self[A]
fn[A] T::intercalate(Self[Self[A]], Self[A]) -> Self[A]
fn[A] T::intersperse(Self[A], A) -> Self[A]
fn[A] T::is_empty(Self[A]) -> Bool
fn[A : Eq] T::is_prefix(Self[A], Self[A]) -> Bool
fn[A : Eq] T::is_suffix(Self[A], Self[A]) -> Bool
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A] T::iter2(Self[A]) -> Iter2[Int, A]
fn[A] T::last(Self[A]) -> A?
fn[A] T::length(Self[A]) -> Int
fn[A : Eq, B] T::lookup(Self[(A, B)], A) -> B?
fn[A, B] T::map(Self[A], (A) -> B) -> Self[B]
fn[A, B] T::mapi(Self[A], (Int, A) -> B raise?) -> Self[B] raise?
fn[A : Compare] T::maximum(Self[A]) -> A?
fn[A : Compare] T::minimum(Self[A]) -> A?
fn[A] T::nth(Self[A], Int) -> A?
#deprecated
fn[A] T::nth_exn(Self[A], Int) -> A
#deprecated
fn[A] T::of(FixedArray[A]) -> Self[A]
fn[A : Eq] T::remove(Self[A], A) -> Self[A]
fn[A] T::remove_at(Self[A], Int) -> Self[A]
fn[A] T::rev(Self[A]) -> Self[A]
fn[A] T::rev_concat(Self[A], Self[A]) -> Self[A]
fn[A, B] T::rev_fold(Self[A], init~ : B, (A, B) -> B raise?) -> B raise?
fn[A, B] T::rev_foldi(Self[A], init~ : B, (Int, A, B) -> B raise?) -> B raise?
fn[A, B] T::rev_map(Self[A], (A) -> B raise?) -> Self[B] raise?
fn[A, E] T::scan_left(Self[A], (E, A) -> E raise?, init~ : E) -> Self[E] raise?
fn[A, B] T::scan_right(Self[A], (A, B) -> B raise?, init~ : B) -> Self[B] raise?
fn[A : Compare] T::sort(Self[A]) -> Self[A]
fn[A] T::tail(Self[A]) -> Self[A]
fn[A] T::take(Self[A], Int) -> Self[A]
fn[A] T::take_while(Self[A], (A) -> Bool) -> Self[A]
fn[A] T::to_array(Self[A]) -> Array[A]
fn[A : ToJson] T::to_json(Self[A]) -> Json
fn[A] T::unsafe_head(Self[A]) -> A
fn[A] T::unsafe_last(Self[A]) -> A
fn[A : Compare] T::unsafe_maximum(Self[A]) -> A
fn[A : Compare] T::unsafe_minimum(Self[A]) -> A
fn[A] T::unsafe_nth(Self[A], Int) -> A
fn[A, B] T::unzip(Self[(A, B)]) -> (Self[A], Self[B])
fn[A, B] T::zip(Self[A], Self[B]) -> Self[(A, B)]?
impl[A] Add for T[A]
impl[A : Compare] Compare for T[A]
impl[X] Default for T[X]
impl[A : Eq] Eq for T[A]
impl[A : Hash] Hash for T[A]
impl[A : Show] Show for T[A]
impl[A : ToJson] ToJson for T[A]
impl[A : @json.FromJson] @json.FromJson for T[A]
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

