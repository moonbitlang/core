package moonbitlang/core/immut/list

// Values
fn repeat[T](Int, T) -> List[T]

fn unfold[T, State]((State) -> Tuple[T, State]?, ~init : State) -> List[T]

fn unzip[T, U](List[Tuple[T, U]]) -> Tuple[List[T], List[U]]

// Types and methods
pub enum List {
  Nil
  Cons(T, List[T])
}
impl List {
  all[T](Self[T], (T) -> Bool) -> Bool
  any[T](Self[T], (T) -> Bool) -> Bool
  as_iter[T](Self[T]) -> Iter[T]
  concat[T](Self[T], Self[T]) -> Self[T]
  concat_map[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  contains[T : Eq](Self[T], T) -> Bool
  debug_write[T : Debug](Self[T], Buffer) -> Unit
  default[X]() -> Self[X]
  drop[T](Self[T], Int) -> Self[T]
  drop_while[T](Self[T], (T) -> Bool) -> Self[T]
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  equal[T : Eq](Self[T], Self[T]) -> Bool
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  find[T](Self[T], (T) -> Bool) -> T?
  findi[T](Self[T], (T, Int) -> Bool) -> T?
  flatten[T](Self[Self[T]]) -> Self[T]
  fold_left[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_lefti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  fold_right[T, U](Self[T], (T, U) -> U, ~init : U) -> U
  fold_righti[T, U](Self[T], (Int, T, U) -> U, ~init : U) -> U
  from_array[T](Array[T]) -> Self[T]
  head[T](Self[T]) -> T?
  head_exn[T](Self[T]) -> T
  init_[T](Self[T]) -> Self[T]
  intercalate[T](Self[Self[T]], Self[T]) -> Self[T]
  intersperse[T](Self[T], T) -> Self[T]
  is_empty[T](Self[T]) -> Bool
  is_prefix[T : Eq](Self[T], Self[T]) -> Bool
  is_suffix[T : Eq](Self[T], Self[T]) -> Bool
  last[T](Self[T]) -> T
  length[T](Self[T]) -> Int
  lookup[T : Eq, E](Self[Tuple[T, E]], T) -> E?
  map[T, U](Self[T], (T) -> U) -> Self[U]
  mapi[T, U](Self[T], (Int, T) -> U) -> Self[U]
  maximum[T : Compare + Eq](Self[T]) -> T
  minimum[T : Compare + Eq](Self[T]) -> T
  nth[T](Self[T], Int) -> T?
  nth_exn[T](Self[T], Int) -> T
  of[T](FixedArray[T]) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  remove[T : Eq](Self[T], T) -> Self[T]
  remove_at[T](Self[T], Int) -> Self[T]
  reverse[T](Self[T]) -> Self[T]
  scan_left[T, E](Self[T], (E, T) -> E, ~init : E) -> Self[E]
  scan_right[T, E](Self[T], (T, E) -> E, ~init : E) -> Self[E]
  sort[T : Compare + Eq](Self[T]) -> Self[T]
  tail[T](Self[T]) -> Self[T]
  take[T](Self[T], Int) -> Self[T]
  take_while[T](Self[T], (T) -> Bool) -> Self[T]
  to_array[T](Self[T]) -> Array[T]
  to_string[T : Show](Self[T]) -> String
  zip[T, U](Self[T], Self[U]) -> Self[Tuple[T, U]]
}

// Traits

// Extension Methods

