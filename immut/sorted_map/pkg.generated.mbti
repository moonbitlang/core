// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/immut/sorted_map"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Compare, V] from_array(Array[(K, V)]) -> Map[K, V]

fn[K : Compare, V] from_iter(Iter[(K, V)]) -> Map[K, V]

fn[V : @json.FromJson] from_json(Json) -> Map[String, V] raise @json.JsonDecodeError

fn[K, V] new() -> Map[K, V]

fn[K : Compare, V] of(FixedArray[(K, V)]) -> Map[K, V]

fn[K, V] singleton(K, V) -> Map[K, V]

// Errors

// Types and methods
type Map[K, V]
fn[K : Compare, V] Map::add(Self[K, V], K, V) -> Self[K, V]
fn[K : Compare, V] Map::contains(Self[K, V], K) -> Bool
fn[K, V] Map::each(Self[K, V], (K, V) -> Unit) -> Unit
fn[K, V] Map::eachi(Self[K, V], (Int, K, V) -> Unit) -> Unit
#deprecated
fn[K, V] Map::elems(Self[K, V]) -> Array[V]
#deprecated
fn[K, V] Map::empty() -> Self[K, V]
#deprecated
fn[K : Compare, V] Map::filter(Self[K, V], (V) -> Bool raise?) -> Self[K, V] raise?
fn[K : Compare, V] Map::filter_with_key(Self[K, V], (K, V) -> Bool raise?) -> Self[K, V] raise?
#deprecated
fn[K, V, A] Map::fold(Self[K, V], init~ : A, (A, V) -> A) -> A
fn[K, V, A] Map::foldl_with_key(Self[K, V], (A, K, V) -> A, init~ : A) -> A
#deprecated
fn[K : Compare, V] Map::from_array(Array[(K, V)]) -> Self[K, V]
#deprecated
fn[K : Compare, V] Map::from_iter(Iter[(K, V)]) -> Self[K, V]
#deprecated
fn[V : @json.FromJson] Map::from_json(Json) -> Self[String, V] raise @json.JsonDecodeError
fn[K : Compare, V] Map::get(Self[K, V], K) -> V?
#deprecated
fn[K : Compare, V] Map::insert(Self[K, V], K, V) -> Self[K, V]
fn[K, V] Map::is_empty(Self[K, V]) -> Bool
fn[K, V] Map::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] Map::iter2(Self[K, V]) -> Iter2[K, V]
#deprecated
fn[K, V] Map::keys(Self[K, V]) -> Array[K]
fn[K, V] Map::keys_as_iter(Self[K, V]) -> Iter[K]
#deprecated
fn[K : Compare, V] Map::lookup(Self[K, V], K) -> V?
#deprecated
fn[K, X, Y] Map::map(Self[K, X], (X) -> Y) -> Self[K, Y]
fn[K, X, Y] Map::map_with_key(Self[K, X], (K, X) -> Y) -> Self[K, Y]
#deprecated
fn[K, V] Map::new() -> Self[K, V]
#deprecated
fn[K : Compare, V] Map::of(FixedArray[(K, V)]) -> Self[K, V]
fn[K : Compare, V] Map::op_get(Self[K, V], K) -> V
fn[K : Compare, V] Map::remove(Self[K, V], K) -> Self[K, V]
#alias(foldr_with_key)
fn[K, V, A] Map::rev_fold(Self[K, V], (A, K, V) -> A, init~ : A) -> A
#deprecated
fn[K, V] Map::singleton(K, V) -> Self[K, V]
fn[K, V] Map::size(Self[K, V]) -> Int
fn[K, V] Map::to_array(Self[K, V]) -> Array[(K, V)]
fn[K : Show, V : ToJson] Map::to_json(Self[K, V]) -> Json
fn[K, V] Map::values(Self[K, V]) -> Iter[V]
impl[K : Compare, V : Compare] Compare for Map[K, V]
impl[K, V] Default for Map[K, V]
impl[K : Eq, V : Eq] Eq for Map[K, V]
impl[K : Hash, V : Hash] Hash for Map[K, V]
impl[K : Show, V : Show] Show for Map[K, V]
impl[K : Show, V : ToJson] ToJson for Map[K, V]
impl[V : @json.FromJson] @json.FromJson for Map[String, V]
impl[K : @quickcheck.Arbitrary + Compare, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for Map[K, V]

// Type aliases
pub typealias Map as T

// Traits

