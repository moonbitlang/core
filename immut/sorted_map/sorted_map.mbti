package moonbitlang/core/immut/sorted_map

alias @moonbitlang/core/json as @json
alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods
type T
impl T {
  add[K : Compare, V](Self[K, V], K, V) -> Self[K, V]
  contains[K : Compare, V](Self[K, V], K) -> Bool
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  eachi[K, V](Self[K, V], (Int, K, V) -> Unit) -> Unit
  elems[K, V](Self[K, V]) -> Array[V]
  empty[K, V]() -> Self[K, V]
  filter[K : Compare, V](Self[K, V], (V) -> Bool) -> Self[K, V]
  filter_with_key[K : Compare, V](Self[K, V], (K, V) -> Bool) -> Self[K, V]
  fold[K, V, A](Self[K, V], init~ : A, (A, V) -> A) -> A
  foldl_with_key[K, V, A](Self[K, V], (A, K, V) -> A, init~ : A) -> A
  foldr_with_key[K, V, A](Self[K, V], (A, K, V) -> A, init~ : A) -> A
  from_array[K : Compare, V](Array[(K, V)]) -> Self[K, V]
  from_iter[K : Compare, V](Iter[(K, V)]) -> Self[K, V]
  from_json[V : @json.FromJson](Json) -> Self[String, V]!@json.JsonDecodeError
  insert[K : Compare, V](Self[K, V], K, V) -> Self[K, V] //deprecated
  is_empty[K, V](Self[K, V]) -> Bool
  iter[K, V](Self[K, V]) -> Iter[(K, V)]
  iter2[K, V](Self[K, V]) -> Iter2[K, V]
  keys[K, V](Self[K, V]) -> Array[K]
  lookup[K : Compare, V](Self[K, V], K) -> V?
  map[K, X, Y](Self[K, X], (X) -> Y) -> Self[K, Y]
  map_with_key[K, X, Y](Self[K, X], (K, X) -> Y) -> Self[K, Y]
  of[K : Compare, V](FixedArray[(K, V)]) -> Self[K, V]
  op_get[K : Compare, V](Self[K, V], K) -> V?
  remove[K : Compare, V](Self[K, V], K) -> Self[K, V]
  singleton[K, V](K, V) -> Self[K, V]
  size[K, V](Self[K, V]) -> Int
  to_array[K, V](Self[K, V]) -> Array[(K, V)]
  to_json[K : Show, V : ToJson](Self[K, V]) -> Json
}
impl[K : Compare, V : Compare] Compare for T[K, V]
impl[K, V] Default for T[K, V]
impl[K : Eq, V : Eq] Eq for T[K, V]
impl[K : Hash, V : Hash] Hash for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Show, V : ToJson] ToJson for T[K, V]
impl[V : @json.FromJson] @json.FromJson for T[String, V]
impl[K : @quickcheck.Arbitrary + Compare, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

