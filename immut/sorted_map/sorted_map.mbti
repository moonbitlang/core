package "moonbitlang/core/immut/sorted_map"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Compare, V] add(T[K, V], K, V) -> T[K, V]

fn[K : Compare, V] contains(T[K, V], K) -> Bool

fn[K, V] each(T[K, V], (K, V) -> Unit) -> Unit

fn[K, V] eachi(T[K, V], (Int, K, V) -> Unit) -> Unit

#deprecated
fn[K, V] elems(T[K, V]) -> Array[V]

fn[K : Compare, V] filter(T[K, V], (V) -> Bool raise?) -> T[K, V] raise?

fn[K : Compare, V] filter_with_key(T[K, V], (K, V) -> Bool raise?) -> T[K, V] raise?

fn[K, V, A] fold(T[K, V], init~ : A, (A, V) -> A) -> A

fn[K, V, A] foldl_with_key(T[K, V], (A, K, V) -> A, init~ : A) -> A

fn[K, V, A] foldr_with_key(T[K, V], (A, K, V) -> A, init~ : A) -> A

fn[K : Compare, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Compare, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[V : @json.FromJson] from_json(Json) -> T[String, V] raise @json.JsonDecodeError

fn[K : Compare, V] get(T[K, V], K) -> V?

#deprecated
fn[K : Compare, V] insert(T[K, V], K, V) -> T[K, V]

fn[K, V] is_empty(T[K, V]) -> Bool

fn[K, V] iter(T[K, V]) -> Iter[(K, V)]

fn[K, V] iter2(T[K, V]) -> Iter2[K, V]

fn[K, V] keys(T[K, V]) -> Array[K]

#deprecated
fn[K : Compare, V] lookup(T[K, V], K) -> V?

fn[K, X, Y] map(T[K, X], (X) -> Y) -> T[K, Y]

fn[K, X, Y] map_with_key(T[K, X], (K, X) -> Y) -> T[K, Y]

fn[K, V] new() -> T[K, V]

fn[K : Compare, V] of(FixedArray[(K, V)]) -> T[K, V]

#deprecated
fn[K : Compare, V] op_get(T[K, V], K) -> V?

fn[K : Compare, V] remove(T[K, V], K) -> T[K, V]

fn[K, V] singleton(K, V) -> T[K, V]

fn[K, V] size(T[K, V]) -> Int

fn[K, V] to_array(T[K, V]) -> Array[(K, V)]

fn[K : Show, V : ToJson] to_json(T[K, V]) -> Json

fn[K, V] values(T[K, V]) -> Iter[V]

// Types and methods
type T[K, V]
fn[K : Compare, V] T::add(Self[K, V], K, V) -> Self[K, V]
fn[K : Compare, V] T::contains(Self[K, V], K) -> Bool
fn[K, V] T::each(Self[K, V], (K, V) -> Unit) -> Unit
fn[K, V] T::eachi(Self[K, V], (Int, K, V) -> Unit) -> Unit
#deprecated
fn[K, V] T::elems(Self[K, V]) -> Array[V]
#deprecated
fn[K, V] T::empty() -> Self[K, V]
fn[K : Compare, V] T::filter(Self[K, V], (V) -> Bool raise?) -> Self[K, V] raise?
fn[K : Compare, V] T::filter_with_key(Self[K, V], (K, V) -> Bool raise?) -> Self[K, V] raise?
fn[K, V, A] T::fold(Self[K, V], init~ : A, (A, V) -> A) -> A
fn[K, V, A] T::foldl_with_key(Self[K, V], (A, K, V) -> A, init~ : A) -> A
fn[K, V, A] T::foldr_with_key(Self[K, V], (A, K, V) -> A, init~ : A) -> A
#deprecated
fn[K : Compare, V] T::from_array(Array[(K, V)]) -> Self[K, V]
#deprecated
fn[K : Compare, V] T::from_iter(Iter[(K, V)]) -> Self[K, V]
#deprecated
fn[V : @json.FromJson] T::from_json(Json) -> Self[String, V] raise @json.JsonDecodeError
fn[K : Compare, V] T::get(Self[K, V], K) -> V?
#deprecated
fn[K : Compare, V] T::insert(Self[K, V], K, V) -> Self[K, V]
fn[K, V] T::is_empty(Self[K, V]) -> Bool
fn[K, V] T::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] T::iter2(Self[K, V]) -> Iter2[K, V]
fn[K, V] T::keys(Self[K, V]) -> Array[K]
#deprecated
fn[K : Compare, V] T::lookup(Self[K, V], K) -> V?
fn[K, X, Y] T::map(Self[K, X], (X) -> Y) -> Self[K, Y]
fn[K, X, Y] T::map_with_key(Self[K, X], (K, X) -> Y) -> Self[K, Y]
#deprecated
fn[K, V] T::new() -> Self[K, V]
#deprecated
fn[K : Compare, V] T::of(FixedArray[(K, V)]) -> Self[K, V]
#deprecated
fn[K : Compare, V] T::op_get(Self[K, V], K) -> V?
fn[K : Compare, V] T::remove(Self[K, V], K) -> Self[K, V]
#deprecated
fn[K, V] T::singleton(K, V) -> Self[K, V]
fn[K, V] T::size(Self[K, V]) -> Int
fn[K, V] T::to_array(Self[K, V]) -> Array[(K, V)]
fn[K : Show, V : ToJson] T::to_json(Self[K, V]) -> Json
fn[K, V] T::values(Self[K, V]) -> Iter[V]
impl[K : Compare, V : Compare] Compare for T[K, V]
impl[K, V] Default for T[K, V]
impl[K : Eq, V : Eq] Eq for T[K, V]
impl[K : Hash, V : Hash] Hash for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Show, V : ToJson] ToJson for T[K, V]
impl[V : @json.FromJson] @json.FromJson for T[String, V]
impl[K : @quickcheck.Arbitrary + Compare, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

