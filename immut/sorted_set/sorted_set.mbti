package "moonbitlang/core/immut/sorted_set"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[A : Compare] add(T[A], A) -> T[A]

fn[A : Compare] all(T[A], (A) -> Bool raise?) -> Bool raise?

fn[A : Compare] any(T[A], (A) -> Bool raise?) -> Bool raise?

fn[A : Compare] contains(T[A], A) -> Bool

#deprecated
fn[A : Compare] diff(T[A], T[A]) -> T[A]

fn[A : Compare] difference(T[A], T[A]) -> T[A]

fn[A : Compare] disjoint(T[A], T[A]) -> Bool

fn[A] each(T[A], (A) -> Unit raise?) -> Unit raise?

fn[A : Compare] filter(T[A], (A) -> Bool raise?) -> T[A] raise?

fn[A : Compare, B] fold(T[A], init~ : B, (B, A) -> B raise?) -> B raise?

fn[A : Compare] from_array(Array[A]) -> T[A]

fn[A : Compare] from_iter(Iter[A]) -> T[A]

fn[A : @json.FromJson + Compare] from_json(Json) -> T[A] raise @json.JsonDecodeError

#deprecated
fn[A : Compare] inter(T[A], T[A]) -> T[A]

fn[A : Compare] intersection(T[A], T[A]) -> T[A]

fn[A : Compare] is_empty(T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A : Compare, B : Compare] map(T[A], (A) -> B raise?) -> T[B] raise?

fn[A : Compare] max(T[A]) -> A

fn[A : Compare] max_option(T[A]) -> A?

fn[A : Compare] min(T[A]) -> A

fn[A : Compare] min_option(T[A]) -> A?

fn[A] new() -> T[A]

fn[A : Compare] of(FixedArray[A]) -> T[A]

fn[A : Compare] remove(T[A], A) -> T[A]

fn[A : Compare] remove_min(T[A]) -> T[A]

fn[A : Compare] singleton(A) -> T[A]

fn[A : Compare] size(T[A]) -> Int

fn[A : Compare] split(T[A], A) -> (T[A], Bool, T[A])

fn[A : Compare] subset(T[A], T[A]) -> Bool

fn[A : Compare] symmetric_difference(T[A], T[A]) -> T[A]

fn[A : Compare] to_array(T[A]) -> Array[A]

fn[A : ToJson] to_json(T[A]) -> Json

fn[A : Compare] union(T[A], T[A]) -> T[A]

// Types and methods
type T[A]
fn[A : Compare] T::add(Self[A], A) -> Self[A]
fn[A : Compare] T::all(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A : Compare] T::any(Self[A], (A) -> Bool raise?) -> Bool raise?
fn[A : Compare] T::contains(Self[A], A) -> Bool
#deprecated
fn[A : Compare] T::diff(Self[A], Self[A]) -> Self[A]
fn[A : Compare] T::difference(Self[A], Self[A]) -> Self[A]
fn[A : Compare] T::disjoint(Self[A], Self[A]) -> Bool
fn[A] T::each(Self[A], (A) -> Unit raise?) -> Unit raise?
fn[A : Compare] T::filter(Self[A], (A) -> Bool raise?) -> Self[A] raise?
fn[A : Compare, B] T::fold(Self[A], init~ : B, (B, A) -> B raise?) -> B raise?
#deprecated
fn[A : Compare] T::from_array(Array[A]) -> Self[A]
#deprecated
fn[A : Compare] T::from_iter(Iter[A]) -> Self[A]
#deprecated
fn[A : @json.FromJson + Compare] T::from_json(Json) -> Self[A] raise @json.JsonDecodeError
#deprecated
fn[A : Compare] T::inter(Self[A], Self[A]) -> Self[A]
fn[A : Compare] T::intersection(Self[A], Self[A]) -> Self[A]
fn[A : Compare] T::is_empty(Self[A]) -> Bool
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A : Compare, B : Compare] T::map(Self[A], (A) -> B raise?) -> Self[B] raise?
fn[A : Compare] T::max(Self[A]) -> A
fn[A : Compare] T::max_option(Self[A]) -> A?
fn[A : Compare] T::min(Self[A]) -> A
fn[A : Compare] T::min_option(Self[A]) -> A?
#deprecated
fn[A] T::new() -> Self[A]
#deprecated
fn[A : Compare] T::of(FixedArray[A]) -> Self[A]
fn[A : Compare] T::remove(Self[A], A) -> Self[A]
fn[A : Compare] T::remove_min(Self[A]) -> Self[A]
#deprecated
fn[A : Compare] T::singleton(A) -> Self[A]
fn[A : Compare] T::size(Self[A]) -> Int
fn[A : Compare] T::split(Self[A], A) -> (Self[A], Bool, Self[A])
fn[A : Compare] T::subset(Self[A], Self[A]) -> Bool
fn[A : Compare] T::symmetric_difference(Self[A], Self[A]) -> Self[A]
fn[A : Compare] T::to_array(Self[A]) -> Array[A]
fn[A : ToJson] T::to_json(Self[A]) -> Json
fn[A : Compare] T::union(Self[A], Self[A]) -> Self[A]
impl[A : Compare] Add for T[A]
impl[A : Compare] Compare for T[A]
impl[A] Default for T[A]
impl[A : Eq] Eq for T[A]
impl[A : Hash] Hash for T[A]
impl[A : Show] Show for T[A]
impl[A : ToJson] ToJson for T[A]
impl[A : @json.FromJson + Compare] @json.FromJson for T[A]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

