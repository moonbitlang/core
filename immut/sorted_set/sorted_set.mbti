package "moonbitlang/core/immut/sorted_set"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/quickcheck"
)

// Values
fn[A : Compare] add(T[A], A) -> T[A]

fn[A : Compare] all(T[A], (A) -> Bool) -> Bool

fn[A : Compare] any(T[A], (A) -> Bool) -> Bool

fn[A : Compare] contains(T[A], A) -> Bool

#deprecated
fn[A : Compare] diff(T[A], T[A]) -> T[A]

fn[A : Compare] difference(T[A], T[A]) -> T[A]

fn[A : Compare] disjoint(T[A], T[A]) -> Bool

fn[A] each(T[A], (A) -> Unit) -> Unit

fn[A : Compare] filter(T[A], (A) -> Bool) -> T[A]

fn[A : Compare, B] fold(T[A], init~ : B, (B, A) -> B) -> B

fn[A : Compare] from_array(Array[A]) -> T[A]

fn[A : Compare] from_iter(Iter[A]) -> T[A]

fn[A : @json.FromJson + Compare] from_json(Json) -> T[A]!@json.JsonDecodeError

#deprecated
fn[A : Compare] inter(T[A], T[A]) -> T[A]

fn[A : Compare] intersection(T[A], T[A]) -> T[A]

fn[A : Compare] is_empty(T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A : Compare, B : Compare] map(T[A], (A) -> B) -> T[B]

fn[A : Compare] max(T[A]) -> A

fn[A : Compare] max_option(T[A]) -> A?

fn[A : Compare] min(T[A]) -> A

fn[A : Compare] min_option(T[A]) -> A?

fn[A] new() -> T[A]

fn[A : Compare] of(FixedArray[A]) -> T[A]

fn[A : Compare] remove(T[A], A) -> T[A]

fn[A : Compare] remove_min(T[A]) -> T[A]

fn[A : Compare] singleton(A) -> T[A]

fn[A : Compare] size(T[A]) -> Int

fn[A : Compare] split(T[A], A) -> (T[A], Bool, T[A])

fn[A : Compare] subset(T[A], T[A]) -> Bool

fn[A : Compare] symmetric_difference(T[A], T[A]) -> T[A]

fn[A : Compare] to_array(T[A]) -> Array[A]

fn[A : ToJson] to_json(T[A]) -> Json

fn[A : Compare] union(T[A], T[A]) -> T[A]

// Types and methods
type T[A]
impl T {
  add[A : Compare](Self[A], A) -> Self[A]
  all[A : Compare](Self[A], (A) -> Bool) -> Bool
  any[A : Compare](Self[A], (A) -> Bool) -> Bool
  contains[A : Compare](Self[A], A) -> Bool
  #deprecated
  diff[A : Compare](Self[A], Self[A]) -> Self[A]
  difference[A : Compare](Self[A], Self[A]) -> Self[A]
  disjoint[A : Compare](Self[A], Self[A]) -> Bool
  each[A](Self[A], (A) -> Unit) -> Unit
  filter[A : Compare](Self[A], (A) -> Bool) -> Self[A]
  fold[A : Compare, B](Self[A], init~ : B, (B, A) -> B) -> B
  #deprecated
  from_array[A : Compare](Array[A]) -> Self[A]
  #deprecated
  from_iter[A : Compare](Iter[A]) -> Self[A]
  #deprecated
  from_json[A : @json.FromJson + Compare](Json) -> Self[A]!@json.JsonDecodeError
  #deprecated
  inter[A : Compare](Self[A], Self[A]) -> Self[A]
  intersection[A : Compare](Self[A], Self[A]) -> Self[A]
  is_empty[A : Compare](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  map[A : Compare, B : Compare](Self[A], (A) -> B) -> Self[B]
  max[A : Compare](Self[A]) -> A
  max_option[A : Compare](Self[A]) -> A?
  min[A : Compare](Self[A]) -> A
  min_option[A : Compare](Self[A]) -> A?
  #deprecated
  new[A]() -> Self[A]
  #deprecated
  of[A : Compare](FixedArray[A]) -> Self[A]
  remove[A : Compare](Self[A], A) -> Self[A]
  remove_min[A : Compare](Self[A]) -> Self[A]
  #deprecated
  singleton[A : Compare](A) -> Self[A]
  size[A : Compare](Self[A]) -> Int
  split[A : Compare](Self[A], A) -> (Self[A], Bool, Self[A])
  subset[A : Compare](Self[A], Self[A]) -> Bool
  symmetric_difference[A : Compare](Self[A], Self[A]) -> Self[A]
  to_array[A : Compare](Self[A]) -> Array[A]
  to_json[A : ToJson](Self[A]) -> Json
  union[A : Compare](Self[A], Self[A]) -> Self[A]
}
impl[A : Compare] Add for T[A]
impl[A : Compare] Compare for T[A]
impl[A] Default for T[A]
impl[A : Eq] Eq for T[A]
impl[A : Hash] Hash for T[A]
impl[A : Show] Show for T[A]
impl[A : ToJson] ToJson for T[A]
impl[A : @json.FromJson + Compare] @json.FromJson for T[A]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

