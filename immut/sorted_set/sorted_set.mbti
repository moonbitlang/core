package moonbitlang/core/immut/sorted_set

// Values

// Types and methods
type ImmutableSet
impl ImmutableSet {
  add[T : Compare + Eq](Self[T], T) -> Self[T]
  all[T : Compare + Eq](Self[T], (T) -> Bool) -> Bool
  any[T : Compare + Eq](Self[T], (T) -> Bool) -> Bool
  contains[T : Compare + Eq](Self[T], T) -> Bool
  debug_write[T : Debug](Self[T], Buffer) -> Unit
  default[T : Default]() -> Self[T]
  diff[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
  disjoint[T : Compare + Eq](Self[T], Self[T]) -> Bool
  each[T : Compare + Eq](Self[T], (T) -> Unit) -> Unit
  filter[T : Compare + Eq](Self[T], (T) -> Bool) -> Self[T]
  fold[T : Compare + Eq, U](Self[T], (U, T) -> U, ~init : U) -> U
  from_array[T : Compare + Eq](Array[T]) -> Self[T]
  inter[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
  is_empty[T : Compare + Eq](Self[T]) -> Bool
  iter[T](Self[T]) -> Iter[T]
  map[T : Compare + Eq, U : Compare + Eq](Self[T], (T) -> U) -> Self[U]
  max[T : Compare + Eq](Self[T]) -> T
  max_option[T : Compare + Eq](Self[T]) -> T?
  min[T : Compare + Eq](Self[T]) -> T
  min_option[T : Compare + Eq](Self[T]) -> T?
  new[T]() -> Self[T]
  of[T : Compare + Eq](FixedArray[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  remove[T : Compare + Eq](Self[T], T) -> Self[T]
  remove_min[T : Compare + Eq](Self[T]) -> Self[T]
  singleton[T : Compare + Eq](T) -> Self[T]
  split[T : Compare + Eq](Self[T], T) -> Tuple[Self[T], Bool, Self[T]]
  subset[T : Compare + Eq](Self[T], Self[T]) -> Bool
  to_array[T : Compare + Eq](Self[T]) -> Array[T]
  to_string[T : Show + Compare + Eq](Self[T]) -> String
  union[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
}

// Traits

// Extension Methods
impl Show for ImmutableSet

