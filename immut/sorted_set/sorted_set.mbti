package moonbitlang/core/immut/sorted_set

// Values

// Types and methods
type T
impl T {
  add[A : Compare + Eq](Self[A], A) -> Self[A]
  all[A : Compare + Eq](Self[A], (A) -> Bool) -> Bool
  any[A : Compare + Eq](Self[A], (A) -> Bool) -> Bool
  contains[A : Compare + Eq](Self[A], A) -> Bool
  debug_write[A : Debug](Self[A], Buffer) -> Unit
  default[A : Default]() -> Self[A]
  diff[A : Compare + Eq](Self[A], Self[A]) -> Self[A]
  disjoint[A : Compare + Eq](Self[A], Self[A]) -> Bool
  each[A](Self[A], (A) -> Unit) -> Unit
  filter[A : Compare + Eq](Self[A], (A) -> Bool) -> Self[A]
  fold[A : Compare + Eq, B](Self[A], (B, A) -> B, ~init : B) -> B
  from_array[A : Compare + Eq](Array[A]) -> Self[A]
  inter[A : Compare + Eq](Self[A], Self[A]) -> Self[A]
  is_empty[A : Compare + Eq](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  map[A : Compare + Eq, B : Compare + Eq](Self[A], (A) -> B) -> Self[B]
  max[A : Compare + Eq](Self[A]) -> A
  max_option[A : Compare + Eq](Self[A]) -> A?
  min[A : Compare + Eq](Self[A]) -> A
  min_option[A : Compare + Eq](Self[A]) -> A?
  new[A]() -> Self[A]
  of[A : Compare + Eq](FixedArray[A]) -> Self[A]
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
  remove[A : Compare + Eq](Self[A], A) -> Self[A]
  remove_min[A : Compare + Eq](Self[A]) -> Self[A]
  singleton[A : Compare + Eq](A) -> Self[A]
  split[A : Compare + Eq](Self[A], A) -> Tuple[Self[A], Bool, Self[A]]
  subset[A : Compare + Eq](Self[A], Self[A]) -> Bool
  to_array[A : Compare + Eq](Self[A]) -> Array[A]
  to_string[A : Show](Self[A]) -> String
  union[A : Compare + Eq](Self[A], Self[A]) -> Self[A]
}

// Traits

// Extension Methods
impl Show for T

