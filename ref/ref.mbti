package "moonbitlang/core/ref"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[T, R] map(Ref[T], (T) -> R?Error) -> Ref[R]?Error

fn[T] new(T) -> Ref[T]

fn[T, R] protect(Ref[T], T, () -> R?Error) -> R?Error

fn[T] swap(Ref[T], Ref[T]) -> Unit

fn[T] update(Ref[T], (T) -> T?Error) -> Unit?Error

// Types and methods
fn[T, R] Ref::map(Self[T], (T) -> R?Error) -> Self[R]?Error
fn[T] Ref::new(T) -> Self[T]
fn[T, R] Ref::protect(Self[T], T, () -> R?Error) -> R?Error
fn[T] Ref::swap(Self[T], Self[T]) -> Unit
fn[T] Ref::update(Self[T], (T) -> T?Error) -> Unit?Error
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for Ref[X]

// Type aliases

// Traits

