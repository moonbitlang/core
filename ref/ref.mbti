package "moonbitlang/core/ref"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[T, R] map(Ref[T], (T) -> R) -> Ref[R]

fn[T] new(T) -> Ref[T]

fn[T, R] protect(Ref[T], T, () -> R) -> R

fn[T] swap(Ref[T], Ref[T]) -> Unit

fn[T] update(Ref[T], (T) -> T) -> Unit

// Types and methods
impl Ref {
  map[T, R](Self[T], (T) -> R) -> Self[R]
  new[T](T) -> Self[T]
  protect[T, R](Self[T], T, () -> R) -> R
  swap[T](Self[T], Self[T]) -> Unit
  update[T](Self[T], (T) -> T) -> Unit
}
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for Ref[X]

// Type aliases

// Traits

