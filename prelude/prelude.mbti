package "moonbitlang/core/prelude"

import(
  "moonbitlang/core/builtin"
)

// Values
fn[T] abort(String) -> T

fn[T : @builtin.Eq + @builtin.Show] assert_eq(T, T, loc~ : @builtin.SourceLoc = _) -> Unit!

fn assert_false(Bool, loc~ : @builtin.SourceLoc = _) -> Unit!

fn[T : @builtin.Eq + @builtin.Show] assert_not_eq(T, T, loc~ : @builtin.SourceLoc = _) -> Unit!

fn assert_true(Bool, loc~ : @builtin.SourceLoc = _) -> Unit!

#deprecated
fn[T] dump(T, name? : String, loc~ : @builtin.SourceLoc = _) -> T

fn[T] fail(String, loc~ : @builtin.SourceLoc = _) -> T!@builtin.Failure

fn[T] ignore(T) -> Unit

fn inspect(&@builtin.Show, content~ : String = .., loc~ : @builtin.SourceLoc = _, args_loc~ : @builtin.ArgsLoc = _) -> Unit!@builtin.InspectError

fn not(Bool) -> Bool

fn[T] panic() -> T

fn[T] physical_equal(T, T) -> Bool

fn[T : @builtin.Show] println(T) -> Unit

fn[T : @builtin.Show] repr(T) -> String

fn[T] tap(T, (T) -> Unit) -> T

fn[T, R] then(T, (T) -> R) -> R

// Types and methods

// Type aliases
pub typealias ArgsLoc = @builtin.ArgsLoc

pub typealias Array[T] = @builtin.Array[T]

pub typealias ArrayView[T] = @builtin.ArrayView[T]

pub typealias BigInt = @moonbitlang/core/bigint.BigInt

pub typealias Failure = @builtin.Failure

pub typealias Hasher = @builtin.Hasher

pub typealias InspectError = @builtin.InspectError

pub typealias Iter[T] = @builtin.Iter[T]

pub typealias Iter2[A, B] = @builtin.Iter2[A, B]

pub typealias IterResult = @builtin.IterResult

pub typealias Json = @builtin.Json

pub typealias Map[K, V] = @builtin.Map[K, V]

pub typealias Set[K] = @moonbitlang/core/set.Set[K]

pub typealias SnapshotError = @builtin.SnapshotError

pub typealias SourceLoc = @builtin.SourceLoc

pub typealias StringBuilder = @builtin.StringBuilder

pub typealias UninitializedArray[T] = @builtin.UninitializedArray[T]

pub traitalias Add = @builtin.Add

pub traitalias BitAnd = @builtin.BitAnd

pub traitalias BitOr = @builtin.BitOr

pub traitalias BitXOr = @builtin.BitXOr

pub traitalias Compare = @builtin.Compare

pub traitalias Default = @builtin.Default

pub traitalias Div = @builtin.Div

pub traitalias Eq = @builtin.Eq

pub traitalias Hash = @builtin.Hash

pub traitalias Logger = @builtin.Logger

pub traitalias Mod = @builtin.Mod

pub traitalias Mul = @builtin.Mul

pub traitalias Neg = @builtin.Neg

pub traitalias Shl = @builtin.Shl

pub traitalias Show = @builtin.Show

pub traitalias Shr = @builtin.Shr

pub traitalias Sub = @builtin.Sub

pub traitalias ToJson = @builtin.ToJson

// Traits

