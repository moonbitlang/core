package moonbitlang/core/bytes

// Values
fn default() -> Bytes

fn from_array(Array[Byte]) -> Bytes

fn from_fixedarray(FixedArray[Byte], len? : Int) -> Bytes

fn from_iter(Iter[Byte]) -> Bytes

fn of(FixedArray[Byte]) -> Bytes

// Types and methods
type BytesView //deprecated
impl BytesView {
  iter(Self) -> Iter[Byte]
  length(Self) -> Int
  op_as_view(Self, start~ : Int = .., end? : Int) -> Self
  op_get(Self, Int) -> Byte
  to_double_be(Self) -> Double
  to_double_le(Self) -> Double
  to_float_be(Self) -> Float
  to_float_le(Self) -> Float
  to_int64_be(Self) -> Int64
  to_int64_le(Self) -> Int64
  to_int_be(Self) -> Int
  to_int_le(Self) -> Int
  to_uint64_be(Self) -> UInt64
  to_uint64_le(Self) -> UInt64
  to_uint_be(Self) -> UInt
  to_uint_le(Self) -> UInt
  unsafe_get(Self, Int) -> Byte
}
impl Show for BytesView

impl Bytes {
  default() -> Bytes
  from_array(Array[Byte]) -> Bytes
  from_fixedarray(FixedArray[Byte], len? : Int) -> Bytes
  from_iter(Iter[Byte]) -> Bytes
  iter(Bytes) -> Iter[Byte]
  of(FixedArray[Byte]) -> Bytes
  op_as_view(Bytes, start~ : Int = .., end? : Int) -> BytesView
  to_array(Bytes) -> Array[Byte]
  to_fixedarray(Bytes, len? : Int) -> FixedArray[Byte]
}
impl Hash for Bytes

// Type aliases
pub typealias View = BytesView

// Traits

