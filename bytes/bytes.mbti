package "moonbitlang/core/bytes"

// Values
fn default() -> Bytes

fn from_array(Array[Byte]) -> Bytes

fn from_fixedarray(FixedArray[Byte], len? : Int) -> Bytes

fn from_iter(Iter[Byte]) -> Bytes

fn of(FixedArray[Byte]) -> Bytes

// Types and methods
type View
fn View::data(Self) -> Bytes
fn View::get(Self, Int) -> Byte?
fn View::iter(Self) -> Iter[Byte]
fn View::length(Self) -> Int
fn View::op_as_view(Self, start~ : Int = .., end? : Int) -> Self
fn View::op_get(Self, Int) -> Byte
fn View::start_offset(Self) -> Int
fn View::to_bytes(Self) -> Bytes
fn View::to_double_be(Self) -> Double
fn View::to_double_le(Self) -> Double
fn View::to_float_be(Self) -> Float
fn View::to_float_le(Self) -> Float
fn View::to_int64_be(Self) -> Int64
fn View::to_int64_le(Self) -> Int64
fn View::to_int_be(Self) -> Int
fn View::to_int_le(Self) -> Int
fn View::to_uint64_be(Self) -> UInt64
fn View::to_uint64_le(Self) -> UInt64
fn View::to_uint_be(Self) -> UInt
fn View::to_uint_le(Self) -> UInt
fn View::unsafe_get(Self, Int) -> Byte
impl Compare for View
impl Eq for View
impl Show for View

fn Bytes::from_array(Array[Byte]) -> Bytes
fn Bytes::from_fixedarray(FixedArray[Byte], len? : Int) -> Bytes
fn Bytes::from_iter(Iter[Byte]) -> Bytes
fn Bytes::get(Bytes, Int) -> Byte?
fn Bytes::iter(Bytes) -> Iter[Byte]
fn Bytes::iter2(Bytes) -> Iter2[Int, Byte]
fn Bytes::of(FixedArray[Byte]) -> Bytes
fn Bytes::op_as_view(Bytes, start~ : Int = .., end? : Int) -> View
fn Bytes::to_array(Bytes) -> Array[Byte]
fn Bytes::to_fixedarray(Bytes, len? : Int) -> FixedArray[Byte]
impl Add for Bytes
impl Default for Bytes
impl Hash for Bytes

// Type aliases

// Traits

