package "moonbitlang/core/random"

import(
  "moonbitlang/core/bigint"
)

// Values
fn bigint(Rand, Int) -> @bigint.BigInt

fn chacha8(seed~ : Bytes = ..) -> &Source

fn double(Rand) -> Double

fn float(Rand) -> Float

fn int(Rand, limit~ : Int = ..) -> Int

fn int64(Rand, limit~ : Int64 = ..) -> Int64

#deprecated
fn new(seed~ : Bytes = ..) -> Rand

fn shuffle(Rand, Int, (Int, Int) -> Unit) -> Unit

fn uint(Rand, limit~ : UInt = ..) -> UInt

fn uint64(Rand, limit~ : UInt64 = ..) -> UInt64

// Types and methods
type Rand
fn Rand::bigint(Self, Int) -> @bigint.BigInt
fn Rand::double(Self) -> Double
fn Rand::float(Self) -> Float
fn Rand::int(Self, limit~ : Int = ..) -> Int
fn Rand::int64(Self, limit~ : Int64 = ..) -> Int64
fn Rand::new(generator~ : &Source = ..) -> Self
fn Rand::shuffle(Self, Int, (Int, Int) -> Unit) -> Unit
fn Rand::uint(Self, limit~ : UInt = ..) -> UInt
fn Rand::uint64(Self, limit~ : UInt64 = ..) -> UInt64

// Type aliases

// Traits
pub(open) trait Source {
  next(Self) -> UInt64
}

