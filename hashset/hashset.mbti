package "moonbitlang/core/hashset"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn add[K : Hash + Eq](T[K], K) -> Unit

fn capacity[K](T[K]) -> Int

fn clear[K](T[K]) -> Unit

fn contains[K : Hash + Eq](T[K], K) -> Bool

fn difference[K : Hash + Eq](T[K], T[K]) -> T[K]

fn each[K](T[K], (K) -> Unit) -> Unit

fn eachi[K](T[K], (Int, K) -> Unit) -> Unit

fn from_array[K : Hash + Eq](Array[K]) -> T[K]

fn from_iter[K : Hash + Eq](Iter[K]) -> T[K]

#deprecated
fn insert[K : Hash + Eq](T[K], K) -> Unit

fn intersection[K : Hash + Eq](T[K], T[K]) -> T[K]

fn is_empty[K](T[K]) -> Bool

fn iter[K](T[K]) -> Iter[K]

fn new[K](capacity~ : Int = ..) -> T[K]

fn of[K : Hash + Eq](FixedArray[K]) -> T[K]

fn remove[K : Hash + Eq](T[K], K) -> Unit

fn size[K](T[K]) -> Int

fn symmetric_difference[K : Hash + Eq](T[K], T[K]) -> T[K]

fn to_array[K](T[K]) -> Array[K]

fn union[K : Hash + Eq](T[K], T[K]) -> T[K]

// Types and methods
type T[K]
impl T {
  add[K : Hash + Eq](Self[K], K) -> Unit
  capacity[K](Self[K]) -> Int
  clear[K](Self[K]) -> Unit
  contains[K : Hash + Eq](Self[K], K) -> Bool
  difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  each[K](Self[K], (K) -> Unit) -> Unit
  eachi[K](Self[K], (Int, K) -> Unit) -> Unit
  #deprecated
  from_array[K : Hash + Eq](Array[K]) -> Self[K]
  #deprecated
  from_iter[K : Hash + Eq](Iter[K]) -> Self[K]
  #deprecated
  insert[K : Hash + Eq](Self[K], K) -> Unit
  intersection[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  is_empty[K](Self[K]) -> Bool
  iter[K](Self[K]) -> Iter[K]
  #deprecated
  new[K](capacity~ : Int = ..) -> Self[K]
  #deprecated
  of[K : Hash + Eq](FixedArray[K]) -> Self[K]
  remove[K : Hash + Eq](Self[K], K) -> Unit
  size[K](Self[K]) -> Int
  symmetric_difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  to_array[K](Self[K]) -> Array[K]
  union[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
}
impl[K : Show] Show for T[K]
impl[X : @quickcheck.Arbitrary + Eq + Hash] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

