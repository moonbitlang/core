package moonbitlang/core/hashset

alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods
type T
impl T {
  capacity[K](Self[K]) -> Int
  clear[K](Self[K]) -> Unit
  contains[K : Hash + Eq](Self[K], K) -> Bool
  difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  each[K](Self[K], (K) -> Unit) -> Unit
  eachi[K](Self[K], (Int, K) -> Unit) -> Unit
  from_array[K : Hash + Eq](Array[K]) -> Self[K]
  from_iter[K : Hash + Eq](Iter[K]) -> Self[K]
  insert[K : Hash + Eq](Self[K], K) -> Unit
  intersection[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  is_empty[K](Self[K]) -> Bool
  iter[K](Self[K]) -> Iter[K]
  new[K]() -> Self[K]
  of[K : Hash + Eq](FixedArray[K]) -> Self[K]
  remove[K : Hash + Eq](Self[K], K) -> Unit
  size[K](Self[K]) -> Int
  symmetric_difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  to_string[K : Show](Self[K]) -> String
  union[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
}

// Type aliases

// Traits

// Extension Methods
impl Show for T

impl @quickcheck.Arbitrary for T

