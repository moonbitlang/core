package "moonbitlang/core/hashset"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Hash + Eq] add(T[K], K) -> Unit

fn[K] capacity(T[K]) -> Int

fn[K] clear(T[K]) -> Unit

fn[K : Hash + Eq] contains(T[K], K) -> Bool

fn[K : Hash + Eq] difference(T[K], T[K]) -> T[K]

fn[K] each(T[K], (K) -> Unit) -> Unit

fn[K] eachi(T[K], (Int, K) -> Unit) -> Unit

fn[K : Hash + Eq] from_array(Array[K]) -> T[K]

fn[K : Hash + Eq] from_iter(Iter[K]) -> T[K]

#deprecated
fn[K : Hash + Eq] insert(T[K], K) -> Unit

fn[K : Hash + Eq] intersection(T[K], T[K]) -> T[K]

fn[K : Hash + Eq] is_disjoint(T[K], T[K]) -> Bool

fn[K] is_empty(T[K]) -> Bool

fn[K : Hash + Eq] is_subset(T[K], T[K]) -> Bool

fn[K : Hash + Eq] is_superset(T[K], T[K]) -> Bool

fn[K] iter(T[K]) -> Iter[K]

fn[K] new(capacity~ : Int = ..) -> T[K]

fn[K : Hash + Eq] of(FixedArray[K]) -> T[K]

fn[K : Hash + Eq] remove(T[K], K) -> Unit

fn[K] size(T[K]) -> Int

fn[K : Hash + Eq] symmetric_difference(T[K], T[K]) -> T[K]

fn[K] to_array(T[K]) -> Array[K]

fn[K : Hash + Eq] union(T[K], T[K]) -> T[K]

// Types and methods
type T[K]
fn[K : Hash + Eq] T::add(Self[K], K) -> Unit
fn[K] T::capacity(Self[K]) -> Int
fn[K] T::clear(Self[K]) -> Unit
fn[K : Hash + Eq] T::contains(Self[K], K) -> Bool
fn[K : Hash + Eq] T::difference(Self[K], Self[K]) -> Self[K]
fn[K] T::each(Self[K], (K) -> Unit) -> Unit
fn[K] T::eachi(Self[K], (Int, K) -> Unit) -> Unit
#deprecated
fn[K : Hash + Eq] T::insert(Self[K], K) -> Unit
fn[K : Hash + Eq] T::intersection(Self[K], Self[K]) -> Self[K]
fn[K : Hash + Eq] T::is_disjoint(Self[K], Self[K]) -> Bool
fn[K] T::is_empty(Self[K]) -> Bool
fn[K : Hash + Eq] T::is_subset(Self[K], Self[K]) -> Bool
fn[K : Hash + Eq] T::is_superset(Self[K], Self[K]) -> Bool
fn[K] T::iter(Self[K]) -> Iter[K]
fn[K : Hash + Eq] T::remove(Self[K], K) -> Unit
fn[K] T::size(Self[K]) -> Int
fn[K : Hash + Eq] T::symmetric_difference(Self[K], Self[K]) -> Self[K]
fn[K] T::to_array(Self[K]) -> Array[K]
fn[K : Hash + Eq] T::union(Self[K], Self[K]) -> Self[K]
impl[K : Hash + Eq] BitAnd for T[K]
impl[K : Hash + Eq] BitOr for T[K]
impl[K : Hash + Eq] BitXOr for T[K]
impl[K : Show] Show for T[K]
impl[K : Hash + Eq] Sub for T[K]
impl[X : @quickcheck.Arbitrary + Eq + Hash] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

