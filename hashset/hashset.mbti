package "moonbitlang/core/hashset"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Hash + Eq] add(T[K], K) -> Unit

fn[K] capacity(T[K]) -> Int

fn[K] clear(T[K]) -> Unit

fn[K : Hash + Eq] contains(T[K], K) -> Bool

fn[K : Hash + Eq] difference(T[K], T[K]) -> T[K]

fn[K] each(T[K], (K) -> Unit) -> Unit

fn[K] eachi(T[K], (Int, K) -> Unit) -> Unit

fn[K : Hash + Eq] from_array(Array[K]) -> T[K]

fn[K : Hash + Eq] from_iter(Iter[K]) -> T[K]

#deprecated
fn[K : Hash + Eq] insert(T[K], K) -> Unit

fn[K : Hash + Eq] intersection(T[K], T[K]) -> T[K]

fn[K : Hash + Eq] is_disjoint(T[K], T[K]) -> Bool

fn[K] is_empty(T[K]) -> Bool

fn[K : Hash + Eq] is_subset(T[K], T[K]) -> Bool

fn[K : Hash + Eq] is_superset(T[K], T[K]) -> Bool

fn[K] iter(T[K]) -> Iter[K]

fn[K] new(capacity~ : Int = ..) -> T[K]

fn[K : Hash + Eq] of(FixedArray[K]) -> T[K]

fn[K : Hash + Eq] remove(T[K], K) -> Unit

fn[K] size(T[K]) -> Int

fn[K : Hash + Eq] symmetric_difference(T[K], T[K]) -> T[K]

fn[K] to_array(T[K]) -> Array[K]

fn[K : Hash + Eq] union(T[K], T[K]) -> T[K]

// Types and methods
type T[K]
impl T {
  add[K : Hash + Eq](Self[K], K) -> Unit
  capacity[K](Self[K]) -> Int
  clear[K](Self[K]) -> Unit
  contains[K : Hash + Eq](Self[K], K) -> Bool
  difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  each[K](Self[K], (K) -> Unit) -> Unit
  eachi[K](Self[K], (Int, K) -> Unit) -> Unit
  #deprecated
  insert[K : Hash + Eq](Self[K], K) -> Unit
  intersection[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  is_disjoint[K : Hash + Eq](Self[K], Self[K]) -> Bool
  is_empty[K](Self[K]) -> Bool
  is_subset[K : Hash + Eq](Self[K], Self[K]) -> Bool
  is_superset[K : Hash + Eq](Self[K], Self[K]) -> Bool
  iter[K](Self[K]) -> Iter[K]
  remove[K : Hash + Eq](Self[K], K) -> Unit
  size[K](Self[K]) -> Int
  symmetric_difference[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
  to_array[K](Self[K]) -> Array[K]
  union[K : Hash + Eq](Self[K], Self[K]) -> Self[K]
}
impl[K : Hash + Eq] BitAnd for T[K]
impl[K : Hash + Eq] BitOr for T[K]
impl[K : Hash + Eq] BitXOr for T[K]
impl[K : Show] Show for T[K]
impl[K : Hash + Eq] Sub for T[K]
impl[X : @quickcheck.Arbitrary + Eq + Hash] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

