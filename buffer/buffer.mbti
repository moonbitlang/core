// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/buffer"

import(
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values
fn from_array(Array[Byte]) -> Buffer

fn from_bytes(Bytes) -> Buffer

fn from_iter(Iter[Byte]) -> Buffer

fn new(size_hint? : Int) -> Buffer

// Errors

// Types and methods
type Buffer
fn Buffer::contents(Self) -> Bytes
fn Buffer::is_empty(Self) -> Bool
fn Buffer::length(Self) -> Int
fn Buffer::reset(Self) -> Unit
fn Buffer::to_bytes(Self) -> Bytes
fn Buffer::write_byte(Self, Byte) -> Unit
fn Buffer::write_bytes(Self, Bytes) -> Unit
fn Buffer::write_bytesview(Self, @bytes.View) -> Unit
fn Buffer::write_double_be(Self, Double) -> Unit
fn Buffer::write_double_le(Self, Double) -> Unit
fn Buffer::write_float_be(Self, Float) -> Unit
fn Buffer::write_float_le(Self, Float) -> Unit
fn Buffer::write_int64_be(Self, Int64) -> Unit
fn Buffer::write_int64_le(Self, Int64) -> Unit
fn Buffer::write_int_be(Self, Int) -> Unit
fn Buffer::write_int_le(Self, Int) -> Unit
fn Buffer::write_iter(Self, Iter[Byte]) -> Unit
fn Buffer::write_object(Self, &Show) -> Unit
fn[A : Signed] Buffer::write_sleb128(Self, A) -> Unit
fn Buffer::write_stringview(Self, @string.StringView) -> Unit
fn Buffer::write_uint64_be(Self, UInt64) -> Unit
fn Buffer::write_uint64_le(Self, UInt64) -> Unit
fn Buffer::write_uint_be(Self, UInt) -> Unit
fn Buffer::write_uint_le(Self, UInt) -> Unit
fn[A : Unsigned] Buffer::write_uleb128(Self, A) -> Unit
impl Logger for Buffer
impl Show for Buffer

// Type aliases
pub typealias Buffer as T

// Traits
trait Signed
impl Signed for Int
impl Signed for Int64

trait Unsigned
impl Unsigned for Int
impl Unsigned for Int64
impl Unsigned for UInt
impl Unsigned for UInt64

