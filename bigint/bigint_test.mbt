// Copyright 2024 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

fn check_len(a : BigInt) -> Unit!String {
  if a.is_zero() {
    return ()
  }
  @test.ne(a.limbs[a.len - 1], 0)!
  for i = a.len; i < a.limbs.length(); i = i + 1 {
    @test.eq(a.limbs[i], 0)!
  } else {
    ()
  }
}

test "neg" {
  let a = from_int64(123456789012345678L)
  let b = -a
  inspect(b.to_string(), content="-123456789012345678")!
  check_len(b)!
  let a = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = -a
  inspect(
    b.to_string(),
    content="-123456789012345678123456789012345678123456789012345678123456789012345678",
  )!
  check_len(b)!
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = -a
  inspect(
    b.to_string(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )!
  check_len(b)!
}

test "add" {
  let a = from_int64(123456789012345678L)
  let b = from_int64(987654321098765432L)
  let c = a + b
  inspect(c.to_string(), content="1111111110111111110")!
  check_len(c)!
  let a = from_string("123456789012345678123456789012345678")
  let b = from_string("9876543210987654329876543210987654321241243")
  let c = a + b
  check_len(c)!
  inspect(c.to_string(), content="9876543334444443342222221334444443333586921")!
  let a = from_string(
    "-345678987654356798765467898765456789098764567890987655678",
  )
  let b = from_string("76678908909876567890987656789098789")
  let c = a + b
  check_len(c)!
  inspect(
    c.to_string(),
    content="-345678987654356798765391219856546912530873580234198556889",
  )!
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a + b
  check_len(c)!
  inspect(
    c.to_string(),
    content="-123456794480236665780245887778024588000245887779444446014444446903333367",
  )!
  let a = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a + b
  check_len(c)!
  inspect(
    c.to_string(),
    content="123456783544454690466667690246666768246667690245246910232469131121357989",
  )!
  let a = from_string("123456789012345678123456789012345678123456789")
  let b = from_string(
    "98765432109876543298765432109876543298765432112341241213125125",
  )
  let c = a + b
  let d = b + a
  check_len(c)!
  inspect(
    c.to_string(),
    content="98765432109876543422222221122222221422222221124686919336581914",
  )!
  check_len(d)!
  inspect(
    d.to_string(),
    content="98765432109876543422222221122222221422222221124686919336581914",
  )!
  let a = from_string("1")
  let b = from_string("1")
  let c = a + b
  check_len(c)!
  inspect(c.to_string(), content="2")!
}

test "sub" {
  let a = from_int64(987654321098765432L)
  let b = from_int64(123456789012345678L)
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="864197532086419754")!
  let c = b - a
  check_len(c)!
  inspect(c.to_string(), content="-864197532086419754")!
  let a = from_string("987654321098765432987654321098765432")
  let b = from_string("123456789012345678123456789012345678")
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="864197532086419754864197532086419754")!
  let c = b - a
  check_len(c)!
  inspect(c.to_string(), content="-864197532086419754864197532086419754")!
  let a = from_string("-123456789012345678123456789012345678")
  let b = from_string("-987654321098765432987654321098765432")
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="864197532086419754864197532086419754")!
  let c = b - a
  check_len(c)!
  inspect(c.to_string(), content="-864197532086419754864197532086419754")!
  let a = from_string("123456789012345678123456789012345678233")
  let b = from_string("-987654321098765432987654321098765432")
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="124444443333444443556444443333444443665")!
  let a = from_string("-123456789012345678123456789012345678233")
  let b = from_string("987654321098765432987654321098765432")
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="-124444443333444443556444443333444443665")!
  let a = from_string("123456789012345678123456789012345678233")
  let b = from_string("987")
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="123456789012345678123456789012345677246")!
  let a = from_int64(
    2L * radix + 3L * radix * radix + 3L * radix * radix * radix,
  )
  let b = from_int64(
    1L * radix + 2L * radix * radix + 3L * radix * radix * radix,
  )
  let c = a - b
  check_len(c)!
  inspect(c.to_string(), content="4295032832")!
}

test "mul" {
  let a = from_int64(987654321098765432L)
  let b = from_int64(123456789012345678L)
  let c = a * b
  check_len(c)!
  inspect(c.to_string(), content="121932631137021794322511812221002896")!
  let b = from_int(0)
  let c = a * b
  check_len(c)!
  inspect(c.to_string(), content="0")!
  let a = from_string("987654321098765432987654321098765432")
  let b = from_string("123456789012345678123456789012345678")
  let c = a * b
  check_len(c)!
  inspect(
    c.to_string(),
    content="121932631137021794566377074495046484766956255579027586322511812221002896",
  )!
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a * b
  check_len(c)!
  inspect(
    c.to_string(),
    content="-675048264005650638331575538351330675368295268968297112032725993817064025468035871811413387811508597465733350774788866848766914110358142",
  )!
  let a = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let c = a * b
  check_len(c)!
  inspect(
    c.to_string(),
    content="15241578753238836558451457271757357101661335790275877644871214308794398188081092827312918731290971345831439274500849864349959817710728382868480360920606901387000904130485419905521447340363938424041990550242456942562533760120975461083076969999493979603620179878012498124163389756531016644691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328676116477543057492132906599024538971589696720506020451046486841987501930503276963468983409960067084950464889416857206431946368873647327913427848330437449394909327787227570876390807244017692357872286700807813839353766157597935320835245614388056802316725071178178283798204527968299765279684",
  )!
  let a = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "1234567890123456781234567890123456781234567890123456712345678901234567812345678901234567812345678901234567123456789012345678123456789012345678123456789012345671234567890123456781234567890123456781234567890123456778123456789012345678123456789012345677812345678901234567812345678901234567",
  )
  let c = a * b
  check_len(c)!
  inspect(
    c.to_string(),
    content
  )!
}

test "div" {
  let a = from_int64(987654321098765432L)
  let b = from_int64(123456789012345678L)
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="8")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="9000000008")!
  let a = from_string("987654321098765432987654321098765432")
  let b = from_string("123456789012345678123456789012345678")
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="8")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="9000000008000000009000000008")!
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="22578502")!
  let c = a % b
  check_len(c)!
  inspect(
    c.to_string(),
    content="1411754890143397710214334775703365651947321477507789807694283800",
  )!
  let a = from_string(
    "12421645375698213532453474567345623538756734578959876125298763582362",
  )
  let b = from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="-2272")!
  let c = a % b
  check_len(c)!
  inspect(
    c.to_string(),
    content="-1402948258011299942147915894441293642113821688447833429560447046",
  )!
  let a = from_string(
    "559480073748030317374803031737502937374948313029373748143063751326169",
  )
  let b = from_string(
    "5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="102321")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="0")!
  let c = b / a
  check_len(c)!
  inspect(c.to_string(), content="0")!
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = from_string(
    "98765432109876543298765432109876543298765432112341241213125125",
  )
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="-1249999989")!
  let c = a % b
  check_len(c)!
  inspect(
    c.to_string(),
    content="38580247791358024838580247791358024841661120157195963893277947",
  )!
  let b = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="-1")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="0")!
  let b = from_int(42)
  let c = a / b
  check_len(c)!
  inspect(
    c.to_string(),
    content="-2939447357436801860082304500293944717225161643151087574368018786008231",
  )!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="24")!
  let a = from_int64(radix * 2L)
  let b = from_int(3)
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="43690")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="2")!
  let a = from_string(
    "192840512535448761530339373212972361809285001825938158026158292411480026580386667968523131569543343891463401449181505398836",
  )
  let b = from_string("53114991887765067119604462397623222751521283658033792")
  let c = a / b
  check_len(c)!
  inspect(
    c.to_string(),
    content="3630623025283172274355511610456320508397929760764978568884844414130904",
  )!
  let a = from_string("65535232222222222222222222222")
  let b = from_string("1")
  let c = a / b
  check_len(c)!
  inspect(c.to_string(), content="65535232222222222222222222222")!
  let c = a % b
  check_len(c)!
  inspect(c.to_string(), content="0")!
}

test "lsl" {
  let a = from_int64(1234567890123456789L)
  let b = a.lsl(1)
  check_len(b)!
  inspect(b.to_string(), content="2469135780246913578")!
  let c = a.lsl(64)
  check_len(c)!
  inspect(c.to_string(), content="22773757910726981402256170801141121024")!
  let a = make_zero()
  let b = a.lsl(1)
  check_len(b)!
  inspect(b.to_string(), content="0")!
}

test "lsr" {
  let a = from_int64(1234567890123456789L)
  let b = a.lsr(1)
  check_len(b)!
  inspect(b.to_string(), content="617283945061728394")!
  let c = a.lsr(64)
  check_len(c)!
  inspect(c.to_string(), content="0")!
  let a = from_int64(radix * radix / 2L)
  let b = a.lsr(radix_bit_len * 2)
  check_len(b)!
  inspect(b.to_string(), content="0")!
}

test "decimal_string" {
  let a = from_string("0")
  check_len(a)!
  inspect(a.to_string(), content="0")!
  let a = from_string("123")
  check_len(a)!
  inspect(a.to_string(), content="123")!
  @test.eq(a, from_int64(123L))!
  let a = from_string("1234567890123456789")
  check_len(a)!
  inspect(a.to_string(), content="1234567890123456789")!
  let b = from_string("-1234567890")
  check_len(b)!
  inspect(b.to_string(), content="-1234567890")!
  @test.eq(a, from_int64(1234567890123456789L))!
  let str
  let a = from_string(str)
  check_len(a)!
  inspect(a.to_string(), content=str)!
  let a = from_int64(1234567890123456789L)
  check_len(a)!
  inspect(a.to_string(), content="1234567890123456789")!
  let b = from_int64(-1234567890L)
  check_len(b)!
  inspect(b.to_string(), content="-1234567890")!
}

test "from_int" {
  let a = from_int(1234567899)
  check_len(a)!
  inspect(a.to_string(), content="1234567899")!
  let b = from_int(-1234567890)
  check_len(b)!
  inspect(b.to_string(), content="-1234567890")!
}

test "compare" {
  let a = from_int64(1234567890123456789L)
  let b = from_int64(-1234567890123456789L)
  inspect(a.compare(b), content="1")!
  inspect(b.compare(a), content="-1")!
  let a = -a
  let b = from_int64(-1234567890123456788L)
  @test.is_true(a.compare(b) < 0)!
  @test.is_true(b.compare(a) > 0)!
  let a = from_int64(-1234567890123456789L)
  let b = from_int64(-1234569L)
  @test.is_true(a.compare(b) < 0)!
  @test.is_true(b.compare(a) > 0)!
}

test "from_hex" {
  // Check zero
  let a = from_hex("0")
  check_len(a)!
  inspect(a.to_string(), content="0")!

  // Test positive number
  let a = from_hex("1")
  check_len(a)!
  inspect(a.to_string(), content="1")!

  // Test negative number
  let a = from_hex("-F")
  check_len(a)!
  inspect(a.to_string(), content="-15")!
  let a = from_hex("-a")
  check_len(a)!
  inspect(a.to_string(), content="-10")!

  // Test large positive number
  let a = from_hex("112210F47DE98115")
  check_len(a)!
  inspect(a.to_string(), content="1234567890123456789")!

  // Test very large positive number
  let a = from_hex(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  check_len(a)!
  inspect(
    a.to_string(),
    content="35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )!
  let a = from_hex(
    "11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )
  check_len(a)!
  inspect(
    a.to_string(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )!
  let a = from_hex(

  )
  check_len(a)!
  inspect(
    a.to_string(),
    content="12345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812",
  )!

  // Test very large negative number
  let a = from_hex(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  check_len(a)!
  inspect(
    a.to_string(),
    content="-35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )!
}

test "to_hex" {
  // Check zero
  let a = from_hex("00")
  check_len(a)!
  inspect(a.to_hex(), content="0")!

  // Test negative number
  let a = from_hex("-F")
  check_len(a)!
  inspect(a.to_hex(), content="-F")!

  // Test positive number
  let a = from_hex("F")
  check_len(a)!
  inspect(a.to_hex(), content="F")!

  // Test positive number with leading zero
  let a = from_hex("10")
  check_len(a)!
  inspect(a.to_hex(), content="10")!

  // Test large positive number
  let a = from_hex("01234567890123456789")
  check_len(a)!
  inspect(a.to_hex(), content="1234567890123456789")!

  // Check padding
  let a = from_hex("100000")
  check_len(a)!
  inspect(a.to_string(), content="1048576")!
  inspect(a.to_hex(), content="100000")!

  // Test very large positive number
  let a = from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  check_len(a)!
  inspect(
    a.to_hex(),
    content="11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )!
  let a = from_string(
    "35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )
  check_len(a)!
  inspect(
    a.to_hex(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )!
  let str
  let a = from_string(str)
  check_len(a)!
  inspect(
    a.to_hex(),
    content
  )!

  // Test very large negative number
  let a = from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  check_len(a)!
  inspect(
    a.to_hex(),
    content="-11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )!
}

test "op_add coverage for max(self_len, other_len)" {
  let a = from_int(123456789)
  let b = from_int(987654321)
  let result = a + b
  inspect(a.len, content="1")!
  inspect(b.len, content="1")!
  inspect(result.len, content="2")!
}

test "op_sub coverage for max(self_len, other_len)" {
  let a = from_int(987654321)
  let b = from_int(123456789)
  let result = a - b
  inspect(a.len, content="1")!
  inspect(b.len, content="1")!
  inspect(result.len, content="1")!
}

test "panic op_div coverage for division by zero" {
  let a = from_int(123456789)
  let b = from_int(0)
  a / b |> ignore
}

test "panic op_mod coverage for modulo by zero" {
  let a = from_int(123456789)
  let b = from_int(0)
  a % b |> ignore
}

test "panic grade_school_div coverage for division by zero" {
  let a = from_int(123456789)
  let b = from_int(0)
  grade_school_div(a, b) |> ignore
}

test "panic lsl coverage for negative shift" {
  let a = from_int(123456789)
  a.lsl(-1) |> ignore
}

test "panic lsr coverage for negative shift" {
  let a = from_int(123456789)
  a.lsr(-1) |> ignore
}

test "panic from_string coverage for empty string" {
  from_string("") |> ignore
}

test "panic from_string coverage for invalid character" {
  from_string("123a56789") |> ignore
}

test "panic from_hex coverage for empty string" {
  from_hex("") |> ignore
}

test "panic from_hex coverage for invalid character" {
  from_hex("123g56789") |> ignore
}
