package "moonbitlang/core/hashmap"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Hash + Eq, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Hash + Eq, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[K, V] new(capacity~ : Int = ..) -> T[K, V]

fn[K : Eq + Hash, V] of(FixedArray[(K, V)]) -> T[K, V]

// Types and methods
type T[K, V]
fn[K, V] T::capacity(Self[K, V]) -> Int
fn[K, V] T::clear(Self[K, V]) -> Unit
fn[K : Hash + Eq, V] T::contains(Self[K, V], K) -> Bool
fn[K : Hash + Eq, V : Eq] T::contains_kv(Self[K, V], K, V) -> Bool
fn[K, V] T::each(Self[K, V], (K, V) -> Unit) -> Unit
fn[K, V] T::eachi(Self[K, V], (Int, K, V) -> Unit) -> Unit
fn[K : Hash + Eq, V] T::get(Self[K, V], K) -> V?
fn[K : Hash + Eq, V] T::get_or_default(Self[K, V], K, V) -> V
fn[K : Hash + Eq, V] T::get_or_init(Self[K, V], K, () -> V) -> V
fn[K, V] T::is_empty(Self[K, V]) -> Bool
fn[K, V] T::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] T::iter2(Self[K, V]) -> Iter2[K, V]
#deprecated
fn[K : Hash + Eq, V] T::op_get(Self[K, V], K) -> V?
fn[K : Hash + Eq, V] T::op_set(Self[K, V], K, V) -> Unit
fn[K : Hash + Eq, V] T::remove(Self[K, V], K) -> Unit
fn[K : Hash + Eq, V] T::set(Self[K, V], K, V) -> Unit
fn[K, V] T::size(Self[K, V]) -> Int
fn[K, V] T::to_array(Self[K, V]) -> Array[(K, V)]
impl[K : Hash + Eq, V : Eq] Eq for T[K, V]
impl[K : Show, V : Show] Show for T[K, V]
impl[K : Show, V : ToJson] ToJson for T[K, V]
impl[K : @quickcheck.Arbitrary + Hash + Eq, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

