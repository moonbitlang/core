package moonbitlang/core/hashmap

alias @moonbitlang/core/quickcheck as @quickcheck

// Values
fn from_array[K : Hash + Eq, V](Array[(K, V)]) -> T[K, V]

fn from_iter[K : Hash + Eq, V](Iter[(K, V)]) -> T[K, V]

fn new[K, V](capacity~ : Int = ..) -> T[K, V]

fn of[K : Eq + Hash, V](FixedArray[(K, V)]) -> T[K, V]

// Types and methods
type T[K, V]
impl T {
  capacity[K, V](Self[K, V]) -> Int
  clear[K, V](Self[K, V]) -> Unit
  contains[K : Hash + Eq, V](Self[K, V], K) -> Bool
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  eachi[K, V](Self[K, V], (Int, K, V) -> Unit) -> Unit
  from_array[K : Hash + Eq, V](Array[(K, V)]) -> Self[K, V] //deprecated
  from_iter[K : Hash + Eq, V](Iter[(K, V)]) -> Self[K, V] //deprecated
  get[K : Hash + Eq, V](Self[K, V], K) -> V?
  get_or_default[K : Hash + Eq, V](Self[K, V], K, V) -> V
  get_or_init[K : Hash + Eq, V](Self[K, V], K, () -> V) -> V
  is_empty[K, V](Self[K, V]) -> Bool
  iter[K, V](Self[K, V]) -> Iter[(K, V)]
  iter2[K, V](Self[K, V]) -> Iter2[K, V]
  new[K, V](capacity~ : Int = ..) -> Self[K, V] //deprecated
  of[K : Eq + Hash, V](FixedArray[(K, V)]) -> Self[K, V] //deprecated
  op_get[K : Hash + Eq, V](Self[K, V], K) -> V?
  op_set[K : Hash + Eq, V](Self[K, V], K, V) -> Unit
  remove[K : Hash + Eq, V](Self[K, V], K) -> Unit
  set[K : Hash + Eq, V](Self[K, V], K, V) -> Unit
  size[K, V](Self[K, V]) -> Int
  to_array[K, V](Self[K, V]) -> Array[(K, V)]
}
impl[K : Show, V : Show] Show for T[K, V]
impl[K : @quickcheck.Arbitrary + Hash + Eq, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

