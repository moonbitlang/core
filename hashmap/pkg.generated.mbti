// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/hashmap"

import(
  "moonbitlang/core/quickcheck"
)

// Values

// Errors

// Types and methods
type HashMap[K, V]
fn[K, V] HashMap::capacity(Self[K, V]) -> Int
fn[K, V] HashMap::clear(Self[K, V]) -> Unit
fn[K : Hash + Eq, V] HashMap::contains(Self[K, V], K) -> Bool
fn[K : Hash + Eq, V : Eq] HashMap::contains_kv(Self[K, V], K, V) -> Bool
fn[K, V] HashMap::copy(Self[K, V]) -> Self[K, V]
fn[K, V] HashMap::each(Self[K, V], (K, V) -> Unit raise?) -> Unit raise?
fn[K, V] HashMap::eachi(Self[K, V], (Int, K, V) -> Unit raise?) -> Unit raise?
#as_free_fn
fn[K : Hash + Eq, V] HashMap::from_array(Array[(K, V)]) -> Self[K, V]
#as_free_fn
fn[K : Hash + Eq, V] HashMap::from_iter(Iter[(K, V)]) -> Self[K, V]
fn[K : Hash + Eq, V] HashMap::get(Self[K, V], K) -> V?
fn[K : Hash + Eq, V] HashMap::get_or_default(Self[K, V], K, V) -> V
fn[K : Hash + Eq, V] HashMap::get_or_init(Self[K, V], K, () -> V) -> V
fn[K, V] HashMap::is_empty(Self[K, V]) -> Bool
fn[K, V] HashMap::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] HashMap::iter2(Self[K, V]) -> Iter2[K, V]
fn[K, V] HashMap::keys(Self[K, V]) -> Iter[K]
fn[K, V, V2] HashMap::map(Self[K, V], (K, V) -> V2) -> Self[K, V2]
#as_free_fn
fn[K, V] HashMap::new(capacity? : Int) -> Self[K, V]
#as_free_fn
fn[K : Eq + Hash, V] HashMap::of(FixedArray[(K, V)]) -> Self[K, V]
fn[K : Hash + Eq, V] HashMap::op_get(Self[K, V], K) -> V
fn[K : Hash + Eq, V] HashMap::op_set(Self[K, V], K, V) -> Unit
fn[K : Hash + Eq, V] HashMap::remove(Self[K, V], K) -> Unit
fn[K, V] HashMap::retain(Self[K, V], (K, V) -> Bool) -> Unit
fn[K : Hash + Eq, V] HashMap::set(Self[K, V], K, V) -> Unit
fn[K, V] HashMap::size(Self[K, V]) -> Int
fn[K, V] HashMap::to_array(Self[K, V]) -> Array[(K, V)]
fn[K, V] HashMap::values(Self[K, V]) -> Iter[V]
impl[K, V] Default for HashMap[K, V]
impl[K : Hash + Eq, V : Eq] Eq for HashMap[K, V]
impl[K : Show, V : Show] Show for HashMap[K, V]
impl[K : Show, V : ToJson] ToJson for HashMap[K, V]
impl[K : @quickcheck.Arbitrary + Hash + Eq, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for HashMap[K, V]

// Type aliases
pub typealias HashMap as T

// Traits

