// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/strconv"

// Values
#deprecated
fn[A : FromStr] parse(StringView) -> A raise StrConvError

fn parse_bool(StringView) -> Bool raise StrConvError

#deprecated
fn parse_decimal(StringView) -> Decimal raise StrConvError

fn parse_double(StringView) -> Double raise StrConvError

fn parse_int(StringView, base? : Int) -> Int raise StrConvError

fn parse_int64(StringView, base? : Int) -> Int64 raise StrConvError

fn parse_uint(StringView, base? : Int) -> UInt raise StrConvError

fn parse_uint64(StringView, base? : Int) -> UInt64 raise StrConvError

// Errors
pub(all) suberror StrConvError String
fn StrConvError::output(Self, &Logger) -> Unit // from trait `Show`
fn StrConvError::to_string(Self) -> String // from trait `Show`
impl Show for StrConvError

// Types and methods
type Decimal
#deprecated
fn Decimal::from_int64(Int64) -> Self
#deprecated
fn Decimal::new() -> Self
fn Decimal::output(Self, &Logger) -> Unit // from trait `Show`
#deprecated
fn Decimal::parse_decimal(StringView) -> Self raise StrConvError
#deprecated
fn Decimal::shift(Self, Int) -> Unit
#deprecated
fn Decimal::to_double(Self) -> Double raise StrConvError
fn Decimal::to_string(Self) -> String // from trait `Show`
impl Show for Decimal

// Type aliases

// Traits
pub(open) trait FromStr {
  #as_free_fn
  from_str(StringView) -> Self raise StrConvError = _
  #deprecated
  from_string(String) -> Self raise StrConvError = _
}
impl FromStr for Bool
impl FromStr for Int
impl FromStr for Int64
impl FromStr for UInt
impl FromStr for UInt64
impl FromStr for Double

