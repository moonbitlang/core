package moonbitlang/core/map

alias @moonbitlang/core/vec as @vec

// Values
fn empty[K, V]() -> Map[K, V]

fn singleton[K, V](K, V) -> Map[K, V]

// Types and methods
type Map
impl Map {
  debug_write[K : Debug, V : Debug](Self[K, V], Buffer) -> Unit
  filter[K : Compare + Eq, V](Self[K, V], (V) -> Bool) -> Self[K, V]
  filter_with_key[K : Compare + Eq, V](Self[K, V], (K, V) -> Bool) -> Self[K, V]
  fold[K, V, T](Self[K, V], (T, V) -> T, ~init : T) -> T
  foldl_with_key[K, V, T](Self[K, V], (T, K, V) -> T, ~init : T) -> T
  foldr_with_key[K, V, T](Self[K, V], (T, K, V) -> T, ~init : T) -> T
  from_array[K : Compare + Eq, V](Array[Tuple[K, V]]) -> Self[K, V]
  insert[K : Compare + Eq, V](Self[K, V], K, V) -> Self[K, V]
  is_empty[K, V](Self[K, V]) -> Bool
  iter[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  iteri[K, V](Self[K, V], (Int, K, V) -> Unit) -> Unit
  lookup[K : Compare + Eq, V](Self[K, V], K) -> Option[V]
  map[K, X, Y](Self[K, X], (X) -> Y) -> Self[K, Y]
  map_with_key[K, X, Y](Self[K, X], (K, X) -> Y) -> Self[K, Y]
  member[K : Compare + Eq, V](Self[K, V], K) -> Bool
  op_equal[K : Eq, V : Eq](Self[K, V], Self[K, V]) -> Bool
  op_get[K : Compare + Eq, V](Self[K, V], K) -> Option[V]
  remove[K : Compare + Eq, V](Self[K, V], K) -> Self[K, V]
  size[K, V](Self[K, V]) -> Int
  to_vec[K, V](Self[K, V]) -> @vec.Vec[Tuple[K, V]]
}

// Traits

// Extension Methods

