package moonbitlang/core/map

// Values
fn capacity[K, V](Map[K, V]) -> Int

fn clear[K, V](Map[K, V]) -> Unit

fn contains[K : Hash + Eq, V](Map[K, V], K) -> Bool

fn default[K, V]() -> Map[K, V]

fn each[K, V](Map[K, V], (K, V) -> Unit) -> Unit

fn eachi[K, V](Map[K, V], (Int, K, V) -> Unit) -> Unit

fn from_array[K : Hash + Eq, V](Array[(K, V)]) -> Map[K, V]

fn from_iter[K : Hash + Eq, V](Iter[(K, V)]) -> Map[K, V]

fn get[K : Hash + Eq, V](Map[K, V], K) -> V?

fn get_or_default[K : Hash + Eq, V](Map[K, V], K, V) -> V

fn get_or_init[K : Hash + Eq, V](Map[K, V], K, () -> V) -> V

fn is_empty[K, V](Map[K, V]) -> Bool

fn iter[K, V](Map[K, V]) -> Iter[(K, V)]

fn iter2[K, V](Map[K, V]) -> Iter2[K, V]

fn keys[K, V](Map[K, V]) -> Iter[K]

fn new[K, V](capacity~ : Int = ..) -> Map[K, V]

fn of[K : Hash + Eq, V](FixedArray[(K, V)]) -> Map[K, V]

fn remove[K : Hash + Eq, V](Map[K, V], K) -> Unit

fn set[K : Hash + Eq, V](Map[K, V], K, V) -> Unit

fn size[K, V](Map[K, V]) -> Int

fn to_array[K, V](Map[K, V]) -> Array[(K, V)]

fn to_json[K : Show, V : ToJson](Map[K, V]) -> Json

fn values[K, V](Map[K, V]) -> Iter[V]

// Types and methods

// Type aliases
pub typealias T[K, V] = Map[K, V]

// Traits

