package moonbitlang/core/result

// Values
fn err[T, E](E) -> Result[T, E]

fn ok[T, E](T) -> Result[T, E]

// Types and methods
fn Result::bind[T, E, U](Result[T, E], (T) -> Result[U, E]) -> Result[U, E]
fn Result::compare[T : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq, E : @moonbitlang/core/builtin.Compare + @moonbitlang/core/builtin.Eq](Result[T, E], Result[T, E]) -> Int
fn Result::flatten[T, E](Result[Result[T, E], E]) -> Result[T, E]
fn Result::fold[T, E, V](Result[T, E], (T) -> V, (E) -> V) -> V
fn Result::is_err[T, E](Result[T, E]) -> Bool
fn Result::is_ok[T, E](Result[T, E]) -> Bool
fn Result::map[T, E, U](Result[T, E], (T) -> U) -> Result[U, E]
fn Result::map_err[T, E, F](Result[T, E], (E) -> F) -> Result[T, F]
fn Result::or[T, E](Result[T, E], T) -> T
fn Result::or_else[T, E](Result[T, E], () -> T) -> T
fn Result::to_option[T, E](Result[T, E]) -> Option[T]
fn Result::to_string[T : @moonbitlang/core/builtin.Show, E : @moonbitlang/core/builtin.Show](Result[T, E]) -> String
fn Result::unwrap[T, E](Result[T, E]) -> T

// Traits

// Extension Methods

