package moonbitlang/core/result

alias @moonbitlang/core/quickcheck as @quickcheck

// Values
fn err[T, E](E) -> Result[T, E]

fn ok[T, E](T) -> Result[T, E]

fn wrap0[T, E : Error](~f : () -> T!E) -> Result[T, E]

fn wrap1[T, A, E : Error](~f : (A) -> T!E, A) -> Result[T, E]

fn wrap2[T, A, B, E : Error](~f : (A, B) -> T!E, A, B) -> Result[T, E]

// Types and methods
impl Result {
  bind[T, E, U](Self[T, E], (T) -> Self[U, E]) -> Self[U, E]
  compare[T : Compare + Eq, E : Compare + Eq](Self[T, E], Self[T, E]) -> Int
  flatten[T, E](Self[Self[T, E], E]) -> Self[T, E]
  fold[T, E, V](Self[T, E], (T) -> V, (E) -> V) -> V
  is_err[T, E](Self[T, E]) -> Bool
  is_ok[T, E](Self[T, E]) -> Bool
  map[T, E, U](Self[T, E], (T) -> U) -> Self[U, E]
  map_err[T, E, F](Self[T, E], (E) -> F) -> Self[T, F]
  or[T, E](Self[T, E], T) -> T
  or_else[T, E](Self[T, E], () -> T) -> T
  to_option[T, E](Self[T, E]) -> T?
  to_string[T : Show, E : Show](Self[T, E]) -> String
  unwrap[T, E](Self[T, E]) -> T
  unwrap_or_error[T, E : Error](Self[T, E]) -> T!E
}

// Type aliases

// Traits

// Extension Methods
impl @quickcheck.Arbitrary for Result

