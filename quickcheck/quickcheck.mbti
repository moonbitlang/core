package "moonbitlang/core/quickcheck"

import(
  "moonbitlang/core/quickcheck/splitmix"
)

// Values
fn gen[T : Arbitrary](size? : Int, state? : @splitmix.RandomState) -> T

fn samples[X : Arbitrary](Int) -> Array[X]

// Types and methods

// Type aliases

// Traits
pub(open) trait Arbitrary {
  arbitrary(Int, @splitmix.RandomState) -> Self
}
impl Arbitrary for Unit
impl Arbitrary for Bool
impl Arbitrary for Byte
impl Arbitrary for Char
impl Arbitrary for Int
impl Arbitrary for Int64
impl Arbitrary for UInt
impl Arbitrary for UInt64
impl Arbitrary for Float
impl Arbitrary for Double
impl Arbitrary for String
impl Arbitrary for Bytes
impl Arbitrary for BigInt
impl[X : Arbitrary] Arbitrary for Iter[X]

