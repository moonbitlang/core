package "moonbitlang/core/quickcheck/splitmix"

// Values
fn clone(RandomState) -> RandomState

fn new(seed~ : UInt64 = ..) -> RandomState

fn next(RandomState) -> Unit

fn next_double(RandomState) -> Double

fn next_float(RandomState) -> Float

fn next_int(RandomState) -> Int

fn next_int64(RandomState) -> Int64

fn next_positive_int(RandomState) -> Int

fn next_two_uint(RandomState) -> (UInt, UInt)

fn next_uint(RandomState) -> UInt

fn next_uint64(RandomState) -> UInt64

fn split(RandomState) -> RandomState

// Types and methods
type RandomState
impl RandomState {
  clone(Self) -> Self
  new(seed~ : UInt64 = ..) -> Self //deprecated
  next(Self) -> Unit
  next_double(Self) -> Double
  next_float(Self) -> Float
  next_int(Self) -> Int
  next_int64(Self) -> Int64
  next_positive_int(Self) -> Int
  next_two_uint(Self) -> (UInt, UInt)
  next_uint(Self) -> UInt
  next_uint64(Self) -> UInt64
  split(Self) -> Self
}
impl Default for RandomState
impl Show for RandomState

// Type aliases

// Traits

