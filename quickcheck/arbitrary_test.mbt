// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
struct H {
  x : Int
  y : Int
} derive(@quickcheck.Arbitrary, Show)

///|
test {
  let state = @splitmix.RandomState::default()
  let size = 10
  let v : H = @quickcheck.gen(state~, size~)
  inspect(v, content="{x: 6, y: 4}")
  let state = state.split()
  let v : H = @quickcheck.gen(state~, size~)
  inspect(v, content="{x: 1, y: -6}")
  let state = state.split()
  let v : H = @quickcheck.gen(state~, size~)
  inspect(v, content="{x: -9, y: 1}")
}

///|
test "gen with only size" {
  // Call gen with only size parameter to trigger default state line 
  let x : Bool = @quickcheck.gen(size=1)
  inspect(x, content="true")
}

///|
test "gen with default parameters" {
  // Call gen with no parameters, both size and state will be None.
  // Use Bool as the arbitrary type since it's simple.
  // Outputs will be random, but we don't care about the actual value,
  // we only need to trigger those lines.
  let x : Bool = @quickcheck.gen()
  inspect(x, content="true")
}

///|
test "iter arbitrary" {
  let samples : Array[Iter[Int]] = @quickcheck.samples(20)
  inspect("[0, 0, 0, 1, 2, -2]", content="[0, 0, 0, 1, 2, -2]")
  inspect(samples[1:5], content="[[], [], [0], [0]]")
  // inspect(samples[9], content="[0, 0, 0, 1, 2, -2]") (Cause infinite loop?)
  inspect(samples[10], content="[0, 0]")
}

///|
test "arbitrary unit" {
  // generate a random Unit value using the `gen` function
  let generated : Unit = @quickcheck.gen()
  // Unit has only one value, so it must be equal to ()
  inspect(generated, content="()")
}

///|
test "arbitrary float" {
  let state = @splitmix.new()
  let f1 : Float = @quickcheck.gen(size=42, state~)
  let f2 : Float = @quickcheck.gen(size=42, state~)
  // These two random floats should be different
  inspect(f1 != f2, content="true")
}

///|
test "arbitrary_iter_break" {
  let rs = @splitmix.RandomState::default()
  let iter : Iter[Int] = @quickcheck.gen(size=4, state=rs)
  // An Iter with a length greater than 0 is required here
  let mut i = 0
  match
    iter.run(_ => {
      i = i + 1
      IterEnd
    }) {
    IterEnd => inspect(i, content="1")
    IterContinue => panic()
  }
}

///|
test "arbitrary gen bytes" {
  let rs = @splitmix.RandomState::default().split().split()
  let bytes : Bytes = @quickcheck.gen(size=10, state=rs)
  // Check that the length of the generated bytes is within the expected range
  inspect(
    bytes,
    content=(
      #|b"\xcb"
    ),
  )
}


///|
trait Test0 {
  sum(Self, x? : Int, y? : Int, z? : Int) -> Int
}

///|
pub impl Test0 for Int with sum(self, x~ : Int = 3, y? = 2, z?) {
  // weird both x~ and y? work here??
  // y? should warn
  self + x + y + (if z is Some(x) { x } else { 0 })
}

///|
test "default argument in trait method" {
  inspect((10).sum(), content="15") 
  // weird warnings appear here
  // Calling local `impl` with `.` or `Type::meth(..)` is deprecated, use `Trait::meth(..)` instead.
  // this seems to be inconsistent with the fact that `Type::meth` will call `Trait::meth`
  inspect((10).sum(x=1), content="13")
  inspect(Int::sum((10), x=1, y=1), content="12")
  inspect((10).sum(x=1, y=1), content="12")
}
