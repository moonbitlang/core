package moonbitlang/core/json

// Values
fn from_json[T : FromJson](Json, ~path : JsonPath = ..) -> T!JsonDecodeError

fn parse(String) -> Json!ParseError

fn valid(String) -> Bool

// Types and methods
pub type! JsonDecodeError Tuple[JsonPath, String]
impl JsonDecodeError {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type JsonPath
impl JsonPath {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
}

pub type! ParseError {
  InvalidChar(Position, Char)
  InvalidEof
  InvalidNumber(Position, String)
  InvalidIdentEscape(Position)
}
impl ParseError {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct Position {
  pub line : Int
  pub column : Int
}
impl Position {
  op_equal(Self, Self) -> Bool
}
impl Json {
  as_array(Self) -> Array[Self]?
  as_bool(Self) -> Bool?
  as_null(Self) -> Unit?
  as_number(Self) -> Double?
  as_object(Self) -> Map[String, Self]?
  as_string(Self) -> String?
  item(Self, Int) -> Self?
  stringify(Self) -> String
  to_json(Self) -> Self
  to_string(Self) -> String
  value(Self, String) -> Self?
}

// Type aliases
pub typealias JsonValue = Json

// Traits
pub trait FromJson {
  from_json(Json, JsonPath) -> Self!JsonDecodeError
}

// Extension Methods
impl Show for Json

impl Show for JsonDecodeError

impl Show for ParseError

impl FromJson for Bool

impl FromJson for Char

impl FromJson for Int

impl FromJson for Int64

impl FromJson for Double

impl FromJson for String

impl FromJson for Array

impl FromJson for Map

