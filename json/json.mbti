package moonbitlang/core/json

// Values
fn parse(String) -> JsonValue!ParseError

fn valid(String) -> Bool

// Types and methods
pub enum JsonValue {
  Null
  True
  False
  Number(Double)
  String(String)
  Array(Array[JsonValue])
  Object(Map[String, JsonValue])
}
impl JsonValue {
  as_array(Self) -> Array[Self]?
  as_bool(Self) -> Bool?
  as_null(Self) -> Unit?
  as_number(Self) -> Double?
  as_object(Self) -> Map[String, Self]?
  as_string(Self) -> String?
  debug_write(Self, Buffer) -> Unit
  item(Self, Int) -> Self?
  op_equal(Self, Self) -> Bool
  stringify(Self) -> String
  to_json(Self) -> Self
  to_string(Self) -> String
  value(Self, String) -> Self?
}

pub enum ParseError {
  InvalidChar(Position, Char)
  InvalidEof
  InvalidNumber(Position, String)
  InvalidIdentEscape(Position)
}
impl ParseError {
  debug_write(Self, Buffer) -> Unit
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct Position {
  pub line : Int
  pub column : Int
}
impl Position {
  debug_write(Self, Buffer) -> Unit
  op_equal(Self, Self) -> Bool
}

// Traits

// Extension Methods
impl Show for JsonValue

impl Show for ParseError

