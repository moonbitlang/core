package moonbitlang/core/json

// Values
fn parse(String) -> Json!ParseError

fn valid(String) -> Bool

// Types and methods
pub enum ErrorData {
  InvalidChar(Position, Char)
  InvalidEof
  InvalidNumber(Position, String)
  InvalidIdentEscape(Position)
}
impl ErrorData {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub type! ParseError ErrorDataimpl ParseError {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct Position {
  pub line : Int
  pub column : Int
}
impl Position {
  op_equal(Self, Self) -> Bool
}
impl Json {
  as_array(Self) -> Array[Self]?
  as_bool(Self) -> Bool?
  as_null(Self) -> Unit?
  as_number(Self) -> Double?
  as_object(Self) -> Map[String, Self]?
  as_string(Self) -> String?
  item(Self, Int) -> Self?
  stringify(Self) -> String
  to_json(Self) -> Self
  to_string(Self) -> String
  value(Self, String) -> Self?
}

// Type aliases
pub typealias JsonValue = Json

// Traits

// Extension Methods
impl Show for Json

impl Show for ErrorData

impl Show for ParseError

