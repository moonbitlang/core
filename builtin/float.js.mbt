// Copyright 2024 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Float primitive
pub fn Float::op_neg(self : Float) -> Float {
  abort("Unimplemented function Float::op_neg in js backend")
}

pub fn Float::op_add(self : Float, other : Float) -> Float {
 abort("Unimplemented function Float::op_add in js backend")
}

pub fn Float::op_sub(self : Float, other : Float) -> Float {
  abort("Unimplemented function Float::op_sub in js backend")
}

pub fn Float::op_mul(self : Float, other : Float) -> Float {
  abort("Unimplemented function Float::op_mul in js backend")
}

pub fn Float::op_div(self : Float, other : Float) -> Float {
  abort("Unimplemented function Float::op_div in js backend")
} 

pub fn Float::op_mod(self : Float, other : Float) -> Float {
  abort("Unimplemented function Float::op_mod in js backend")
}

pub fn Float::sqrt(self : Float) -> Float {
  abort("Unimplemented function Float::sqrt in js backend")
}

pub fn Float::op_equal(self : Float, other : Float) -> Bool {
  abort("Unimplemented function Float::op_equal in js backend")
}

pub fn Float::op_neq(self : Float, other : Float) -> Bool {
  abort("Unimplemented function Float::op_neq in js backend")
}

pub fn Float::compare(self : Float, other : Float) -> Int {
  abort("Unimplemented function Float::compare in js backend")
}

pub fn Float::to_double(self : Float) -> Double {
  abort("Unimplemented function Float::to_double in js backend")
}

pub fn Float::reinterpret_as_int(self : Float) -> Int {
  abort("Unimplemented function Float::reinterpret_as_int in js backend")
}
pub fn Int::to_float(self : Int) -> Float {
  abort("Unimplemented function Int::to_float in js backend")
}

pub fn Int::reinterpret_as_float(self : Int) -> Float {
  abort("Unimplemented function Int::reinterpret_as_float in js backend")
}

pub fn Byte::to_float(self : Byte) -> Float {
  abort("Unimplemented function Byte::to_float in js backend")
} 

pub fn Double::to_float(self : Double) -> Float {
  abort("Unimplemented function Double::to_float in js backend")
}

pub fn UInt::to_float(self : UInt) -> Float {
  abort("Unimplemented function UInt::to_float in js backend")
}

pub fn Int64::to_float(self : Int64) -> Float {
  abort("Unimplemented function Int64::to_float in js backend")
}

pub fn UInt64::to_float(self : UInt64) -> Float {
  abort("Unimplemented function UInt64::to_float in js backend")
}
