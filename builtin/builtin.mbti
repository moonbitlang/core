package moonbitlang/core/builtin

// Values
fn abort[T](String) -> T

fn debug[X : Debug](X) -> Unit

fn ignore[T](T) -> Unit

fn inspect(Show, ~content : String = .., ~loc : SourceLoc = _, ~args_loc : ArgsLoc = _) -> Unit!String

fn op_ge[T : Compare + Eq](T, T) -> Bool

fn op_gt[T : Compare + Eq](T, T) -> Bool

fn op_le[T : Compare + Eq](T, T) -> Bool

fn op_lt[T : Compare + Eq](T, T) -> Bool

fn op_notequal[T : Eq](T, T) -> Bool

fn panic[T]() -> T

fn physical_equal[T](T, T) -> Bool

fn print[T : Show](T) -> Unit

fn println[T : Show](T) -> Unit

// Types and methods
pub type ArgsLoc Array[SourceLoc?]
impl ArgsLoc {
  to_json(Self) -> String
  to_string(Self) -> String
}

type Array
impl Array {
  append[T](Self[T], Self[T]) -> Unit
  blit_to[A](Self[A], Self[A], ~len : Int, ~src_offset : Int = .., ~dst_offset : Int = ..) -> Unit
  chunk_by[T](Self[T], (T, T) -> Bool) -> Self[Self[T]]
  chunks[T](Self[T], Int) -> Self[Self[T]]
  clear[T](Self[T]) -> Unit
  contains[T : Eq](Self[T], T) -> Bool
  debug_write[X : Debug](Self[X], Buffer) -> Unit
  dedup[T : Eq](Self[T]) -> Unit
  drain[T](Self[T], Int, Int) -> Self[T]
  each[T](Self[T], (T) -> Unit) -> Unit
  each_rev[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  eachi_rev[T](Self[T], (Int, T) -> Unit) -> Unit
  ends_with[T : Eq](Self[T], Self[T]) -> Bool
  extract_if[T](Self[T], (T) -> Bool) -> Self[T]
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  find_index[T](Self[T], (T) -> Bool) -> Int?
  flatten[T](Self[Self[T]]) -> Self[T]
  fold_left[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_lefti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  fold_right[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_righti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  from_fixed_array[T](FixedArray[T]) -> Self[T]
  get[T](Self[T], Int) -> T?
  insert[T](Self[T], Int, T) -> Unit
  is_empty[T](Self[T]) -> Bool
  is_sorted[T : Compare + Eq](Self[T]) -> Bool
  join[T](Self[Self[T]], T) -> Self[T]
  length[T](Self[T]) -> Int
  make[T](Int, T) -> Self[T]
  map[T, U](Self[T], (T) -> U) -> Self[U]
  map_inplace[T](Self[T], (T) -> T) -> Unit
  mapi[T, U](Self[T], (Int, T) -> U) -> Self[U]
  mapi_inplace[T](Self[T], (Int, T) -> T) -> Unit
  new[T](~capacity : Int = ..) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_as_view[T](Self[T], ~start : Int, ~end : Int) -> ArrayView[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  op_get[T](Self[T], Int) -> T
  op_set[T](Self[T], Int, T) -> Unit
  pop[T](Self[T]) -> T?
  pop_exn[T](Self[T]) -> T
  push[T](Self[T], T) -> Unit
  remove[T](Self[T], Int) -> T
  repeat[T](Self[T], Int) -> Self[T]
  reserve_capacity[T](Self[T], Int) -> Unit
  resize[T](Self[T], Int, T) -> Unit
  retain[T](Self[T], (T) -> Bool) -> Unit
  reverse[T](Self[T]) -> Unit
  search[T : Eq](Self[T], T) -> Int?
  shrink_to_fit[T](Self[T]) -> Unit
  split[T](Self[T], (T) -> Bool) -> Self[Self[T]]
  split_at[T](Self[T], Int) -> Tuple[Self[T], Self[T]]
  starts_with[T : Eq](Self[T], Self[T]) -> Bool
  strip_prefix[T : Eq](Self[T], Self[T]) -> Self[T]?
  strip_suffix[T : Eq](Self[T], Self[T]) -> Self[T]?
  swap[T](Self[T], Int, Int) -> Unit
  to_string[T : Show](Self[T]) -> String
  unsafe_blit[A](Self[A], Int, Self[A], Int, Int) -> Unit
  unsafe_blit_fixed[A](Self[A], Int, FixedArray[A], Int, Int) -> Unit
}

type ArrayView
impl ArrayView {
  length[T](Self[T]) -> Int
  op_as_view[T](Self[T], ~start : Int, ~end : Int) -> Self[T]
  op_get[T](Self[T], Int) -> T
  op_set[T](Self[T], Int, T) -> Unit
  swap[T](Self[T], Int, Int) -> Unit
}

type Buffer
impl Buffer {
  expect(Self, ~content : String = .., ~loc : SourceLoc = _, ~args_loc : ArgsLoc = _) -> Unit!String
  make(Int) -> Self
  new(~size_hint : Int = ..) -> Self
  reset(Self) -> Unit
  to_bytes(Self) -> Bytes
  to_string(Self) -> String
  write_byte(Self, Byte) -> Unit
  write_char(Self, Char) -> Unit
  write_string(Self, String) -> Unit
  write_sub_string(Self, String, Int, Int) -> Unit
}

type Iter
impl Iter {
  _unstable_internal_make[T](((T) -> IterResult) -> IterResult) -> Self[T]
  append[T](Self[T], T) -> Self[T]
  collect[T](Self[T]) -> Array[T]
  concat[T](Self[T], Self[T]) -> Self[T]
  count[T](Self[T]) -> Int
  drop[T](Self[T], Int) -> Self[T]
  drop_while[T](Self[T], (T) -> Bool) -> Self[T]
  each[T](Self[T], (T) -> Unit) -> Unit
  empty[T]() -> Self[T]
  filter[T](Self[T], (T) -> Bool) -> Self[T]
  find_first[T](Self[T], (T) -> Bool) -> T?
  flat_map[T, R](Self[T], (T) -> Self[R]) -> Self[R]
  fold[T, B](Self[T], (B, T) -> B, B) -> B
  map[T, R](Self[T], (T) -> R) -> Self[R]
  op_add[T](Self[T], Self[T]) -> Self[T]
  prepend[T](Self[T], T) -> Self[T]
  repeat[T](T) -> Self[T]
  singleton[T](T) -> Self[T]
  take[T](Self[T], Int) -> Self[T]
  take_while[T](Self[T], (T) -> Bool) -> Self[T]
  tap[T](Self[T], (T) -> Unit) -> Self[T]
  to_array[T](Self[T]) -> Array[T]
}

pub enum IterResult {
  IterEnd
  IterContinue
}
impl IterResult {
  op_equal(Self, Self) -> Bool
}

pub type Js_string
impl Js_string {
  log(Self) -> Unit
  new(String) -> Self
  op_add(Self, Self) -> Self
}

type Map
impl Map {
  capacity[K, V](Self[K, V]) -> Int
  clear[K, V](Self[K, V]) -> Unit
  contains[K : Hash + Eq, V](Self[K, V], K) -> Bool
  debug_write[K : Debug, V : Debug](Self[K, V], Buffer) -> Unit
  each[K, V](Self[K, V], (K, V) -> Unit) -> Unit
  eachi[K, V](Self[K, V], (Int, K, V) -> Unit) -> Unit
  from_array[K : Hash + Eq, V](Array[Tuple[K, V]]) -> Self[K, V]
  get[K : Hash + Eq, V](Self[K, V], K) -> V?
  get_or_default[K : Hash + Eq, V](Self[K, V], K, V) -> V
  get_or_init[K : Hash + Eq, V](Self[K, V], K, () -> V) -> V
  is_empty[K, V](Self[K, V]) -> Bool
  iter[K, V](Self[K, V]) -> Iter[Tuple[K, V]]
  new[K, V](~capacity : Int = ..) -> Self[K, V]
  of[K : Hash + Eq, V](FixedArray[Tuple[K, V]]) -> Self[K, V]
  op_equal[K : Eq, V : Eq](Self[K, V], Self[K, V]) -> Bool
  op_get[K : Hash + Eq, V](Self[K, V], K) -> V?
  op_set[K : Hash + Eq, V](Self[K, V], K, V) -> Unit
  remove[K : Hash + Eq, V](Self[K, V], K) -> Unit
  set[K : Hash + Eq, V](Self[K, V], K, V) -> Unit
  size[K, V](Self[K, V]) -> Int
  to_array[K, V](Self[K, V]) -> Array[Tuple[K, V]]
  to_string[K : Show, V : Show](Self[K, V]) -> String
}

pub type SourceLoc
impl SourceLoc {
  debug_write(Self, Buffer) -> Unit
  to_string(Self) -> String
}

pub type UnsafeMaybeUninit
impl Unit {
  debug_write(Unit, Buffer) -> Unit
  op_equal(Unit, Unit) -> Bool
}
impl Bool {
  debug_write(Bool, Buffer) -> Unit
  default() -> Bool
  not(Bool) -> Bool
  op_compare(Bool, Bool) -> Int
  op_equal(Bool, Bool) -> Bool
  to_string(Bool) -> String
}
impl Byte {
  compare(Byte, Byte) -> Int
  debug_write(Byte, Buffer) -> Unit
  op_equal(Byte, Byte) -> Bool
  to_int(Byte) -> Int
  to_int64(Byte) -> Int64
  to_string(Byte) -> String
}
impl Char {
  compare(Char, Char) -> Int
  default() -> Char
  from_int(Int) -> Char
  op_equal(Char, Char) -> Bool
  to_int(Char) -> Int
}
impl Int {
  asr(Int, Int) -> Int
  clz(Int) -> Int
  compare(Int, Int) -> Int
  compare_u(Int, Int) -> Int
  ctz(Int) -> Int
  debug_write(Int, Buffer) -> Unit
  default() -> Int
  div_u(Int, Int) -> Int
  is_neg(Int) -> Bool
  is_non_neg(Int) -> Bool
  is_non_pos(Int) -> Bool
  is_pos(Int) -> Bool
  land(Int, Int) -> Int
  lnot(Int) -> Int
  lor(Int, Int) -> Int
  lsl(Int, Int) -> Int
  lsr(Int, Int) -> Int
  lxor(Int, Int) -> Int
  mod_u(Int, Int) -> Int
  op_add(Int, Int) -> Int
  op_div(Int, Int) -> Int
  op_equal(Int, Int) -> Bool
  op_mod(Int, Int) -> Int
  op_mul(Int, Int) -> Int
  op_neg(Int) -> Int
  op_sub(Int, Int) -> Int
  popcnt(Int) -> Int
  to_byte(Int) -> Byte
  to_double(Int) -> Double
  to_int64(Int) -> Int64
  to_string(Int) -> String
  to_uint(Int) -> UInt
  trunc_double_u(Double) -> Int
  until(Int, Int, ~step : Int = ..) -> Iter[Int]
}
impl Int64 {
  asr(Int64, Int) -> Int64
  clz(Int64) -> Int
  compare(Int64, Int64) -> Int
  compare_u(Int64, Int64) -> Int
  ctz(Int64) -> Int
  debug_write(Int64, Buffer) -> Unit
  default() -> Int64
  div_u(Int64, Int64) -> Int64
  extend_i32_u(Int) -> Int64
  land(Int64, Int64) -> Int64
  lnot(Int64) -> Int64
  lor(Int64, Int64) -> Int64
  lsl(Int64, Int) -> Int64
  lsr(Int64, Int) -> Int64
  lxor(Int64, Int64) -> Int64
  mod_u(Int64, Int64) -> Int64
  op_add(Int64, Int64) -> Int64
  op_div(Int64, Int64) -> Int64
  op_equal(Int64, Int64) -> Bool
  op_mod(Int64, Int64) -> Int64
  op_mul(Int64, Int64) -> Int64
  op_neg(Int64) -> Int64
  op_sub(Int64, Int64) -> Int64
  popcnt(Int64) -> Int
  reinterpret_as_double(Int64) -> Double
  to_byte(Int64) -> Byte
  to_double(Int64) -> Double
  to_int(Int64) -> Int
  to_string(Int64) -> String
  to_uint64(Int64) -> UInt64
  trunc_double_u(Double) -> Int64
  until(Int64, Int64, ~step : Int64 = ..) -> Iter[Int64]
}
impl UInt {
  compare(UInt, UInt) -> Int
  debug_write(UInt, Buffer) -> Unit
  op_add(UInt, UInt) -> UInt
  op_div(UInt, UInt) -> UInt
  op_equal(UInt, UInt) -> Bool
  op_mod(UInt, UInt) -> UInt
  op_mul(UInt, UInt) -> UInt
  op_neq(UInt, UInt) -> Bool
  op_sub(UInt, UInt) -> UInt
  to_int(UInt) -> Int
  to_string(UInt) -> String
}
impl UInt64 {
  compare(UInt64, UInt64) -> Int
  op_add(UInt64, UInt64) -> UInt64
  op_div(UInt64, UInt64) -> UInt64
  op_equal(UInt64, UInt64) -> Bool
  op_mod(UInt64, UInt64) -> UInt64
  op_mul(UInt64, UInt64) -> UInt64
  op_sub(UInt64, UInt64) -> UInt64
  to_int64(UInt64) -> Int64
  to_string(UInt64) -> String
}
impl Double {
  compare(Double, Double) -> Int
  convert_i32_u(Int) -> Double
  convert_i64_u(Int64) -> Double
  default() -> Double
  op_add(Double, Double) -> Double
  op_div(Double, Double) -> Double
  op_equal(Double, Double) -> Bool
  op_mod(Double, Double) -> Double
  op_mul(Double, Double) -> Double
  op_neg(Double) -> Double
  op_neq(Double, Double) -> Bool
  op_sub(Double, Double) -> Double
  reinterpret_as_i64(Double) -> Int64
  sqrt(Double) -> Double
  to_int(Double) -> Int
  to_int64(Double) -> Int64
  until(Double, Double, ~step : Double = ..) -> Iter[Double]
}
impl String {
  debug_write(String, Buffer) -> Unit
  get(String, Int) -> Char
  length(String) -> Int
  make(Int, Char) -> String
  op_add(String, String) -> String
  op_equal(String, String) -> Bool
  op_get(String, Int) -> Char
  to_js_string(String) -> Js_string
  to_string(String) -> String
}
impl Option {
  debug_write[X : Debug](X?, Buffer) -> Unit
  op_equal[X : Eq](X?, X?) -> Bool
  to_string[X : Show](X?) -> String
  unwrap[X](X?) -> X
}
impl Result {
  debug_write[T : Debug, E : Debug](Self[T, E], Buffer) -> Unit
  op_equal[T : Eq, E : Eq](Self[T, E], Self[T, E]) -> Bool
}
impl FixedArray {
  blit_to[A](Self[A], Self[A], ~len : Int, ~src_offset : Int = .., ~dst_offset : Int = ..) -> Unit
  debug_write[X : Debug](Self[X], Buffer) -> Unit
  default[X]() -> Self[X]
  fill[T](Self[T], T) -> Unit
  get[T](Self[T], Int) -> T
  length[T](Self[T]) -> Int
  make[T](Int, T) -> Self[T]
  op_get[T](Self[T], Int) -> T
  op_set[T](Self[T], Int, T) -> Unit
  set[T](Self[T], Int, T) -> Unit
  to_string[X : Show](Self[X]) -> String
  unsafe_blit[A](Self[A], Int, Self[A], Int, Int) -> Unit
}
impl Bytes {
  blit(Bytes, Int, Bytes, Int, Int) -> Unit
  blit_from_string(Bytes, Int, String, Int, Int) -> Unit
  copy(Bytes) -> Bytes
  debug_write(Bytes, Buffer) -> Unit
  length(Bytes) -> Int
  make(Int, ~init : Byte = ..) -> Bytes
  of_string(String) -> Bytes
  op_get(Bytes, Int) -> Byte
  op_set(Bytes, Int, Byte) -> Unit
  set_utf16_char(Bytes, Int, Char) -> Int
  set_utf8_char(Bytes, Int, Char) -> Int
  sub_string(Bytes, Int, Int) -> String
  to_string(Bytes) -> String
}
impl Ref {
  debug_write[X : Debug](Self[X], Buffer) -> Unit
}

// Traits
pub trait Compare : Eq {
  compare(Self, Self) -> Int
}

pub trait Debug {
  debug_write(Self, Buffer) -> Unit
}

pub trait Default {
  default() -> Self
}

pub trait Eq {
  op_equal(Self, Self) -> Bool
}

pub trait Hash {
  hash(Self) -> Int
}

pub trait Show {
  to_string(Self) -> String
}

// Extension Methods

