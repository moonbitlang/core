package "moonbitlang/core/builtin"

// Values
fn[T] abort(String) -> T

fn[T : Eq + Show] assert_eq(T, T, loc~ : SourceLoc = _) -> Unit!

fn assert_false(Bool, loc~ : SourceLoc = _) -> Unit!

fn[T : Eq + Show] assert_not_eq(T, T, loc~ : SourceLoc = _) -> Unit!

fn assert_true(Bool, loc~ : SourceLoc = _) -> Unit!

#deprecated
fn[T] dump(T, name? : String, loc~ : SourceLoc = _) -> T

fn[T] fail(String, loc~ : SourceLoc = _) -> T!Failure

fn[T] ignore(T) -> Unit

fn inspect(&Show, content~ : String = .., loc~ : SourceLoc = _, args_loc~ : ArgsLoc = _) -> Unit!InspectError

fn not(Bool) -> Bool

fn[T : Compare] op_ge(T, T) -> Bool

fn[T : Compare] op_gt(T, T) -> Bool

fn[T : Compare] op_le(T, T) -> Bool

fn[T : Compare] op_lt(T, T) -> Bool

fn[T : Eq] op_notequal(T, T) -> Bool

fn[T] panic() -> T

fn[T] physical_equal(T, T) -> Bool

fn[T : Show] println(T) -> Unit

fn[T : Show] repr(T) -> String

// Types and methods
pub(all) type ArgsLoc Array[SourceLoc?]
fn ArgsLoc::to_json(Self) -> String
impl Show for ArgsLoc

type Array[T]
fn[T] Array::append(Self[T], Self[T]) -> Unit
fn[T : Compare] Array::binary_search(Self[T], T) -> Result[Int, Int]
fn[T] Array::binary_search_by(Self[T], (T) -> Int) -> Result[Int, Int]
fn[A] Array::blit_to(Self[A], Self[A], len~ : Int, src_offset~ : Int = .., dst_offset~ : Int = ..) -> Unit
fn[T] Array::capacity(Self[T]) -> Int
fn[T] Array::chunk_by(Self[T], (T, T) -> Bool) -> Self[Self[T]]
fn[T] Array::chunks(Self[T], Int) -> Self[Self[T]]
fn[T] Array::clear(Self[T]) -> Unit
fn[T : Eq] Array::contains(Self[T], T) -> Bool
fn[T : Eq] Array::dedup(Self[T]) -> Unit
fn[T] Array::drain(Self[T], Int, Int) -> Self[T]
fn[T] Array::each(Self[T], (T) -> Unit?Error) -> Unit?Error
fn[T] Array::eachi(Self[T], (Int, T) -> Unit) -> Unit
fn[T : Eq] Array::ends_with(Self[T], Self[T]) -> Bool
fn[T] Array::extract_if(Self[T], (T) -> Bool) -> Self[T]
fn[T] Array::filter(Self[T], (T) -> Bool) -> Self[T]
#deprecated
fn[T] Array::find_index(Self[T], (T) -> Bool) -> Int?
fn[T] Array::flatten(Self[Self[T]]) -> Self[T]
fn[A, B] Array::fold(Self[A], init~ : B, (B, A) -> B) -> B
#deprecated
fn[T, U] Array::fold_left(Self[T], (U, T) -> U, init~ : U) -> U
#deprecated
fn[T, U] Array::fold_lefti(Self[T], (Int, U, T) -> U, init~ : U) -> U
#deprecated
fn[T, U] Array::fold_right(Self[T], (U, T) -> U, init~ : U) -> U
#deprecated
fn[T, U] Array::fold_righti(Self[T], (Int, U, T) -> U, init~ : U) -> U
fn[A, B] Array::foldi(Self[A], init~ : B, (Int, B, A) -> B) -> B
fn[T] Array::from_fixed_array(FixedArray[T]) -> Self[T]
fn[T] Array::get(Self[T], Int) -> T?
fn[T] Array::insert(Self[T], Int, T) -> Unit
fn[T] Array::is_empty(Self[T]) -> Bool
fn[T : Compare] Array::is_sorted(Self[T]) -> Bool
fn[T] Array::iter(Self[T]) -> Iter[T]
fn[A] Array::iter2(Self[A]) -> Iter2[Int, A]
fn[T] Array::length(Self[T]) -> Int
fn[T] Array::make(Int, T) -> Self[T]
fn[T, U] Array::map(Self[T], (T) -> U) -> Self[U]
fn[T] Array::map_inplace(Self[T], (T) -> T) -> Unit
fn[T, U] Array::mapi(Self[T], (Int, T) -> U) -> Self[U]
fn[T] Array::mapi_inplace(Self[T], (Int, T) -> T) -> Unit
fn[T] Array::new(capacity~ : Int = ..) -> Self[T]
fn[T] Array::op_as_view(Self[T], start~ : Int = .., end? : Int) -> ArrayView[T]
fn[T] Array::op_get(Self[T], Int) -> T
fn[T] Array::op_set(Self[T], Int, T) -> Unit
fn[T] Array::pop(Self[T]) -> T?
#deprecated
fn[T] Array::pop_exn(Self[T]) -> T
fn[T] Array::push(Self[T], T) -> Unit
fn[T] Array::remove(Self[T], Int) -> T
fn[T] Array::repeat(Self[T], Int) -> Self[T]
fn[T] Array::reserve_capacity(Self[T], Int) -> Unit
fn[T] Array::resize(Self[T], Int, T) -> Unit
fn[T] Array::retain(Self[T], (T) -> Bool) -> Unit
fn[T] Array::rev(Self[T]) -> Self[T]
fn[T] Array::rev_each(Self[T], (T) -> Unit) -> Unit
fn[T] Array::rev_eachi(Self[T], (Int, T) -> Unit) -> Unit
fn[A, B] Array::rev_fold(Self[A], init~ : B, (B, A) -> B) -> B
fn[A, B] Array::rev_foldi(Self[A], init~ : B, (Int, B, A) -> B) -> B
fn[T] Array::rev_inplace(Self[T]) -> Unit
fn[T] Array::rev_iter(Self[T]) -> Iter[T]
fn[T : Eq] Array::search(Self[T], T) -> Int?
fn[T] Array::search_by(Self[T], (T) -> Bool) -> Int?
fn[T] Array::shrink_to_fit(Self[T]) -> Unit
fn[T] Array::split(Self[T], (T) -> Bool) -> Self[Self[T]]
fn[T] Array::split_at(Self[T], Int) -> (Self[T], Self[T])
fn[T : Eq] Array::starts_with(Self[T], Self[T]) -> Bool
fn[T : Eq] Array::strip_prefix(Self[T], Self[T]) -> Self[T]?
fn[T : Eq] Array::strip_suffix(Self[T], Self[T]) -> Self[T]?
fn[T] Array::swap(Self[T], Int, Int) -> Unit
fn[A] Array::unsafe_blit(Self[A], Int, Self[A], Int, Int) -> Unit
fn[A] Array::unsafe_blit_fixed(Self[A], Int, FixedArray[A], Int, Int) -> Unit
fn[T] Array::unsafe_get(Self[T], Int) -> T
fn[T] Array::unsafe_pop(Self[T]) -> T
fn[A] Array::unsafe_pop_back(Self[A]) -> Unit
fn[T] Array::windows(Self[T], Int) -> Self[ArrayView[T]]
impl[T] Add for Array[T]
impl[T : Compare] Compare for Array[T]
impl[T] Default for Array[T]
impl[T : Eq] Eq for Array[T]
impl[T : Hash] Hash for Array[T]
impl[X : Show] Show for Array[X]
impl[X : ToJson] ToJson for Array[X]

type ArrayView[T]
fn[T] ArrayView::length(Self[T]) -> Int
fn[T] ArrayView::op_as_view(Self[T], start~ : Int = .., end? : Int) -> Self[T]
fn[T] ArrayView::op_get(Self[T], Int) -> T
fn[T] ArrayView::op_set(Self[T], Int, T) -> Unit
fn[T] ArrayView::swap(Self[T], Int, Int) -> Unit
fn[T] ArrayView::unsafe_get(Self[T], Int) -> T
impl[X : ToJson] ToJson for ArrayView[X]

pub(all) type! BenchError String

pub(all) type! Failure String
impl Show for Failure

type Hasher
fn[T : Hash] Hasher::combine(Self, T) -> Unit
fn Hasher::combine_bool(Self, Bool) -> Unit
fn Hasher::combine_byte(Self, Byte) -> Unit
fn Hasher::combine_bytes(Self, Bytes) -> Unit
fn Hasher::combine_char(Self, Char) -> Unit
fn Hasher::combine_double(Self, Double) -> Unit
fn Hasher::combine_float(Self, Float) -> Unit
fn Hasher::combine_int(Self, Int) -> Unit
fn Hasher::combine_int64(Self, Int64) -> Unit
fn Hasher::combine_string(Self, String) -> Unit
fn Hasher::combine_uint(Self, UInt) -> Unit
fn Hasher::combine_uint64(Self, UInt64) -> Unit
fn Hasher::combine_unit(Self) -> Unit
fn Hasher::finalize(Self) -> Int
fn Hasher::new(seed~ : Int = ..) -> Self

pub(all) type! InspectError String

type Iter[T]
fn[T] Iter::all(Self[T], (T) -> Bool) -> Bool
fn[T] Iter::any(Self[T], (T) -> Bool) -> Bool
#deprecated
fn[T] Iter::append(Self[T], T) -> Self[T]
fn[T] Iter::collect(Self[T]) -> Array[T]
fn[T] Iter::concat(Self[T], Self[T]) -> Self[T]
fn[A : Eq] Iter::contains(Self[A], A) -> Bool
fn[T] Iter::count(Self[T]) -> Int
fn[T] Iter::drop(Self[T], Int) -> Self[T]
fn[T] Iter::drop_while(Self[T], (T) -> Bool) -> Self[T]
fn[T] Iter::each(Self[T], (T) -> Unit) -> Unit
fn[T] Iter::eachi(Self[T], (Int, T) -> Unit) -> Unit
fn[T] Iter::empty() -> Self[T]
fn[T] Iter::filter(Self[T], (T) -> Bool) -> Self[T]
fn[A, B] Iter::filter_map(Self[A], (A) -> B?) -> Self[B]
fn[T] Iter::find_first(Self[T], (T) -> Bool) -> T?
fn[T, R] Iter::flat_map(Self[T], (T) -> Self[R]) -> Self[R]
fn[T] Iter::flatten(Self[Self[T]]) -> Self[T]
fn[T, B] Iter::fold(Self[T], init~ : B, (B, T) -> B) -> B
#deprecated
fn[T, K : Eq + Hash] Iter::group_by(Self[T], (T) -> K) -> Map[K, Array[T]]
fn[A] Iter::head(Self[A]) -> A?
fn[A] Iter::intersperse(Self[A], A) -> Self[A]
fn[T] Iter::iter(Self[T]) -> Self[T]
fn[T] Iter::iter2(Self[T]) -> Iter2[Int, T]
fn Iter::join(Self[String], String) -> String
fn[T] Iter::just_run(Self[T], (T) -> IterResult) -> Unit
fn[A] Iter::last(Self[A]) -> A?
fn[T, R] Iter::map(Self[T], (T) -> R) -> Self[R]
#deprecated
fn[A, B] Iter::map_option(Self[A], (A) -> B?) -> Self[B]
fn[A, B] Iter::map_while(Self[A], (A) -> B?) -> Self[B]
fn[T, R] Iter::mapi(Self[T], (Int, T) -> R) -> Self[R]
fn[T : Compare] Iter::maximum(Self[T]) -> T?
fn[T : Compare] Iter::minimum(Self[T]) -> T?
fn[T] Iter::new(((T) -> IterResult) -> IterResult) -> Self[T]
fn[T] Iter::nth(Self[T], Int) -> T?
fn[A] Iter::op_as_view(Self[A], start~ : Int = .., end? : Int) -> Self[A]
fn[T] Iter::peek(Self[T]) -> T?
#deprecated
fn[T] Iter::prepend(Self[T], T) -> Self[T]
fn[T] Iter::repeat(T) -> Self[T]
fn[T] Iter::run(Self[T], (T) -> IterResult) -> IterResult
fn[T] Iter::singleton(T) -> Self[T]
fn[T] Iter::take(Self[T], Int) -> Self[T]
fn[T] Iter::take_while(Self[T], (T) -> Bool) -> Self[T]
fn[T] Iter::tap(Self[T], (T) -> Unit) -> Self[T]
fn[T] Iter::to_array(Self[T]) -> Array[T]
impl[T] Add for Iter[T]
impl[T : Show] Show for Iter[T]

type Iter2[A, B]
fn[A, B] Iter2::concat(Self[A, B], Self[A, B]) -> Self[A, B]
fn[A, B] Iter2::each(Self[A, B], (A, B) -> Unit) -> Unit
fn[A, B] Iter2::iter(Self[A, B]) -> Iter[(A, B)]
fn[A, B] Iter2::iter2(Self[A, B]) -> Self[A, B]
fn[A, B] Iter2::new(((A, B) -> IterResult) -> IterResult) -> Self[A, B]
fn[A, B] Iter2::run(Self[A, B], (A, B) -> IterResult) -> IterResult
fn[A, B] Iter2::to_array(Self[A, B]) -> Array[(A, B)]
impl[A : Show, B : Show] Show for Iter2[A, B]

pub(all) enum IterResult {
  IterEnd
  IterContinue
}
impl Eq for IterResult

pub(all) enum Json {
  Null
  True
  False
  Number(Double)
  String(String)
  Array(Array[Json])
  Object(Map[String, Json])
}
fn Json::array(Array[Self]) -> Self
fn Json::boolean(Bool) -> Self
fn Json::null() -> Self
fn Json::number(Double) -> Self
fn Json::object(Map[String, Self]) -> Self
fn Json::string(String) -> Self
impl Default for Json
impl Eq for Json

type Map[K, V]
fn[K, V] Map::capacity(Self[K, V]) -> Int
fn[K, V] Map::clear(Self[K, V]) -> Unit
fn[K : Hash + Eq, V] Map::contains(Self[K, V], K) -> Bool
fn[K : Hash + Eq, V : Eq] Map::contains_kv(Self[K, V], K, V) -> Bool
fn[K, V] Map::each(Self[K, V], (K, V) -> Unit) -> Unit
fn[K, V] Map::eachi(Self[K, V], (Int, K, V) -> Unit) -> Unit
fn[K : Hash + Eq, V] Map::from_array(Array[(K, V)]) -> Self[K, V]
fn[K : Hash + Eq, V] Map::from_iter(Iter[(K, V)]) -> Self[K, V]
fn[K : Hash + Eq, V] Map::get(Self[K, V], K) -> V?
fn[K : Hash + Eq, V] Map::get_or_default(Self[K, V], K, V) -> V
fn[K : Hash + Eq, V] Map::get_or_init(Self[K, V], K, () -> V) -> V
fn[K, V] Map::is_empty(Self[K, V]) -> Bool
fn[K, V] Map::iter(Self[K, V]) -> Iter[(K, V)]
fn[K, V] Map::iter2(Self[K, V]) -> Iter2[K, V]
fn[K, V] Map::keys(Self[K, V]) -> Iter[K]
fn[K, V] Map::new(capacity~ : Int = ..) -> Self[K, V]
fn[K : Hash + Eq, V] Map::of(FixedArray[(K, V)]) -> Self[K, V]
#deprecated
fn[K : Hash + Eq, V] Map::op_get(Self[K, V], K) -> V?
fn[K : Hash + Eq, V] Map::op_set(Self[K, V], K, V) -> Unit
fn[K : Hash + Eq, V] Map::remove(Self[K, V], K) -> Unit
fn[K : Hash + Eq, V] Map::set(Self[K, V], K, V) -> Unit
fn[K, V] Map::size(Self[K, V]) -> Int
fn[K, V] Map::to_array(Self[K, V]) -> Array[(K, V)]
fn[K, V] Map::values(Self[K, V]) -> Iter[V]
impl[K, V] Default for Map[K, V]
impl[K : Hash + Eq, V : Eq] Eq for Map[K, V]
impl[K : Show, V : Show] Show for Map[K, V]
impl[K : Show, V : ToJson] ToJson for Map[K, V]

pub(all) type! SnapshotError String

pub(all) extern type SourceLoc
fn SourceLoc::to_string(Self) -> String
impl Show for SourceLoc

type StringBuilder
fn StringBuilder::is_empty(Self) -> Bool
fn StringBuilder::new(size_hint~ : Int = ..) -> Self
fn StringBuilder::reset(Self) -> Unit
fn StringBuilder::to_string(Self) -> String
fn StringBuilder::write_iter(Self, Iter[Char]) -> Unit
fn[T : Show] StringBuilder::write_object(Self, T) -> Unit
impl Logger for StringBuilder
impl Show for StringBuilder

type UninitializedArray[T]
fn[A] UninitializedArray::length(Self[A]) -> Int
fn[T] UninitializedArray::make(Int) -> Self[T]
fn[T] UninitializedArray::op_as_view(Self[T], start~ : Int = .., end? : Int) -> ArrayView[T]
fn[T] UninitializedArray::op_get(Self[T], Int) -> T
fn[T] UninitializedArray::op_set(Self[T], Int, T) -> Unit

#deprecated
fn Bool::op_compare(Bool, Bool) -> Int

fn Byte::lnot(Byte) -> Byte
#deprecated
fn Byte::lsl(Byte, Int) -> Byte
#deprecated
fn Byte::lsr(Byte, Int) -> Byte
fn Byte::to_char(Byte) -> Char
fn Byte::to_double(Byte) -> Double
fn Byte::to_float(Byte) -> Float
fn Byte::to_int(Byte) -> Int
fn Byte::to_int16(Byte) -> Int16
fn Byte::to_int64(Byte) -> Int64
fn Byte::to_string(Byte) -> String
fn Byte::to_uint(Byte) -> UInt
fn Byte::to_uint16(Byte) -> UInt16

#deprecated
fn Char::from_int(Int) -> Char
fn Char::to_int(Char) -> Int
fn Char::to_uint(Char) -> UInt

#deprecated
fn Int::asr(Int, Int) -> Int
fn Int::clz(Int) -> Int
fn Int::ctz(Int) -> Int
fn Int::is_neg(Int) -> Bool
fn Int::is_non_neg(Int) -> Bool
fn Int::is_non_pos(Int) -> Bool
fn Int::is_pos(Int) -> Bool
fn Int::land(Int, Int) -> Int
fn Int::lnot(Int) -> Int
fn Int::lor(Int, Int) -> Int
#deprecated
fn Int::lsl(Int, Int) -> Int
#deprecated
fn Int::lsr(Int, Int) -> Int
fn Int::lxor(Int, Int) -> Int
fn Int::popcnt(Int) -> Int
fn Int::reinterpret_as_float(Int) -> Float
fn Int::reinterpret_as_uint(Int) -> UInt
#deprecated
fn Int::shl(Int, Int) -> Int
#deprecated
fn Int::shr(Int, Int) -> Int
fn Int::to_byte(Int) -> Byte
fn Int::to_char(Int) -> Char?
fn Int::to_double(Int) -> Double
fn Int::to_float(Int) -> Float
fn Int::to_int16(Int) -> Int16
fn Int::to_int64(Int) -> Int64
fn Int::to_string(Int, radix~ : Int = ..) -> String
#deprecated
fn Int::to_uint(Int) -> UInt
fn Int::to_uint16(Int) -> UInt16
fn Int::to_uint64(Int) -> UInt64
fn Int::unsafe_to_char(Int) -> Char
fn Int::until(Int, Int, step~ : Int = .., inclusive~ : Bool = ..) -> Iter[Int]
#deprecated
fn Int::upto(Int, Int, inclusive~ : Bool = ..) -> Iter[Int]

fn Int16::to_byte(Int16) -> Byte
fn Int16::to_int(Int16) -> Int
fn Int16::to_int64(Int16) -> Int64
fn Int16::to_string(Int16, radix~ : Int = ..) -> String

#deprecated
fn Int64::asr(Int64, Int) -> Int64
fn Int64::clz(Int64) -> Int
fn Int64::ctz(Int64) -> Int
fn Int64::lnot(Int64) -> Int64
#deprecated
fn Int64::lsl(Int64, Int) -> Int64
#deprecated
fn Int64::lsr(Int64, Int) -> Int64
fn Int64::popcnt(Int64) -> Int
fn Int64::reinterpret_as_double(Int64) -> Double
fn Int64::reinterpret_as_uint64(Int64) -> UInt64
#deprecated
fn Int64::shl(Int64, Int) -> Int64
#deprecated
fn Int64::shr(Int64, Int) -> Int64
fn Int64::to_byte(Int64) -> Byte
fn Int64::to_double(Int64) -> Double
fn Int64::to_float(Int64) -> Float
fn Int64::to_int(Int64) -> Int
fn Int64::to_int16(Int64) -> Int16
fn Int64::to_string(Int64, radix~ : Int = ..) -> String
fn Int64::to_uint16(Int64) -> UInt16
#deprecated
fn Int64::to_uint64(Int64) -> UInt64
fn Int64::until(Int64, Int64, step~ : Int64 = .., inclusive~ : Bool = ..) -> Iter[Int64]
#deprecated
fn Int64::upto(Int64, Int64, inclusive~ : Bool = ..) -> Iter[Int64]

fn UInt::clz(UInt) -> Int
fn UInt::ctz(UInt) -> Int
fn UInt::land(UInt, UInt) -> UInt
fn UInt::lnot(UInt) -> UInt
fn UInt::lor(UInt, UInt) -> UInt
#deprecated
fn UInt::lsl(UInt, Int) -> UInt
#deprecated
fn UInt::lsr(UInt, Int) -> UInt
fn UInt::lxor(UInt, UInt) -> UInt
fn UInt::op_neq(UInt, UInt) -> Bool
fn UInt::popcnt(UInt) -> Int
fn UInt::reinterpret_as_float(UInt) -> Float
fn UInt::reinterpret_as_int(UInt) -> Int
#deprecated
fn UInt::shl(UInt, Int) -> UInt
#deprecated
fn UInt::shr(UInt, Int) -> UInt
fn UInt::to_byte(UInt) -> Byte
fn UInt::to_double(UInt) -> Double
fn UInt::to_float(UInt) -> Float
#deprecated
fn UInt::to_int(UInt) -> Int
fn UInt::to_string(UInt, radix~ : Int = ..) -> String
fn UInt::to_uint64(UInt) -> UInt64
fn UInt::trunc_double(Double) -> UInt
#deprecated
fn UInt::upto(UInt, UInt, inclusive~ : Bool = ..) -> Iter[UInt]

fn UInt16::to_byte(UInt16) -> Byte
fn UInt16::to_int(UInt16) -> Int
fn UInt16::to_int64(UInt16) -> Int64
fn UInt16::to_string(UInt16, radix~ : Int = ..) -> String

fn UInt64::clz(UInt64) -> Int
fn UInt64::ctz(UInt64) -> Int
fn UInt64::extend_uint(UInt) -> UInt64
fn UInt64::lnot(UInt64) -> UInt64
#deprecated
fn UInt64::lsl(UInt64, Int) -> UInt64
#deprecated
fn UInt64::lsr(UInt64, Int) -> UInt64
fn UInt64::popcnt(UInt64) -> Int
fn UInt64::reinterpret_as_double(UInt64) -> Double
fn UInt64::reinterpret_as_int64(UInt64) -> Int64
#deprecated
fn UInt64::shl(UInt64, Int) -> UInt64
#deprecated
fn UInt64::shr(UInt64, Int) -> UInt64
fn UInt64::to_byte(UInt64) -> Byte
fn UInt64::to_double(UInt64) -> Double
fn UInt64::to_float(UInt64) -> Float
fn UInt64::to_int(UInt64) -> Int
#deprecated
fn UInt64::to_int64(UInt64) -> Int64
fn UInt64::to_string(UInt64, radix~ : Int = ..) -> String
fn UInt64::to_uint(UInt64) -> UInt
fn UInt64::trunc_double(Double) -> UInt64
#deprecated
fn UInt64::upto(UInt64, UInt64, inclusive~ : Bool = ..) -> Iter[UInt64]

fn Float::op_neq(Float, Float) -> Bool
fn Float::reinterpret_as_int(Float) -> Int
fn Float::reinterpret_as_uint(Float) -> UInt
fn Float::sqrt(Float) -> Float
fn Float::to_double(Float) -> Double
fn Float::until(Float, Float, step~ : Float = .., inclusive~ : Bool = ..) -> Iter[Float]
#deprecated
fn Float::upto(Float, Float, inclusive~ : Bool = ..) -> Iter[Float]

fn Double::convert_uint(UInt) -> Double
fn Double::convert_uint64(UInt64) -> Double
fn Double::op_neq(Double, Double) -> Bool
#deprecated
fn Double::reinterpret_as_i64(Double) -> Int64
fn Double::reinterpret_as_int64(Double) -> Int64
#deprecated
fn Double::reinterpret_as_u64(Double) -> UInt64
fn Double::reinterpret_as_uint64(Double) -> UInt64
fn Double::sqrt(Double) -> Double
fn Double::to_float(Double) -> Float
fn Double::to_int(Double) -> Int
fn Double::to_int64(Double) -> Int64
fn Double::to_uint64(Double) -> UInt64
fn Double::until(Double, Double, step~ : Double = .., inclusive~ : Bool = ..) -> Iter[Double]
#deprecated
fn Double::upto(Double, Double, inclusive~ : Bool = ..) -> Iter[Double]

fn String::char_length(String, start_offset~ : Int = .., end_offset~ : Int = ..) -> Int
fn String::charcode_at(String, Int) -> Int
#deprecated
fn String::charcode_length(String) -> Int
#deprecated
fn String::codepoint_at(String, Int) -> Char
#deprecated
fn String::codepoint_length(String, start_offset~ : Int = .., end_offset~ : Int = ..) -> Int
fn String::escape(String) -> String
#deprecated
fn String::get(String, Int) -> Char
fn String::length(String) -> Int
fn String::make(Int, Char) -> String
#deprecated
fn String::op_get(String, Int) -> Char
fn String::substring(String, start~ : Int = .., end? : Int) -> String
fn String::to_string(String) -> String
fn String::unsafe_char_at(String, Int) -> Char
fn String::unsafe_charcode_at(String, Int) -> Int

fn[X : Show] Option::to_string(X?) -> String
fn[X] Option::unwrap(X?) -> X

fn[T : Compare] FixedArray::binary_search(Self[T], T) -> Result[Int, Int]
fn[T] FixedArray::binary_search_by(Self[T], (T) -> Int) -> Result[Int, Int]
fn FixedArray::blit_from_bytes(Self[Byte], Int, Bytes, Int, Int) -> Unit
fn FixedArray::blit_from_string(Self[Byte], Int, String, Int, Int) -> Unit
fn[A] FixedArray::blit_to(Self[A], Self[A], len~ : Int, src_offset~ : Int = .., dst_offset~ : Int = ..) -> Unit
fn[T] FixedArray::fill(Self[T], T) -> Unit
#deprecated
fn[T] FixedArray::get(Self[T], Int) -> T
fn[T] FixedArray::is_empty(Self[T]) -> Bool
fn[T] FixedArray::iter(Self[T]) -> Iter[T]
fn[T] FixedArray::iter2(Self[T]) -> Iter2[Int, T]
fn[T] FixedArray::length(Self[T]) -> Int
fn[T] FixedArray::make(Int, T) -> Self[T]
fn[T] FixedArray::op_get(Self[T], Int) -> T
fn[T] FixedArray::op_set(Self[T], Int, T) -> Unit
fn[T] FixedArray::set(Self[T], Int, T) -> Unit
fn FixedArray::set_utf16be_char(Self[Byte], Int, Char) -> Int
fn FixedArray::set_utf16le_char(Self[Byte], Int, Char) -> Int
fn FixedArray::set_utf8_char(Self[Byte], Int, Char) -> Int
fn[A] FixedArray::unsafe_blit(Self[A], Int, Self[A], Int, Int) -> Unit
fn[T] FixedArray::unsafe_get(Self[T], Int) -> T
fn[T] FixedArray::unsafe_set(Self[T], Int, T) -> Unit

fn Bytes::copy(Bytes) -> Bytes
fn Bytes::length(Bytes) -> Int
fn Bytes::make(Int, Byte) -> Bytes
fn Bytes::makei(Int, (Int) -> Byte) -> Bytes
fn Bytes::new(Int) -> Bytes
#deprecated
fn Bytes::of_string(String) -> Bytes
fn Bytes::op_get(Bytes, Int) -> Byte
fn Bytes::to_unchecked_string(Bytes, offset~ : Int = .., length~ : Int = ..) -> String
fn Bytes::unsafe_get(Bytes, Int) -> Byte

fn[T : Show] Logger::write_iter(&Self, Iter[T], prefix~ : String = .., suffix~ : String = .., sep~ : String = .., trailing~ : Bool = ..) -> Unit
fn[Obj : Show] Logger::write_object(&Self, Obj) -> Unit

// Type aliases

// Traits
pub(open) trait Add {
  op_add(Self, Self) -> Self
}
impl Add for Byte
impl Add for Int
impl Add for Int64
impl Add for UInt
impl Add for UInt64
impl Add for Float
impl Add for Double
impl Add for String

pub(open) trait BitAnd {
  land(Self, Self) -> Self
}
impl BitAnd for Byte
impl BitAnd for Int64
impl BitAnd for UInt64

pub(open) trait BitOr {
  lor(Self, Self) -> Self
}
impl BitOr for Byte
impl BitOr for Int64
impl BitOr for UInt64

pub(open) trait BitXOr {
  lxor(Self, Self) -> Self
}
impl BitXOr for Byte
impl BitXOr for Int64
impl BitXOr for UInt64

pub(open) trait Compare : Eq {
  compare(Self, Self) -> Int
}
impl Compare for Bool
impl Compare for Byte
impl Compare for Char
impl Compare for Int
impl Compare for Int64
impl Compare for UInt
impl Compare for UInt64
impl Compare for Float
impl Compare for Double
impl Compare for Bytes
impl[T0 : Compare, T1 : Compare] Compare for (T0, T1)
impl[T0 : Compare, T1 : Compare, T2 : Compare] Compare for (T0, T1, T2)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare] Compare for (T0, T1, T2, T3)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare] Compare for (T0, T1, T2, T3, T4)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare] Compare for (T0, T1, T2, T3, T4, T5)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare, T11 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare, T11 : Compare, T12 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare, T11 : Compare, T12 : Compare, T13 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare, T11 : Compare, T12 : Compare, T13 : Compare, T14 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
impl[T0 : Compare, T1 : Compare, T2 : Compare, T3 : Compare, T4 : Compare, T5 : Compare, T6 : Compare, T7 : Compare, T8 : Compare, T9 : Compare, T10 : Compare, T11 : Compare, T12 : Compare, T13 : Compare, T14 : Compare, T15 : Compare] Compare for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)

pub(open) trait Default {
  default() -> Self
}
impl Default for Bool
impl Default for Byte
impl Default for Char
impl Default for Int
impl Default for Int64
impl Default for UInt64
impl Default for Double
impl[X] Default for FixedArray[X]

pub(open) trait Div {
  op_div(Self, Self) -> Self
}
impl Div for Byte
impl Div for Int
impl Div for Int64
impl Div for UInt
impl Div for UInt64
impl Div for Float
impl Div for Double

pub(open) trait Eq {
  op_equal(Self, Self) -> Bool
}
impl Eq for Unit
impl Eq for Bool
impl Eq for Byte
impl Eq for Char
impl Eq for Int
impl Eq for Int64
impl Eq for UInt
impl Eq for UInt64
impl Eq for Float
impl Eq for Double
impl Eq for String
impl[X : Eq] Eq for X?
impl[T : Eq, E : Eq] Eq for Result[T, E]
impl Eq for Bytes
impl[T0 : Eq, T1 : Eq] Eq for (T0, T1)
impl[T0 : Eq, T1 : Eq, T2 : Eq] Eq for (T0, T1, T2)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq] Eq for (T0, T1, T2, T3)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq] Eq for (T0, T1, T2, T3, T4)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq] Eq for (T0, T1, T2, T3, T4, T5)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq, T14 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq, T14 : Eq, T15 : Eq] Eq for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)

pub(open) trait Hash {
  hash_combine(Self, Hasher) -> Unit
  hash(Self) -> Int = _
}
impl Hash for Byte
impl Hash for Int
impl Hash for UInt
impl Hash for UInt64
impl Hash for String
impl[X : Hash] Hash for X?
impl[T : Hash, E : Hash] Hash for Result[T, E]
impl[A : Hash, B : Hash] Hash for (A, B)
impl[A : Hash, B : Hash, C : Hash] Hash for (A, B, C)
impl[A : Hash, B : Hash, C : Hash, D : Hash] Hash for (A, B, C, D)
impl[A : Hash, B : Hash, C : Hash, D : Hash, E : Hash] Hash for (A, B, C, D, E)
impl[A : Hash, B : Hash, C : Hash, D : Hash, E : Hash, F : Hash] Hash for (A, B, C, D, E, F)
impl[A : Hash, B : Hash, C : Hash, D : Hash, E : Hash, F : Hash, G : Hash] Hash for (A, B, C, D, E, F, G)

pub(open) trait Logger {
  write_string(Self, String) -> Unit
  write_substring(Self, String, Int, Int) -> Unit
  write_char(Self, Char) -> Unit = _
}

pub(open) trait Mod {
  op_mod(Self, Self) -> Self
}
impl Mod for Byte
impl Mod for Int
impl Mod for Int64
impl Mod for UInt
impl Mod for UInt64

pub(open) trait Mul {
  op_mul(Self, Self) -> Self
}
impl Mul for Byte
impl Mul for Int
impl Mul for Int64
impl Mul for UInt
impl Mul for UInt64
impl Mul for Float
impl Mul for Double

pub(open) trait Neg {
  op_neg(Self) -> Self
}
impl Neg for Int
impl Neg for Int64
impl Neg for Float
impl Neg for Double

pub(open) trait Shl {
  op_shl(Self, Int) -> Self
}
impl Shl for Byte
impl Shl for Int
impl Shl for Int64
impl Shl for UInt
impl Shl for UInt64

pub(open) trait Show {
  output(Self, &Logger) -> Unit
  to_string(Self) -> String = _
}
impl Show for Unit
impl Show for Bool
impl Show for Byte
impl Show for Int
impl Show for Int16
impl Show for Int64
impl Show for UInt
impl Show for UInt16
impl Show for UInt64
impl Show for String
impl[X : Show] Show for X?
impl[T : Show, E : Show] Show for Result[T, E]
impl[X : Show] Show for FixedArray[X]
impl Show for Bytes
impl[X : Show] Show for Ref[X]
impl[A : Show, B : Show] Show for (A, B)
impl[A : Show, B : Show, C : Show] Show for (A, B, C)
impl[A : Show, B : Show, C : Show, D : Show] Show for (A, B, C, D)
impl[A : Show, B : Show, C : Show, D : Show, E : Show] Show for (A, B, C, D, E)
impl[A : Show, B : Show, C : Show, D : Show, E : Show, F : Show] Show for (A, B, C, D, E, F)
impl[A : Show, B : Show, C : Show, D : Show, E : Show, F : Show, G : Show] Show for (A, B, C, D, E, F, G)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show, T14 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show, T14 : Show, T15 : Show] Show for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)

pub(open) trait Shr {
  op_shr(Self, Int) -> Self
}
impl Shr for Byte
impl Shr for Int
impl Shr for Int64
impl Shr for UInt
impl Shr for UInt64

pub(open) trait Sub {
  op_sub(Self, Self) -> Self
}
impl Sub for Byte
impl Sub for Int
impl Sub for Int64
impl Sub for UInt
impl Sub for UInt64
impl Sub for Float
impl Sub for Double

pub(open) trait ToJson {
  to_json(Self) -> Json
}
impl ToJson for Unit
impl ToJson for Bool
impl ToJson for Byte
impl ToJson for Int
impl ToJson for Int64
impl ToJson for UInt
impl ToJson for UInt64
impl ToJson for Float
impl ToJson for Double
impl ToJson for String
impl[T : ToJson] ToJson for T?
impl[Ok : ToJson, Err : ToJson] ToJson for Result[Ok, Err]
impl[X : ToJson] ToJson for FixedArray[X]
impl[A : ToJson, B : ToJson] ToJson for (A, B)
impl[A : ToJson, B : ToJson, C : ToJson] ToJson for (A, B, C)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson] ToJson for (A, B, C, D)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson] ToJson for (A, B, C, D, E)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson] ToJson for (A, B, C, D, E, F)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson] ToJson for (A, B, C, D, E, F, G)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson] ToJson for (A, B, C, D, E, F, G, H)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson] ToJson for (A, B, C, D, E, F, G, H, I)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson, L : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K, L)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson, L : ToJson, M : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K, L, M)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson, L : ToJson, M : ToJson, N : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K, L, M, N)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson, L : ToJson, M : ToJson, N : ToJson, O : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)
impl[A : ToJson, B : ToJson, C : ToJson, D : ToJson, E : ToJson, F : ToJson, G : ToJson, H : ToJson, I : ToJson, J : ToJson, K : ToJson, L : ToJson, M : ToJson, N : ToJson, O : ToJson, P : ToJson] ToJson for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)

