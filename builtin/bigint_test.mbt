// Copyright 2024 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

test "neg" {
  let a = BigInt::from_int64(123456789012345678)
  inspect!(-a, content="-123456789012345678")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    -a,
    content="-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    -a,
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )
}

test "add" {
  let a = BigInt::from_int64(123456789012345678)
  let b = BigInt::from_int64(876543210987654321)
  inspect!(a + b, content="999999999999999999")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "876543210987654321876543210987654321876543210987654321876543210987654321",
  )
  inspect!(
    a + b,
    content="999999999999999999999999999999999999999999999999999999999999999999999999",
  )
  inspect!(-1N + 1N, content="0")
  inspect!(1N + -1N, content="0")
  inspect!(-11N + 11N, content="0")
  inspect!(11N + -11N, content="0")
}

test "sub" {
  let a = BigInt::from_int64(123456789012345678)
  let b = BigInt::from_int64(876543210987654321)
  inspect!(a - b, content="-753086421975308643")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "876543210987654321876543210987654321876543210987654321876543210987654321",
  )
  inspect!(
    a - b,
    content="-753086421975308643753086421975308643753086421975308643753086421975308643",
  )
}

test "mul" {
  let a = BigInt::from_int64(123456789012345678)
  let b = BigInt::from_int64(876543210987654321)
  inspect!(a * b, content="108215210259106841348574911222374638")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "876543210987654321876543210987654321876543210987654321876543210987654321",
  )
  inspect!(
    a * b,
    content="108215210259106841565005331740588321021795453222069800478585574703551279718945275666819076262155154185337596805365032703856117348574911222374638",
  )
}

test "div" {
  let a = BigInt::from_int64(123456789012345678)
  let b = BigInt::from_int64(876543210987654321)
  inspect!(a / b, content="0")
  inspect!(a % b, content="123456789012345678")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "876543210987654321876543210987654321876543210987654321876543210987654321",
  )
  inspect!(a / b, content="0")
  inspect!(
    a % b,
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )
}

test "neg" {
  let a = BigInt::from_int64(123456789012345678L)
  let b = -a
  inspect!(b.to_string(), content="-123456789012345678")
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = -a
  inspect!(
    b.to_string(),
    content="-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = -a
  inspect!(
    b.to_string(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )
}

test "add" {
  let a = BigInt::from_int64(123456789012345678L)
  let b = BigInt::from_int64(987654321098765432L)
  let c = a + b
  inspect!(c.to_string(), content="1111111110111111110")
  let a = BigInt::from_string("123456789012345678123456789012345678")
  let b = BigInt::from_string("9876543210987654329876543210987654321241243")
  let c = a + b
  inspect!(c.to_string(), content="9876543334444443342222221334444443333586921")
  let a = BigInt::from_string(
    "-345678987654356798765467898765456789098764567890987655678",
  )
  let b = BigInt::from_string("76678908909876567890987656789098789")
  let c = a + b
  inspect!(
    c.to_string(),
    content="-345678987654356798765391219856546912530873580234198556889",
  )
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a + b
  inspect!(
    c.to_string(),
    content="-123456794480236665780245887778024588000245887779444446014444446903333367",
  )
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a + b
  inspect!(
    c.to_string(),
    content="123456783544454690466667690246666768246667690245246910232469131121357989",
  )
  let a = BigInt::from_string("123456789012345678123456789012345678123456789")
  let b = BigInt::from_string(
    "98765432109876543298765432109876543298765432112341241213125125",
  )
  let c = a + b
  let d = b + a
  inspect!(
    c.to_string(),
    content="98765432109876543422222221122222221422222221124686919336581914",
  )
  inspect!(
    d.to_string(),
    content="98765432109876543422222221122222221422222221124686919336581914",
  )
  let a = BigInt::from_string("1")
  let b = BigInt::from_string("1")
  let c = a + b
  inspect!(c.to_string(), content="2")
}

test "sub" {
  let a = BigInt::from_int64(987654321098765432L)
  let b = BigInt::from_int64(123456789012345678L)
  let c = a - b
  inspect!(c.to_string(), content="864197532086419754")
  let c = b - a
  inspect!(c.to_string(), content="-864197532086419754")
  let a = BigInt::from_string("987654321098765432987654321098765432")
  let b = BigInt::from_string("123456789012345678123456789012345678")
  let c = a - b
  inspect!(c.to_string(), content="864197532086419754864197532086419754")
  let c = b - a
  inspect!(c.to_string(), content="-864197532086419754864197532086419754")
  let a = BigInt::from_string("-123456789012345678123456789012345678")
  let b = BigInt::from_string("-987654321098765432987654321098765432")
  let c = a - b
  inspect!(c.to_string(), content="864197532086419754864197532086419754")
  let c = b - a
  inspect!(c.to_string(), content="-864197532086419754864197532086419754")
  let a = BigInt::from_string("123456789012345678123456789012345678233")
  let b = BigInt::from_string("-987654321098765432987654321098765432")
  let c = a - b
  inspect!(c.to_string(), content="124444443333444443556444443333444443665")
  let a = BigInt::from_string("-123456789012345678123456789012345678233")
  let b = BigInt::from_string("987654321098765432987654321098765432")
  let c = a - b
  inspect!(c.to_string(), content="-124444443333444443556444443333444443665")
  let a = BigInt::from_string("123456789012345678123456789012345678233")
  let b = BigInt::from_string("987")
  let c = a - b
  inspect!(c.to_string(), content="123456789012345678123456789012345677246")
}

test "mul" {
  let a = BigInt::from_int64(987654321098765432L)
  let b = BigInt::from_int64(123456789012345678L)
  let c = a * b
  inspect!(c.to_string(), content="121932631137021794322511812221002896")
  let b = BigInt::from_int(0)
  let c = a * b
  inspect!(c.to_string(), content="0")
  let a = BigInt::from_string("987654321098765432987654321098765432")
  let b = BigInt::from_string("123456789012345678123456789012345678")
  let c = a * b
  inspect!(
    c.to_string(),
    content="121932631137021794566377074495046484766956255579027586322511812221002896",
  )
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a * b
  inspect!(
    c.to_string(),
    content="-675048264005650638331575538351330675368295268968297112032725993817064025468035871811413387811508597465733350774788866848766914110358142",
  )
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let c = a * b
  inspect!(
    c.to_string(),
    content="15241578753238836558451457271757357101661335790275877644871214308794398188081092827312918731290971345831439274500849864349959817710728382868480360920606901387000904130485419905521447340363938424041990550242456942562533760120975461083076969999493979603620179878012498124163389756531016644691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328691358056296296328676116477543057492132906599024538971589696720506020451046486841987501930503276963468983409960067084950464889416857206431946368873647327913427848330437449394909327787227570876390807244017692357872286700807813839353766157597935320835245614388056802316725071178178283798204527968299765279684",
  )
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "1234567890123456781234567890123456781234567890123456712345678901234567812345678901234567812345678901234567123456789012345678123456789012345678123456789012345671234567890123456781234567890123456781234567890123456778123456789012345678123456789012345677812345678901234567812345678901234567",
  )
  let c = a * b
  inspect!(
    c.to_string(),
    content
  )
}

test "div" {
  let a = BigInt::from_int64(987654321098765432L)
  let b = BigInt::from_int64(123456789012345678L)
  let c = a / b
  inspect!(c.to_string(), content="8")
  let c = a % b
  inspect!(c.to_string(), content="9000000008")
  let a = BigInt::from_string("987654321098765432987654321098765432")
  let b = BigInt::from_string("123456789012345678123456789012345678")
  let c = a / b
  inspect!(c.to_string(), content="8")
  let c = a % b
  inspect!(c.to_string(), content="9000000008000000009000000008")
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  inspect!(c.to_string(), content="22578502")
  let c = a % b
  inspect!(
    c.to_string(),
    content="-1411754890143397710214334775703365651947321477507789807694283800",
  )
  let a = BigInt::from_string(
    "12421645375698213532453474567345623538756734578959876125298763582362",
  )
  let b = BigInt::from_string(
    "-5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  inspect!(c.to_string(), content="-2271")
  let c = a % b
  inspect!(
    c.to_string(),
    content="4064942729645489156617763015435495456653277079443154228330540643",
  )
  let a = BigInt::from_string(
    "559480073748030317374803031737502937374948313029373748143063751326169",
  )
  let b = BigInt::from_string(
    "5467890987656789098765678909876789098767098767890987657890987689",
  )
  let c = a / b
  inspect!(c.to_string(), content="102321")
  let c = a % b
  inspect!(c.to_string(), content="0")
  let c = b / a
  inspect!(c.to_string(), content="0")
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let b = BigInt::from_string(
    "98765432109876543298765432109876543298765432112341241213125125",
  )
  let c = a / b
  inspect!(c.to_string(), content="-1249999988")
  let c = a % b
  inspect!(
    c.to_string(),
    content="-60185184318518518460185184318518518457104311955145277319847178",
  )
  let b = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let c = a / b
  inspect!(c.to_string(), content="-1")
  let c = a % b
  inspect!(c.to_string(), content="0")
  let b = BigInt::from_int(42)
  let c = a / b
  inspect!(
    c.to_string(),
    content="-2939447357436801860082304500293944717225161643151087574368018786008230",
  )
  let c = a % b
  inspect!(c.to_string(), content="-18")
  let a = BigInt::from_string(
    "192840512535448761530339373212972361809285001825938158026158292411480026580386667968523131569543343891463401449181505398836",
  )
  let b = BigInt::from_string(
    "53114991887765067119604462397623222751521283658033792",
  )
  let c = a / b
  inspect!(
    c.to_string(),
    content="3630623025283172274355511610456320508397929760764978568884844414130904",
  )
  let a = BigInt::from_string("65535232222222222222222222222")
  let b = BigInt::from_string("1")
  let c = a / b
  inspect!(c.to_string(), content="65535232222222222222222222222")
  let c = a % b
  inspect!(c.to_string(), content="0")
}

test "op_shl" {
  let a = BigInt::from_int64(1234567890123456789)
  let b = a << 1
  inspect!(b.to_string(), content="2469135780246913578")
  let c = a << 64
  inspect!(c.to_string(), content="22773757910726981402256170801141121024")
  let a = 0N
  let b = a << 1
  inspect!(b.to_string(), content="0")
}

test "op_shr" {
  let a = BigInt::from_int64(1234567890123456789L)
  let b = a >> 1
  inspect!(b.to_string(), content="617283945061728394")
  let c = a >> 64
  inspect!(c.to_string(), content="0")
  let a = BigInt::from_int64(-1234567890123456789L)
  let b = a >> 1
  inspect!(b.to_string(), content="-617283945061728395")
  let c = a >> 64
  inspect!(c.to_string(), content="-1")
  assert_eq!(BigInt::from_int64(0b1111_1111L) >> 4, BigInt::from_int64(0b1111L))
  assert_eq!(BigInt::from_int64(0b1111_1111L) >> 24, BigInt::from_int64(0))
  assert_eq!(BigInt::from_int64(0b1111_1111L) >> 44, BigInt::from_int64(0))
}

test "decimal_string" {
  let a = BigInt::from_string("0")
  inspect!(a.to_string(), content="0")
  let a = BigInt::from_string("123")
  inspect!(a.to_string(), content="123")
  assert_eq!(a, BigInt::from_int64(123L))
  let a = BigInt::from_string("1234567890123456789")
  inspect!(a.to_string(), content="1234567890123456789")
  let b = BigInt::from_string("-1234567890")
  inspect!(b.to_string(), content="-1234567890")
  assert_eq!(a, BigInt::from_int64(1234567890123456789L))
  let str
  let a = BigInt::from_string(str)
  inspect!(a.to_string(), content=str)
  let a = BigInt::from_int64(1234567890123456789L)
  inspect!(a.to_string(), content="1234567890123456789")
  let b = BigInt::from_int64(-1234567890L)
  inspect!(b.to_string(), content="-1234567890")
}

test "from_int" {
  let a = BigInt::from_int(1234567899)
  inspect!(a.to_string(), content="1234567899")
  let b = BigInt::from_int(-1234567890)
  inspect!(b.to_string(), content="-1234567890")
}

test "from_int" {
  let a = BigInt::from_int(1234567899)
  inspect!(a.to_string(), content="1234567899")
  let b = BigInt::from_int(-1234567890)
  inspect!(b.to_string(), content="-1234567890")
}

test "compare" {
  let a = BigInt::from_int64(1234567890123456789L)
  let b = BigInt::from_int64(-1234567890123456789L)
  inspect!(a.compare(b), content="1")
  inspect!(b.compare(a), content="-1")
  let a = -a
  let b = BigInt::from_int64(-1234567890123456788L)
  assert_true!(a.compare(b) < 0)
  assert_true!(b.compare(a) > 0)
  let a = BigInt::from_int64(-1234567890123456789L)
  let b = BigInt::from_int64(-1234569L)
  assert_true!(a.compare(b) < 0)
  assert_true!(b.compare(a) > 0)
}

test "from_hex" {
  // Check zero
  let a = BigInt::from_hex("0")
  inspect!(a.to_string(), content="0")

  // Test positive number
  let a = BigInt::from_hex("1")
  inspect!(a.to_string(), content="1")

  // Test negative number
  let a = BigInt::from_hex("-F")
  inspect!(a.to_string(), content="-15")
  let a = BigInt::from_hex("-a")
  inspect!(a.to_string(), content="-10")

  // Test large positive number
  let a = BigInt::from_hex("112210F47DE98115")
  inspect!(a.to_string(), content="1234567890123456789")

  // Test very large positive number
  let a = BigInt::from_hex(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    a.to_string(),
    content="35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )
  let a = BigInt::from_hex(
    "11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )
  inspect!(
    a.to_string(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let a = BigInt::from_hex(

  )
  inspect!(
    a.to_string(),
    content="12345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812345678901234567812",
  )

  // Test very large negative number
  let a = BigInt::from_hex(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    a.to_string(),
    content="-35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )
}

test "to_hex" {
  // Check zero
  let a = BigInt::from_hex("00")
  inspect!(a.to_hex(), content="0")

  // Test negative number
  let a = BigInt::from_hex("-F")
  inspect!(a.to_hex(), content="-F")

  // Test positive number
  let a = BigInt::from_hex("F")
  inspect!(a.to_hex(), content="F")

  // Test positive number with leading zero
  let a = BigInt::from_hex("10")
  inspect!(a.to_hex(), content="10")

  // Test large positive number
  let a = BigInt::from_hex("01234567890123456789")
  inspect!(a.to_hex(), content="1234567890123456789")

  // Check padding
  let a = BigInt::from_hex("100000")
  inspect!(a.to_string(), content="1048576")
  inspect!(a.to_hex(), content="100000")

  // Test very large positive number
  let a = BigInt::from_string(
    "123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    a.to_hex(),
    content="11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )
  let a = BigInt::from_string(
    "35365207917649046390549507392234216535182073572857507984542859337680634154115797374584",
  )
  inspect!(
    a.to_hex(),
    content="123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  let str
  let a = BigInt::from_string(str)
  inspect!(
    a.to_hex(),
    content
  )
  inspect!(
    a.to_hex(uppercase=false),
    content="805146f2f58580962a0a2e6134bc75e25ad97ae3d09cd34ba4f629ab8911f3f5cb8573a62edd16b0d46775a415f545a75518da3439914d9caa26449067d85e704e8fcf9b29182485b41f952616bacdfddf52b413b524d0eb743e8264a9c6ae32d12c3d20c5b81189060f4ac5d216713d503a69644ea8e4ea220a720c41f6b3d18bed65b4238318e6b0a41d8540d756865ec92df40e8d365a230f17df1d0a440bc6a557cd46d00b10d74c0e75500b2adb3a0336223f9285b78cd04f485e417e1db562b9efcf79433209e6d6e2f43a484e471de4f1f5ae38e08e7daeb644c2c0a22697dd6d29be0b40ff50db575fef02fa5525953c7c198b4a3600ba8ce1f917852a4b957151189f09dcdfcb79963e7d850127858a97855b94870accbe8203e73fe79791ee6ea1b1282a0ceac54d6f6b7cd6c7b8d8092e949ff0a84",
  )

  // Test very large negative number
  let a = BigInt::from_string(
    "-123456789012345678123456789012345678123456789012345678123456789012345678",
  )
  inspect!(
    a.to_hex(),
    content="-11E3444DC1F35F057AD2CBC2791737468140A426FAC3CBA7AF8C92A8F34E",
  )
  inspect!(
    a.to_hex(uppercase=false),
    content="-11e3444dc1f35f057ad2cbc2791737468140a426fac3cba7af8c92a8f34e",
  )
}
