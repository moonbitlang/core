package moonbitlang/core/time

// Values

// Types and methods
type Duration
fn Duration::add_duration(Duration, Duration) -> Result[Duration, String]
fn Duration::add_hours(Duration, Int64) -> Result[Duration, String]
fn Duration::add_minutes(Duration, Int64) -> Result[Duration, String]
fn Duration::add_nanoseconds(Duration, Int64) -> Result[Duration, String]
fn Duration::add_seconds(Duration, Int64) -> Result[Duration, String]
fn Duration::compare(Duration, Duration) -> Int
fn Duration::from_string(String) -> Result[Duration, String]
fn Duration::is_neg(Duration) -> Bool
fn Duration::is_zero(Duration) -> Bool
fn Duration::nanoseconds(Duration) -> Int
fn Duration::of(Int64, Int64, Int64, Int64) -> Result[Duration, String]
fn Duration::op_add(Duration, Duration) -> Result[Duration, String]
fn Duration::op_equal(Duration, Duration) -> Bool
fn Duration::seconds(Duration) -> Int64
fn Duration::to_nanoseconds(Duration) -> Int64
fn Duration::to_string(Duration) -> String
fn Duration::with_nanoseconds(Duration, Int) -> Result[Duration, String]
fn Duration::with_seconds(Duration, Int64) -> Duration
fn Duration::zero() -> Duration

type Period
fn Period::add_days(Period, Int) -> Result[Period, String]
fn Period::add_months(Period, Int) -> Result[Period, String]
fn Period::add_period(Period, Period) -> Result[Period, String]
fn Period::add_weeks(Period, Int) -> Result[Period, String]
fn Period::add_years(Period, Int) -> Result[Period, String]
fn Period::compare(Period, Period) -> Int
fn Period::days(Period) -> Int
fn Period::debug_write(Period, Buffer) -> Unit
fn Period::from_string(String) -> Result[Period, String]
fn Period::is_neg(Period) -> Bool
fn Period::is_zero(Period) -> Bool
fn Period::months(Period) -> Int
fn Period::multiply(Period, Int) -> Result[Period, String]
fn Period::negated(Period) -> Result[Period, String]
fn Period::of(Int, Int, Int) -> Period
fn Period::op_add(Period, Period) -> Result[Period, String]
fn Period::op_equal(Period, Period) -> Bool
fn Period::op_sub(Period, Period) -> Result[Period, String]
fn Period::to_string(Period) -> String
fn Period::with_days(Period, Int) -> Period
fn Period::with_months(Period, Int) -> Period
fn Period::with_years(Period, Int) -> Period
fn Period::years(Period) -> Int
fn Period::zero() -> Period

type PlainDate
fn PlainDate::add_days(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::add_months(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::add_period(PlainDate, Period) -> Result[PlainDate, String]
fn PlainDate::add_weeks(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::add_years(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::compare(PlainDate, PlainDate) -> Int
fn PlainDate::day(PlainDate) -> Int
fn PlainDate::days_in_month(PlainDate) -> Int
fn PlainDate::days_in_week(PlainDate) -> Int
fn PlainDate::days_in_year(PlainDate) -> Int
fn PlainDate::era(PlainDate) -> String
fn PlainDate::era_year(PlainDate) -> Int
fn PlainDate::from_string(String) -> Result[PlainDate, String]
fn PlainDate::from_year_ord(Int, Int) -> Result[PlainDate, String]
fn PlainDate::from_ymd(Int, Int, Int) -> Result[PlainDate, String]
fn PlainDate::in_leap_year(PlainDate) -> Bool
fn PlainDate::month(PlainDate) -> Int
fn PlainDate::months_in_year(PlainDate) -> Int
fn PlainDate::op_equal(PlainDate, PlainDate) -> Bool
fn PlainDate::ordinal(PlainDate) -> Int
fn PlainDate::to_string(PlainDate) -> String
fn PlainDate::until(PlainDate, PlainDate) -> Result[Period, String]
fn PlainDate::weekday(PlainDate) -> Weekday
fn PlainDate::with_day(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::with_month(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::with_ordinal(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::with_year(PlainDate, Int) -> Result[PlainDate, String]
fn PlainDate::year(PlainDate) -> Int

type PlainDateTime
fn PlainDateTime::date(PlainDateTime) -> PlainDate
fn PlainDateTime::time(PlainDateTime) -> PlainTime

type PlainTime
fn PlainTime::add_duration(PlainTime, Duration) -> Result[PlainTime, String]
fn PlainTime::add_hours(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::add_minutes(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::add_nanoseconds(PlainTime, Int64) -> Result[PlainTime, String]
fn PlainTime::add_seconds(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::at_date(PlainTime, PlainDate) -> PlainDateTime
fn PlainTime::compare(PlainTime, PlainTime) -> Int
fn PlainTime::debug_write(PlainTime, Buffer) -> Unit
fn PlainTime::from_nanosecond_of_day(Int64) -> Result[PlainTime, String]
fn PlainTime::from_second_of_day(Int) -> Result[PlainTime, String]
fn PlainTime::from_string(String) -> Result[PlainTime, String]
fn PlainTime::hour(PlainTime) -> Int
fn PlainTime::minute(PlainTime) -> Int
fn PlainTime::nanosecond(PlainTime) -> Int
fn PlainTime::nanosecond_of_day(PlainTime) -> Int64
fn PlainTime::of(Int, Int, Int, Int) -> Result[PlainTime, String]
fn PlainTime::op_equal(PlainTime, PlainTime) -> Bool
fn PlainTime::second(PlainTime) -> Int
fn PlainTime::second_of_day(PlainTime) -> Int
fn PlainTime::to_nanosecond_of_day(PlainTime) -> Int64
fn PlainTime::to_second_of_day(PlainTime) -> Int
fn PlainTime::to_string(PlainTime) -> String
fn PlainTime::until(PlainTime, PlainTime) -> Result[Duration, String]
fn PlainTime::with_hour(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::with_minute(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::with_nanosecond(PlainTime, Int) -> Result[PlainTime, String]
fn PlainTime::with_second(PlainTime, Int) -> Result[PlainTime, String]

type Weekday
fn Weekday::debug_write(Weekday, Buffer) -> Unit
fn Weekday::op_equal(Weekday, Weekday) -> Bool
fn Weekday::to_string(Weekday) -> String

// Traits
pub trait Datelike {
  year(Self) -> Int
  month(Self) -> Int
  day(Self) -> Int
  ordinal(Self) -> Int
  weekday(Self) -> Int
  with_year(Self, Int) -> Result[Self, String]
  with_month(Self, Int) -> Result[Self, String]
  with_day(Self, Int) -> Result[Self, String]
  with_ordinal(Self, Int) -> Result[Self, String]
}

pub trait Timelike {
  hour(Self) -> Int
  minute(Self) -> Int
  second(Self) -> Int
  nanosecond(Self) -> Int
  with_hour(Self, Int64) -> Result[Self, String]
  with_minute(Self, Int64) -> Result[Self, String]
  with_second(Self, Int64) -> Result[Self, String]
  with_nanosecond(Self, Int64) -> Result[Self, String]
}

// Extension Methods

