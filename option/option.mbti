package "moonbitlang/core/option"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[T, U] bind(T?, (T) -> U?) -> U?

fn[T] empty() -> T?

fn[T] filter(T?, (T) -> Bool) -> T?

fn[T] flatten(T??) -> T?

fn[T] is_empty(T?) -> Bool

fn[T] iter(T?) -> Iter[T]

fn[T, U] map(T?, (T) -> U) -> U?

fn[T, U] map_or(T?, U, (T) -> U) -> U

fn[T, U] map_or_else(T?, () -> U, (T) -> U) -> U

fn[T] or(T?, T) -> T

fn[T : Default] or_default(T?) -> T

fn[T] or_else(T?, () -> T) -> T

fn[T, Err : Error] or_error(T?, Err) -> T!Err

fn[T] some(T) -> T?

fn[T] unless(Bool, () -> T) -> T?

fn[T] when(Bool, () -> T) -> T?

// Types and methods
impl Option {
  bind[T, U](T?, (T) -> U?) -> U?
  filter[T](T?, (T) -> Bool) -> T?
  flatten[T](T??) -> T?
  is_empty[T](T?) -> Bool
  iter[T](T?) -> Iter[T]
  map[T, U](T?, (T) -> U) -> U?
  map_or[T, U](T?, U, (T) -> U) -> U
  map_or_else[T, U](T?, () -> U, (T) -> U) -> U
  or[T](T?, T) -> T
  or_default[T : Default](T?) -> T
  or_else[T](T?, () -> T) -> T
  or_error[T, Err : Error](T?, Err) -> T!Err
}
impl[X : Compare] Compare for X?
impl[X] Default for X?
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for X?

// Type aliases

// Traits

