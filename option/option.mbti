package moonbitlang/core/option

alias @moonbitlang/core/quickcheck as @quickcheck

// Values
fn empty[T]() -> T?

fn some[T](T) -> T?

fn unless[T](Bool, () -> T) -> T?

fn when[T](Bool, () -> T) -> T?

// Types and methods
impl Option {
  bind[T, U](T?, (T) -> U?) -> U?
  compare[X : Compare + Eq](X?, X?) -> Int
  default[X]() -> X?
  filter[T](T?, (T) -> Bool) -> T?
  flatten[T](T??) -> T?
  is_empty[T](T?) -> Bool
  iter[T](T?) -> Iter[T]
  map[T, U](T?, (T) -> U) -> U?
  map_or[T, U](T?, U, (T) -> U) -> U
  map_or_else[T, U](T?, () -> U, (T) -> U) -> U
  or[T](T?, T) -> T
  or_default[T : Default](T?) -> T
  or_else[T](T?, () -> T) -> T
  or_error[T, Err : Error](T?, Err) -> T!Err
}

// Type aliases

// Traits

// Extension Methods
impl @quickcheck.Arbitrary for Option

