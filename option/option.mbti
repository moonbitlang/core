package "moonbitlang/core/option"

import(
  "moonbitlang/core/quickcheck"
)

// Values
#deprecated
fn[T] empty() -> T?

#deprecated
fn[T] some(T) -> T?

#deprecated
fn[T] unless(Bool, () -> T) -> T?

#deprecated
fn[T] when(Bool, () -> T) -> T?

// Types and methods
fn[T, U] Option::bind(T?, (T) -> U?) -> U?
fn[T] Option::filter(T?, (T) -> Bool) -> T?
fn[T] Option::flatten(T??) -> T?
fn[T] Option::is_empty(T?) -> Bool
fn[T] Option::iter(T?) -> Iter[T]
fn[T, U] Option::map(T?, (T) -> U) -> U?
fn[T, U] Option::map_or(T?, U, (T) -> U) -> U
fn[T, U] Option::map_or_else(T?, () -> U, (T) -> U) -> U
#deprecated
fn[T] Option::or(T?, T) -> T
#deprecated
fn[T : Default] Option::or_default(T?) -> T
#deprecated
fn[T] Option::or_else(T?, () -> T) -> T
fn[T, Err : Error] Option::or_error(T?, Err) -> T raise Err
fn[T] Option::unwrap_or(T?, T) -> T
fn[T : Default] Option::unwrap_or_default(T?) -> T
fn[T] Option::unwrap_or_else(T?, () -> T) -> T
impl[X : Compare] Compare for X?
impl[X] Default for X?
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for X?

// Type aliases

// Traits

