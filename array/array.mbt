// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
/// Creates a new array containing all elements from an iterator.
///
/// Parameters:
///
/// * `iterator` : An iterator containing elements of type `T`.
///
/// Returns a new array containing all elements from the iterator in the same
/// order.
///
/// Example:
///
/// ```moonbit
/// test "Array::from_iter" {
///   let iter = Iter::singleton(42)
///   let arr = Array::from_iter(iter)
///   inspect!(arr, content="[42]")
/// }
/// ```
pub fn Array::from_iter[T](iter : Iter[T]) -> Array[T] {
  iter.collect()
}

///|
/// Adds all elements from an iterator to the end of the array.
///
/// This function iterates over each element in the provided iterator
/// and adds them to the array using the `push` method.
///
/// # Example
/// ```
/// let u = [1, 2, 3]
/// let v = [4, 5, 6]
/// u.push_iter(v.iter())
/// assert_eq!(u, [1, 2, 3, 4, 5, 6])
/// ```
pub fn push_iter[T](self : Array[T], iter : Iter[T]) -> Unit {
  for x in iter {
    self.push(x)
  }
}

///|
/// Creates a new array of the specified length, where each element is
/// initialized using an index-based initialization function.
///
/// Parameters:
///
/// * `length` : The length of the new array. If `length` is less than or equal
/// to 0, returns an empty array.
/// * `initializer` : A function that takes an index (starting from 0) and
/// returns a value of type `T`. This function is called for each index to
/// initialize the corresponding element.
///
/// Returns a new array of type `Array[T]` with the specified length, where each
/// element is initialized using the provided function.
///
/// Example:
///
/// ```moonbit
/// test "Array::makei" {
///   let arr = Array::makei(3, fn(i) { i * 2 })
///   inspect!(arr, content="[0, 2, 4]")
/// }
/// ```
pub fn Array::makei[T](length : Int, value : (Int) -> T) -> Array[T] {
  if length <= 0 {
    []
  } else {
    let array = Array::make(length, value(0))
    for i in 1..<length {
      array[i] = value(i)
    }
    array
  }
}

///|
/// Shuffle the array using Knuth shuffle
/// 
/// To use this function, you need to provide a rand function, which takes an integer as it upper bound
/// and returns an integer.
/// *rand n* is expected to returns a uniformly distribution integer between 0 and n - 1
/// # Example
/// 
/// ```
/// let arr = [1, 2, 3, 4, 5]
/// fn rand(upper : Int) -> Int {
///   let rng = @random.new()
///   rng.int(limit=upper)
/// }
/// Array::shuffle_in_place(arr, rand=rand)
/// ```
pub fn shuffle_in_place[T](self : Array[T], rand~ : (Int) -> Int) -> Unit {
  let n = self.length()
  for i = n - 1; i > 0; i = i - 1 {
    let j = rand(i + 1) % (i + 1)
    // for safety, perf is not a concern here
    // TODO: maybe return an error later
    self.swap(i, j)
  }
}

///|
/// Shuffle the array using Knuth shuffle
/// 
/// To use this function, you need to provide a rand function, which takes an integer as it upper bound
/// and returns an integer.
/// *rand n* is expected to returns a uniformly distribution integer between 0 and n - 1
/// # Example
/// 
/// ```
/// let arr = [1, 2, 3, 4, 5]
/// fn rand(upper : Int) -> Int {
///   let rng = @random.new()
///   rng.int(limit=upper)
/// }
/// let _shuffled = Array::shuffle(arr, rand=rand)
/// ```
pub fn shuffle[T](self : Array[T], rand~ : (Int) -> Int) -> Array[T] {
  let new_arr = self.copy()
  Array::shuffle_in_place(new_arr, rand~)
  new_arr
}

///|
/// Returns a new array containing the elements of the original array that satisfy the given predicate.
/// 
/// # Arguments
/// 
/// * `self` - The array to filter.
/// * `f` - The predicate function.
/// 
/// # Returns
/// 
pub fn filter_map[A, B](self : Array[A], f : (A) -> B?) -> Array[B] {
  let result = []
  for x in self {
    if f(x) is Some(x) {
      result.push(x)
    }
  }
  result
}

///|
/// Returns the last element of the array, or `None` if the array is empty.
///
/// Parameters:
///
/// * `array` : The array to get the last element from.
///
/// Returns an optional value containing the last element of the array. The
/// result is `None` if the array is empty, or `Some(x)` where `x` is the last
/// element of the array.
///
/// Example:
///
/// ```moonbit
/// test "last" {
///   let arr = [1, 2, 3]
///   inspect!(arr.last(), content="Some(3)")
///   let empty : Array[Int] = []
///   inspect!(empty.last(), content="None")
/// }
/// ```
pub fn last[A](self : Array[A]) -> A? {
  match self {
    [] => None
    [.., last] => Some(last)
  }
}

///| 
/// Zips two arrays into a single array of tuples.
///
/// Parameters:
///
/// * `self` : The first array.
/// * `other` : The second array.
///
/// Returns an array of tuples, where each tuple contains corresponding elements
/// from the two input arrays.
///
/// Example:
///
/// ```moonbit
/// test "zip" {
///   let arr1 = [1, 2, 3]
///   let arr2 = ['a', 'b', 'c']
///   inspect!(arr1.zip(arr2), content="[(1, 'a'), (2, 'b'), (3, 'c')]")
/// }
/// ```
pub fn zip[A, B](self : Array[A], other : Array[B]) -> Array[(A, B)] {
  let length = if self.length() < other.length() {
    self.length()
  } else {
    other.length()
  }
  let arr = Array::new(capacity=length)
  for i = 0; i < length; i = i + 1 {
    arr.push((self[i], other[i]))
  } else {
    return arr
  }
}

///| 
/// Zips two arrays into a single array by applying a function to each pair of elements.
///
/// Parameters:
///
/// * `l` : The first array.
/// * `r` : The second array.
/// * `merge` : A function that takes two arguments, one from each array, and returns a value.
///
/// Returns an array containing the results of applying the function to each pair of elements.
///
/// Example:
///
/// ```moonbit
/// test "zip_with" {
///   let arr1 = [1, 2, 3]
///   let arr2 = [4, 5, 6]
///   let add = fn(a, b) { a + b }
///   inspect!(zip_with(arr1, arr2, add), content="[5, 7, 9]")
/// }
/// ```
pub fn zip_with[A, B, C](
  l : Array[A],
  r : Array[B],
  merge : (A, B) -> C
) -> Array[C] {
  let length = if l.length() < r.length() { l.length() } else { r.length() }
  let arr = Array::new(capacity=length)
  for i = 0; i < length; i = i + 1 {
    arr.push(merge(l[i], r[i]))
  } else {
    return arr
  }
}

///| 
/// Zips two arrays into an iterator that yields corresponding elements.
///
/// Parameters:
///
/// * `self` : The first array.
/// * `other` : The second array.
///
/// Returns an `Iter2` iterator that produces corresponding elements
/// from both arrays. The iteration continues until the shorter array is exhausted.
///
/// Example:
///
/// ```moonbit
/// test "zip_to_iter2" {
///   let arr1 = [1, 2, 3]
///   let arr2 = ['a', 'b', 'c']
///   inspect!(arr1.zip_to_iter2(arr2).to_array(), content="[(1, 'a'), (2, 'b'), (3, 'c')]")
/// }
/// ```
pub fn zip_to_iter2[A, B](self : Array[A], other : Array[B]) -> Iter2[A, B] {
  Iter2::new(fn(yield_) {
    let length = if self.length() < other.length() {
      self.length()
    } else {
      other.length()
    }
    for i = 0; i < length; i = i + 1 {
      if yield_(self[i], other[i]) == IterEnd {
        break IterEnd
      }
    } else {
      IterContinue
    }
  })
}

///|
pub impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for Array[X] with arbitrary(
  size,
  rs
) {
  let len = if size == 0 { 0 } else { rs.next_positive_int() % size }
  Array::makei(len, fn(x) { X::arbitrary(x, rs) })
}

///|
pub fn join(self : Array[String], separator : String) -> String {
  @string.concat(self, separator~)
}
