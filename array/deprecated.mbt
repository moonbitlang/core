// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
/// Creates a new fixed array of specified length where each element is generated
/// lazily by calling the given function.
///
/// Parameters:
///
/// * `length` : The size of the array to create. If negative or zero, returns an
/// empty array.
/// * `generator` : A function that takes no parameters and returns a value of
/// type `T`. This function is called once for each element in the array.
///
/// Returns a new fixed array of type `T` with the specified length, where each
/// element is generated by calling the `generator` function.
///
/// Example:
///
/// ```moonbit
/// test "FixedArray::new" {
///   let mut i = 0
///   let arr = FixedArray::makei(3, fn(_) {
///     i = i + 1
///     i
///   })
///   inspect!(arr, content="[1, 2, 3]")
/// }
/// ```
///
#deprecated("Use `FixedArray::makei` instead")
#coverage.skip
pub fn FixedArray::new[T](length : Int, value : () -> T) -> FixedArray[T] {
  if length <= 0 {
    []
  } else {
    let array = FixedArray::make(length, value())
    for i in 1..<length {
      array[i] = value()
    }
    array
  }
}

///|
/// Creates a new array with values built from indices. Each value in the array
/// is computed by applying a function to its index.
///
/// Parameters:
///
/// * `length` : The length of the new array.
/// * `function` : A function that takes an index as input and returns a value of
/// type `T`. This function is called for each index from 0 to `length - 1` to
/// generate the array elements.
///
/// Returns a new array of type `FixedArray[T]` containing the computed values.
///
/// Example:
///
/// ```moonbit
/// test "FixedArray::makei" {
///   let arr = FixedArray::makei(3, fn(i) { i * 2 })
///   inspect!(arr, content="[0, 2, 4]")
/// }
/// ```
///
#deprecated("Use `FixedArray::makei` instead")
#coverage.skip
pub fn FixedArray::new_with_index[T](
  length : Int,
  value : (Int) -> T
) -> FixedArray[T] {
  FixedArray::makei(length, value)
}

///|
/// Fold out values from an array according to certain rules.
///
/// # Example
/// ```
/// let sum = [1, 2, 3, 4, 5].fold(init=0, fn { sum, elem => sum + elem })
/// assert_eq!(sum, 15)
/// ```
#deprecated("Use `fold` instead")
#coverage.skip
pub fn FixedArray::fold_left[T, U](
  self : FixedArray[T],
  f : (U, T) -> U,
  init~ : U
) -> U {
  self.fold(init~, f)
}

///|
/// Fold out values from an array according to certain rules in reversed turn.
///
/// # Example
/// ```
/// let sum = [1, 2, 3, 4, 5].rev_fold(init=0, fn { sum, elem => sum + elem })
/// assert_eq!(sum, 15)
/// ```
#deprecated("Use `rev_fold` instead")
#coverage.skip
pub fn FixedArray::fold_right[T, U](
  self : FixedArray[T],
  f : (U, T) -> U,
  init~ : U
) -> U {
  self.rev_fold(init~, f)
}

///|
/// Fold out values from an array according to certain rules with index.
///
/// # Example
/// ```
/// let sum = [1, 2, 3, 4, 5].foldi(init=0, fn { index, sum, _elem => sum + index })
/// assert_eq!(sum, 10)
/// ```
#deprecated("Use `foldi` instead")
#coverage.skip
pub fn FixedArray::fold_lefti[T, U](
  self : FixedArray[T],
  f : (Int, U, T) -> U,
  init~ : U
) -> U {
  self.foldi(init~, f)
}

///|
/// Fold out values from an array according to certain rules in reversed turn with index.
///
/// # Example
/// ```
/// let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, fn { index, sum, _elem => sum + index })
/// assert_eq!(sum, 10)
/// ```
#deprecated("Use `rev_foldi` instead")
#coverage.skip
pub fn FixedArray::fold_righti[T, U](
  self : FixedArray[T],
  f : (Int, U, T) -> U,
  init~ : U
) -> U {
  let len = self.length()
  for i = len - 1, acc = init; i >= 0; {
    continue i - 1, f(len - i - 1, acc, self[i])
  } else {
    acc
  }
}
