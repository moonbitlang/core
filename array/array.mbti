package moonbitlang/core/array

// Values

// Types and methods
impl FixedArray {
  all[T](Self[T], (T) -> Bool) -> Bool
  any[T](Self[T], (T) -> Bool) -> Bool
  as_iter[T](Self[T]) -> Iter[T]
  contains[T : Eq](Self[T], T) -> Bool
  copy[T](Self[T]) -> Self[T]
  ends_with[T : Eq](Self[T], Self[T]) -> Bool
  fold_left[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_lefti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  fold_right[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_righti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  from_array[T](Array[T]) -> Self[T]
  is_sorted[T : Compare + Eq](Self[T]) -> Bool
  iter[T](Self[T], (T) -> Unit) -> Unit
  iter_rev[T](Self[T], (T) -> Unit) -> Unit
  iter_revi[T](Self[T], (Int, T) -> Unit) -> Unit
  iteri[T](Self[T], (Int, T) -> Unit) -> Unit
  map[T, U](Self[T], (T) -> U) -> Self[U]
  mapi[T, U](Self[T], (Int, T) -> U) -> Self[U]
  new[T](Int, () -> T) -> Self[T]
  new_with_index[T](Int, (Int) -> T) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  reverse[T](Self[T]) -> Unit
  search[T : Eq](Self[T], T) -> Int?
  sort[T : Compare + Eq](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare + Eq](Self[T], (T) -> K) -> Unit
  stable_sort[T : Compare + Eq](Self[T]) -> Unit
  starts_with[T : Eq](Self[T], Self[T]) -> Bool
}
impl Array {
  as_iter[T](Self[T]) -> Iter[T]
  copy[T](Self[T]) -> Self[T]
  new_with_index[T](Int, (Int) -> T) -> Self[T]
  shuffle[T](Self[T], ~rand : (Int) -> Int) -> Self[T]
  shuffle_in_place[T](Self[T], ~rand : (Int) -> Int) -> Unit
  sort[T : Compare + Eq](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare + Eq](Self[T], (T) -> K) -> Unit
}
impl ArrayView {
  reverse[T](Self[T]) -> Unit
}

// Traits

// Extension Methods

