package moonbitlang/core/array

// Values

// Types and methods
impl FixedArray {
  all[T](Self[T], (T) -> Bool) -> Bool
  any[T](Self[T], (T) -> Bool) -> Bool
  contains[T : Eq](Self[T], T) -> Bool
  copy[T](Self[T]) -> Self[T]
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  ends_with[T : Eq](Self[T], Self[T]) -> Bool
  fold[A, B](Self[A], ~init : B, (B, A) -> B) -> B
  fold_left[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_lefti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  fold_right[T, U](Self[T], (U, T) -> U, ~init : U) -> U
  fold_righti[T, U](Self[T], (Int, U, T) -> U, ~init : U) -> U
  foldi[A, B](Self[A], ~init : B, (Int, B, A) -> B) -> B
  from_array[T](Array[T]) -> Self[T]
  from_iter[T](Iter[T]) -> Self[T]
  is_sorted[T : Compare + Eq](Self[T]) -> Bool
  iter[T](Self[T]) -> Iter[T]
  last[A](Self[A]) -> A?
  makei[T](Int, (Int) -> T) -> Self[T]
  map[T, U](Self[T], (T) -> U) -> Self[U]
  mapi[T, U](Self[T], (Int, T) -> U) -> Self[U]
  new[T](Int, () -> T) -> Self[T]
  new_with_index[T](Int, (Int) -> T) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  rev[T](Self[T]) -> Self[T]
  rev_each[T](Self[T], (T) -> Unit) -> Unit
  rev_eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  rev_fold[A, B](Self[A], ~init : B, (B, A) -> B) -> B
  rev_foldi[A, B](Self[A], ~init : B, (Int, B, A) -> B) -> B
  rev_inplace[T](Self[T]) -> Unit
  search[T : Eq](Self[T], T) -> Int?
  sort[T : Compare + Eq](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare + Eq](Self[T], (T) -> K) -> Unit
  stable_sort[T : Compare + Eq](Self[T]) -> Unit
  starts_with[T : Eq](Self[T], Self[T]) -> Bool
}
impl Array {
  copy[T](Self[T]) -> Self[T]
  from_iter[T](Iter[T]) -> Self[T]
  iter[T](Self[T]) -> Iter[T]
  iter2[A](Self[A]) -> Iter2[Int, A]
  join[T : Show](Self[T], String) -> String
  last[A](Self[A]) -> A?
  makei[T](Int, (Int) -> T) -> Self[T]
  map_option[A, B](Self[A], (A) -> B?) -> Self[B]
  new_with_index[T](Int, (Int) -> T) -> Self[T]
  push_iter[T](Self[T], Iter[T]) -> Unit
  shuffle[T](Self[T], ~rand : (Int) -> Int) -> Self[T]
  shuffle_in_place[T](Self[T], ~rand : (Int) -> Int) -> Unit
  sort[T : Compare + Eq](Self[T]) -> Unit
  sort_by[T](Self[T], (T, T) -> Int) -> Unit
  sort_by_key[T, K : Compare + Eq](Self[T], (T) -> K) -> Unit
}
impl ArrayView {
  each[T](Self[T], (T) -> Unit) -> Unit
  rev_inplace[T](Self[T]) -> Unit
}

// Type aliases

// Traits

// Extension Methods

