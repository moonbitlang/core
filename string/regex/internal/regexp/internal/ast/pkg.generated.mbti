// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/string/regex/internal/regexp/internal/ast"

import(
  "moonbitlang/core/string/regex/internal/regexp/internal/vm"
)

// Values
fn compute_char_class_complement(Array[Char]) -> Array[Char]

fn simplify_char_ranges(Array[Char]) -> Array[Char]

// Errors

// Types and methods
pub(all) enum Ast {
  Empty
  CharClass(Array[Char], neg~ : Bool)
  Assertion(@vm.Predicate)
  Capture(Ast, index~ : Int)
  ZeroOrMore(Ast, greedy~ : Bool)
  OneOrMore(Ast, greedy~ : Bool)
  ZeroOrOne(Ast, greedy~ : Bool)
  Repeat(Ast, greedy~ : Bool, min~ : UInt, max~ : UInt?)
  Concat(Array[Ast])
  Alternate(Ast, Ast)
}
fn Ast::compile(Self) -> Array[@vm.Instruction]
fn Ast::output(Self, &Logger) -> Unit // from trait `Show`
fn Ast::to_json(Self) -> Json // from trait `ToJson`
fn Ast::to_string(Self) -> String // from trait `Show`
impl Show for Ast
impl ToJson for Ast

// Type aliases

// Traits

