// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/string/regex/internal/regexp/internal/parse"

import(
  "moonbitlang/core/string/regex/internal/regexp/internal/ast"
)

// Values
fn parse(StringView, flags? : Flags) -> ParseResult raise RegexpError

// Errors
pub suberror RegexpError {
  RegexpError(err~ : Err, source_fragment~ : StringView)
}
fn RegexpError::output(Self, &Logger) -> Unit // from trait `Show`
fn RegexpError::to_string(Self) -> String // from trait `Show`
impl Show for RegexpError

// Types and methods
pub enum Err {
  InternalError
  InvalidCharClass
  InvalidEscape
  InvalidNamedCapture
  InvalidRepeatOp
  InvalidRepeatSize
  MissingBracket
  MissingParenthesis
  MissingRepeatArgument
  TrailingBackslash
  UnexpectedParenthesis
}
fn Err::output(Self, &Logger) -> Unit // from trait `Show`
fn Err::to_string(Self) -> String // from trait `Show`
impl Show for Err

pub(all) struct Flags {
  multiline : Bool
  singleline : Bool
  ignore_case : Bool
}
fn Flags::default() -> Self // from trait `Default`
impl Default for Flags

pub(all) struct ParseResult {
  ast : @ast.Ast
  captures : Int
  capture_map : Map[String, Int]
}
fn ParseResult::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for ParseResult

// Type aliases

// Traits

