package moonbitlang/core/sorted_set

// Values
fn new[V]() -> T[V]

fn of[V : Compare + Eq](Array[V]) -> T[V]

fn singleton[V : Compare + Eq](V) -> T[V]

// Types and methods
type T
impl T {
  add[V : Compare + Eq](Self[V], V) -> Unit
  contains[V : Compare + Eq](Self[V], V) -> Bool
  debug_write[V : Debug](Self[V], Buffer) -> Unit
  deep_clone[V](Self[V]) -> Self[V]
  diff[V : Compare + Eq](Self[V], Self[V]) -> Self[V]
  disjoint[V : Compare + Eq](Self[V], Self[V]) -> Bool
  each[V](Self[V], (V) -> Unit) -> Unit
  eachi[V](Self[V], (Int, V) -> Unit) -> Unit
  intersect[V : Compare + Eq](Self[V], Self[V]) -> Self[V]
  is_empty[V : Compare + Eq](Self[V]) -> Bool
  iter[V](Self[V]) -> Iter[V]
  op_equal[V : Compare + Eq](Self[V], Self[V]) -> Bool
  remove[V : Compare + Eq](Self[V], V) -> Unit
  size[V : Compare + Eq](Self[V]) -> Int64
  subset[V : Compare + Eq](Self[V], Self[V]) -> Bool
  to_array[V](Self[V]) -> Array[V]
  to_string[V : Show](Self[V]) -> String
  union[V : Compare + Eq](Self[V], Self[V]) -> Self[V]
}

// Traits

// Extension Methods

