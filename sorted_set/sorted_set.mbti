package "moonbitlang/core/sorted_set"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[V : Compare] add(T[V], V) -> Unit

fn[V : Compare] contains(T[V], V) -> Bool

fn[V] copy(T[V]) -> T[V]

#deprecated
fn[V] deep_clone(T[V]) -> T[V]

#deprecated
fn[V : Compare] diff(T[V], T[V]) -> T[V]

fn[V : Compare] difference(T[V], T[V]) -> T[V]

fn[V : Compare] disjoint(T[V], T[V]) -> Bool

fn[V] each(T[V], (V) -> Unit) -> Unit

fn[V] eachi(T[V], (Int, V) -> Unit) -> Unit

fn[V : Compare] from_array(Array[V]) -> T[V]

fn[V : Compare] from_iter(Iter[V]) -> T[V]

#deprecated
fn[V : Compare] intersect(T[V], T[V]) -> T[V]

fn[V : Compare] intersection(T[V], T[V]) -> T[V]

fn[V : Compare] is_empty(T[V]) -> Bool

fn[V] iter(T[V]) -> Iter[V]

fn[V] new() -> T[V]

#deprecated
fn[V : Compare] of(Array[V]) -> T[V]

fn[V : Compare] range(T[V], V, V) -> Iter[V]

fn[V : Compare] remove(T[V], V) -> Unit

fn[V : Compare] singleton(V) -> T[V]

fn[V : Compare] size(T[V]) -> Int

fn[V : Compare] subset(T[V], T[V]) -> Bool

fn[V : Compare] symmetric_difference(T[V], T[V]) -> T[V]

fn[V] to_array(T[V]) -> Array[V]

fn[V : Compare] union(T[V], T[V]) -> T[V]

// Types and methods
type T[V]
impl T {
  add[V : Compare](Self[V], V) -> Unit
  contains[V : Compare](Self[V], V) -> Bool
  copy[V](Self[V]) -> Self[V]
  #deprecated
  deep_clone[V](Self[V]) -> Self[V]
  #deprecated
  diff[V : Compare](Self[V], Self[V]) -> Self[V]
  difference[V : Compare](Self[V], Self[V]) -> Self[V]
  disjoint[V : Compare](Self[V], Self[V]) -> Bool
  each[V](Self[V], (V) -> Unit) -> Unit
  eachi[V](Self[V], (Int, V) -> Unit) -> Unit
  #deprecated
  from_iter[V : Compare](Iter[V]) -> Self[V]
  #deprecated
  intersect[V : Compare](Self[V], Self[V]) -> Self[V]
  intersection[V : Compare](Self[V], Self[V]) -> Self[V]
  is_empty[V : Compare](Self[V]) -> Bool
  iter[V](Self[V]) -> Iter[V]
  range[V : Compare](Self[V], V, V) -> Iter[V]
  remove[V : Compare](Self[V], V) -> Unit
  size[V : Compare](Self[V]) -> Int
  subset[V : Compare](Self[V], Self[V]) -> Bool
  symmetric_difference[V : Compare](Self[V], Self[V]) -> Self[V]
  to_array[V](Self[V]) -> Array[V]
  union[V : Compare](Self[V], Self[V]) -> Self[V]
}
impl[K] Default for T[K]
impl[V : Compare] Eq for T[V]
impl[V : Show] Show for T[V]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

