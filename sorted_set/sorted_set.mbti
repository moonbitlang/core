package moonbitlang/core/sorted_set

// Values

// Types and methods
type MutableSet
impl MutableSet {
  add[T : Compare + Eq](Self[T], T) -> Unit
  contains[T : Compare + Eq](Self[T], T) -> Bool
  debug_write[T : Compare + Debug + Eq](Self[T], Buffer) -> Unit
  deep_clone[T](Self[T]) -> Self[T]
  diff[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
  disjoint[T : Compare + Eq](Self[T], Self[T]) -> Bool
  filter[T : Compare + Eq](Self[T], (T) -> Bool) -> Self[T]
  from_array[T : Compare + Eq](Array[T]) -> Self[T]
  intersect[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
  is_empty[T : Compare + Eq](Self[T]) -> Bool
  iter[T : Compare + Eq](Self[T], (T) -> Unit) -> Unit
  new[T]() -> Self[T]
  of[T : Compare + Eq](FixedArray[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  remove[T : Compare + Eq](Self[T], T) -> Unit
  singleton[T : Compare + Eq](T) -> Self[T]
  size[T : Compare + Eq](Self[T]) -> Int64
  subset[T : Compare + Eq](Self[T], Self[T]) -> Bool
  to_array[T : Compare + Eq](Self[T]) -> Array[T]
  to_string[T : Compare + Show + Eq](Self[T]) -> String
  union[T : Compare + Eq](Self[T], Self[T]) -> Self[T]
}

// Traits

// Extension Methods

