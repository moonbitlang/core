package "moonbitlang/core/sorted_set"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[V : Compare] from_array(Array[V]) -> T[V]

fn[V : Compare] from_iter(Iter[V]) -> T[V]

fn[V] new() -> T[V]

#deprecated
fn[V : Compare] of(Array[V]) -> T[V]

fn[V : Compare] singleton(V) -> T[V]

// Types and methods
type T[V]
fn[V : Compare] T::add(Self[V], V) -> Unit
fn[V : Compare] T::contains(Self[V], V) -> Bool
fn[V] T::copy(Self[V]) -> Self[V]
#deprecated
fn[V] T::deep_clone(Self[V]) -> Self[V]
#deprecated
fn[V : Compare] T::diff(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::difference(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::disjoint(Self[V], Self[V]) -> Bool
fn[V] T::each(Self[V], (V) -> Unit raise?) -> Unit raise?
fn[V] T::eachi(Self[V], (Int, V) -> Unit raise?) -> Unit raise?
#deprecated
fn[V : Compare] T::from_iter(Iter[V]) -> Self[V]
#deprecated
fn[V : Compare] T::intersect(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::intersection(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::is_empty(Self[V]) -> Bool
fn[V] T::iter(Self[V]) -> Iter[V]
fn[V : Compare] T::range(Self[V], V, V) -> Iter[V]
fn[V : Compare] T::remove(Self[V], V) -> Unit
fn[V : Compare] T::size(Self[V]) -> Int
fn[V : Compare] T::subset(Self[V], Self[V]) -> Bool
fn[V : Compare] T::symmetric_difference(Self[V], Self[V]) -> Self[V]
fn[V] T::to_array(Self[V]) -> Array[V]
fn[V : Compare] T::union(Self[V], Self[V]) -> Self[V]
impl[K] Default for T[K]
impl[V : Compare] Eq for T[V]
impl[V : Show] Show for T[V]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

