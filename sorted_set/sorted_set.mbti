package "moonbitlang/core/sorted_set"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[V : Compare] add(T[V], V) -> Unit

fn[V : Compare] contains(T[V], V) -> Bool

fn[V] copy(T[V]) -> T[V]

#deprecated
fn[V] deep_clone(T[V]) -> T[V]

#deprecated
fn[V : Compare] diff(T[V], T[V]) -> T[V]

fn[V : Compare] difference(T[V], T[V]) -> T[V]

fn[V : Compare] disjoint(T[V], T[V]) -> Bool

fn[V] each(T[V], (V) -> Unit) -> Unit

fn[V] eachi(T[V], (Int, V) -> Unit) -> Unit

fn[V : Compare] from_array(Array[V]) -> T[V]

fn[V : Compare] from_iter(Iter[V]) -> T[V]

#deprecated
fn[V : Compare] intersect(T[V], T[V]) -> T[V]

fn[V : Compare] intersection(T[V], T[V]) -> T[V]

fn[V : Compare] is_empty(T[V]) -> Bool

fn[V] iter(T[V]) -> Iter[V]

fn[V] new() -> T[V]

#deprecated
fn[V : Compare] of(Array[V]) -> T[V]

fn[V : Compare] range(T[V], V, V) -> Iter[V]

fn[V : Compare] remove(T[V], V) -> Unit

fn[V : Compare] singleton(V) -> T[V]

fn[V : Compare] size(T[V]) -> Int

fn[V : Compare] subset(T[V], T[V]) -> Bool

fn[V : Compare] symmetric_difference(T[V], T[V]) -> T[V]

fn[V] to_array(T[V]) -> Array[V]

fn[V : Compare] union(T[V], T[V]) -> T[V]

// Types and methods
type T[V]
fn[V : Compare] T::add(Self[V], V) -> Unit
fn[V : Compare] T::contains(Self[V], V) -> Bool
fn[V] T::copy(Self[V]) -> Self[V]
#deprecated
fn[V] T::deep_clone(Self[V]) -> Self[V]
#deprecated
fn[V : Compare] T::diff(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::difference(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::disjoint(Self[V], Self[V]) -> Bool
fn[V] T::each(Self[V], (V) -> Unit) -> Unit
fn[V] T::eachi(Self[V], (Int, V) -> Unit) -> Unit
#deprecated
fn[V : Compare] T::from_iter(Iter[V]) -> Self[V]
#deprecated
fn[V : Compare] T::intersect(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::intersection(Self[V], Self[V]) -> Self[V]
fn[V : Compare] T::is_empty(Self[V]) -> Bool
fn[V] T::iter(Self[V]) -> Iter[V]
fn[V : Compare] T::range(Self[V], V, V) -> Iter[V]
fn[V : Compare] T::remove(Self[V], V) -> Unit
fn[V : Compare] T::size(Self[V]) -> Int
fn[V : Compare] T::subset(Self[V], Self[V]) -> Bool
fn[V : Compare] T::symmetric_difference(Self[V], Self[V]) -> Self[V]
fn[V] T::to_array(Self[V]) -> Array[V]
fn[V : Compare] T::union(Self[V], Self[V]) -> Self[V]
impl[K] Default for T[K]
impl[V : Compare] Eq for T[V]
impl[V : Show] Show for T[V]
impl[X : @quickcheck.Arbitrary + Compare] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

