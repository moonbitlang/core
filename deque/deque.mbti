package "moonbitlang/core/deque"

import(
  "moonbitlang/core/json"
)

// Values
fn[A] back(T[A]) -> A?

fn[A] capacity(T[A]) -> Int

fn[A] clear(T[A]) -> Unit

fn[A : Eq] contains(T[A], A) -> Bool

fn[A] copy(T[A]) -> T[A]

fn[A] each(T[A], (A) -> Unit) -> Unit

fn[A] eachi(T[A], (Int, A) -> Unit) -> Unit

#deprecated
fn[A] filter_map_inplace(T[A], (A) -> A?) -> Unit

fn[A] from_array(Array[A]) -> T[A]

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] front(T[A]) -> A?

fn[A] is_empty(T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A] iter2(T[A]) -> Iter2[Int, A]

fn[A] length(T[A]) -> Int

fn[A, U] map(T[A], (A) -> U) -> T[U]

fn[A, U] mapi(T[A], (Int, A) -> U) -> T[U]

fn[A] new(capacity~ : Int = ..) -> T[A]

fn[A] of(FixedArray[A]) -> T[A]

fn[A] op_get(T[A], Int) -> A

fn[A] op_set(T[A], Int, A) -> Unit

fn[A] pop_back(T[A]) -> A?

#deprecated
fn[A] pop_back_exn(T[A]) -> Unit

fn[A] pop_front(T[A]) -> A?

#deprecated
fn[A] pop_front_exn(T[A]) -> Unit

fn[A] push_back(T[A], A) -> Unit

fn[A] push_front(T[A], A) -> Unit

fn[A] reserve_capacity(T[A], Int) -> Unit

fn[A] retain(T[A], (A) -> Bool) -> Unit

fn[A] retain_map(T[A], (A) -> A?) -> Unit

fn[A] rev_each(T[A], (A) -> Unit) -> Unit

fn[A] rev_eachi(T[A], (Int, A) -> Unit) -> Unit

fn[A] rev_iter(T[A]) -> Iter[A]

fn[A] rev_iter2(T[A]) -> Iter2[Int, A]

fn[A : Eq] search(T[A], A) -> Int?

fn[A] shrink_to_fit(T[A]) -> Unit

fn[A] to_array(T[A]) -> Array[A]

fn[A] truncate(T[A], Int) -> Unit

fn[A] unsafe_pop_back(T[A]) -> Unit

fn[A] unsafe_pop_front(T[A]) -> Unit

// Types and methods
type T[A]
fn[A] T::as_views(Self[A]) -> (ArrayView[A], ArrayView[A])
fn[A] T::back(Self[A]) -> A?
fn[A] T::capacity(Self[A]) -> Int
fn[A] T::clear(Self[A]) -> Unit
fn[A : Eq] T::contains(Self[A], A) -> Bool
fn[A] T::copy(Self[A]) -> Self[A]
fn[A] T::each(Self[A], (A) -> Unit) -> Unit
fn[A] T::eachi(Self[A], (Int, A) -> Unit) -> Unit
#deprecated
fn[A] T::filter_map_inplace(Self[A], (A) -> A?) -> Unit
fn[A] T::front(Self[A]) -> A?
fn[A] T::is_empty(Self[A]) -> Bool
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A] T::iter2(Self[A]) -> Iter2[Int, A]
fn[A] T::length(Self[A]) -> Int
fn[A, U] T::map(Self[A], (A) -> U) -> Self[U]
fn[A, U] T::mapi(Self[A], (Int, A) -> U) -> Self[U]
fn[A] T::op_get(Self[A], Int) -> A
fn[A] T::op_set(Self[A], Int, A) -> Unit
fn[A] T::pop_back(Self[A]) -> A?
#deprecated
fn[A] T::pop_back_exn(Self[A]) -> Unit
fn[A] T::pop_front(Self[A]) -> A?
#deprecated
fn[A] T::pop_front_exn(Self[A]) -> Unit
fn[A] T::push_back(Self[A], A) -> Unit
fn[A] T::push_front(Self[A], A) -> Unit
fn[A] T::reserve_capacity(Self[A], Int) -> Unit
fn[A] T::retain(Self[A], (A) -> Bool) -> Unit
fn[A] T::retain_map(Self[A], (A) -> A?) -> Unit
fn[A] T::rev_each(Self[A], (A) -> Unit) -> Unit
fn[A] T::rev_eachi(Self[A], (Int, A) -> Unit) -> Unit
fn[A] T::rev_iter(Self[A]) -> Iter[A]
fn[A] T::rev_iter2(Self[A]) -> Iter2[Int, A]
fn[A : Eq] T::search(Self[A], A) -> Int?
fn[A] T::shrink_to_fit(Self[A]) -> Unit
fn[A] T::to_array(Self[A]) -> Array[A]
fn[A] T::truncate(Self[A], Int) -> Unit
fn[A] T::unsafe_pop_back(Self[A]) -> Unit
fn[A] T::unsafe_pop_front(Self[A]) -> Unit
impl[A : Eq] Eq for T[A]
impl[A : Show] Show for T[A]
impl[A : ToJson] ToJson for T[A]
impl[A : @json.FromJson] @json.FromJson for T[A]

// Type aliases

// Traits

