package "moonbitlang/core/deque"

import(
  "moonbitlang/core/json"
)

// Values
fn[A] back(T[A]) -> A?

fn[A] capacity(T[A]) -> Int

fn[A] clear(T[A]) -> Unit

fn[A : Eq] contains(T[A], A) -> Bool

fn[A] copy(T[A]) -> T[A]

fn[A] each(T[A], (A) -> Unit) -> Unit

fn[A] eachi(T[A], (Int, A) -> Unit) -> Unit

#deprecated
fn[A] filter_map_inplace(T[A], (A) -> A?) -> Unit

fn[A] from_array(Array[A]) -> T[A]

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] front(T[A]) -> A?

fn[A] is_empty(T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A] iter2(T[A]) -> Iter2[Int, A]

fn[A] length(T[A]) -> Int

fn[A, U] map(T[A], (A) -> U) -> T[U]

fn[A, U] mapi(T[A], (Int, A) -> U) -> T[U]

fn[A] new(capacity~ : Int = ..) -> T[A]

fn[A] of(FixedArray[A]) -> T[A]

fn[A] op_get(T[A], Int) -> A

fn[A] op_set(T[A], Int, A) -> Unit

fn[A] pop_back(T[A]) -> A?

#deprecated
fn[A] pop_back_exn(T[A]) -> Unit

fn[A] pop_front(T[A]) -> A?

#deprecated
fn[A] pop_front_exn(T[A]) -> Unit

fn[A] push_back(T[A], A) -> Unit

fn[A] push_front(T[A], A) -> Unit

fn[A] reserve_capacity(T[A], Int) -> Unit

fn[A] retain(T[A], (A) -> Bool) -> Unit

fn[A] retain_map(T[A], (A) -> A?) -> Unit

fn[A] rev_each(T[A], (A) -> Unit) -> Unit

fn[A] rev_eachi(T[A], (Int, A) -> Unit) -> Unit

fn[A] rev_iter(T[A]) -> Iter[A]

fn[A] rev_iter2(T[A]) -> Iter2[Int, A]

fn[A : Eq] search(T[A], A) -> Int?

fn[A] shrink_to_fit(T[A]) -> Unit

fn[A] to_array(T[A]) -> Array[A]

fn[A] truncate(T[A], Int) -> Unit

fn[A] unsafe_pop_back(T[A]) -> Unit

fn[A] unsafe_pop_front(T[A]) -> Unit

// Types and methods
type T[A]
impl T {
  as_views[A](Self[A]) -> (ArrayView[A], ArrayView[A])
  back[A](Self[A]) -> A?
  capacity[A](Self[A]) -> Int
  clear[A](Self[A]) -> Unit
  contains[A : Eq](Self[A], A) -> Bool
  copy[A](Self[A]) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  #deprecated
  filter_map_inplace[A](Self[A], (A) -> A?) -> Unit
  front[A](Self[A]) -> A?
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  iter2[A](Self[A]) -> Iter2[Int, A]
  length[A](Self[A]) -> Int
  map[A, U](Self[A], (A) -> U) -> Self[U]
  mapi[A, U](Self[A], (Int, A) -> U) -> Self[U]
  op_get[A](Self[A], Int) -> A
  op_set[A](Self[A], Int, A) -> Unit
  pop_back[A](Self[A]) -> A?
  #deprecated
  pop_back_exn[A](Self[A]) -> Unit
  pop_front[A](Self[A]) -> A?
  #deprecated
  pop_front_exn[A](Self[A]) -> Unit
  push_back[A](Self[A], A) -> Unit
  push_front[A](Self[A], A) -> Unit
  reserve_capacity[A](Self[A], Int) -> Unit
  retain[A](Self[A], (A) -> Bool) -> Unit
  retain_map[A](Self[A], (A) -> A?) -> Unit
  rev_each[A](Self[A], (A) -> Unit) -> Unit
  rev_eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  rev_iter[A](Self[A]) -> Iter[A]
  rev_iter2[A](Self[A]) -> Iter2[Int, A]
  search[A : Eq](Self[A], A) -> Int?
  shrink_to_fit[A](Self[A]) -> Unit
  to_array[A](Self[A]) -> Array[A]
  truncate[A](Self[A], Int) -> Unit
  unsafe_pop_back[A](Self[A]) -> Unit
  unsafe_pop_front[A](Self[A]) -> Unit
}
impl[A : Eq] Eq for T[A]
impl[A : Show] Show for T[A]
impl[A : ToJson] ToJson for T[A]
impl[A : @json.FromJson] @json.FromJson for T[A]

// Type aliases

// Traits

