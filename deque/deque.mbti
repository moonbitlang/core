package moonbitlang/core/deque

// Values

// Types and methods
type T
impl T {
  back[A](Self[A]) -> A?
  capacity[A](Self[A]) -> Int
  clear[A](Self[A]) -> Unit
  contains[A : Eq](Self[A], A) -> Bool
  copy[A](Self[A]) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  from_array[A](Array[A]) -> Self[A]
  from_iter[A](Iter[A]) -> Self[A]
  front[A](Self[A]) -> A?
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  iter2[A](Self[A]) -> Iter2[Int, A]
  length[A](Self[A]) -> Int
  map[A, U](Self[A], (A) -> U) -> Self[U]
  mapi[A, U](Self[A], (Int, A) -> U) -> Self[U]
  new[A](capacity~ : Int = ..) -> Self[A]
  of[A](FixedArray[A]) -> Self[A]
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
  op_get[A](Self[A], Int) -> A
  op_set[A](Self[A], Int, A) -> Unit
  pop_back[A](Self[A]) -> A?
  pop_back_exn[A](Self[A]) -> Unit //deprecated
  pop_front[A](Self[A]) -> A?
  pop_front_exn[A](Self[A]) -> Unit //deprecated
  push_back[A](Self[A], A) -> Unit
  push_front[A](Self[A], A) -> Unit
  reserve_capacity[A](Self[A], Int) -> Unit
  rev_each[A](Self[A], (A) -> Unit) -> Unit
  rev_eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  rev_iter[A](Self[A]) -> Iter[A]
  rev_iter2[A](Self[A]) -> Iter2[Int, A]
  search[A : Eq](Self[A], A) -> Int?
  shrink_to_fit[A](Self[A]) -> Unit
  unsafe_pop_back[A](Self[A]) -> Unit
  unsafe_pop_front[A](Self[A]) -> Unit
}
impl[A : Show] Show for T[A]

// Type aliases

// Traits

