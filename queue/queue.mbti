package "moonbitlang/core/queue"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn clear[A](T[A]) -> Unit

fn copy[A](T[A]) -> T[A]

fn each[A](T[A], (A) -> Unit) -> Unit

fn eachi[A](T[A], (Int, A) -> Unit) -> Unit

fn fold[A, B](T[A], init~ : B, (B, A) -> B) -> B

fn from_array[A](Array[A]) -> T[A]

fn from_iter[A](Iter[A]) -> T[A]

fn is_empty[A](T[A]) -> Bool

fn iter[A](T[A]) -> Iter[A]

fn length[A](T[A]) -> Int

fn new[A]() -> T[A]

fn of[A](FixedArray[A]) -> T[A]

fn peek[A](T[A]) -> A?

#deprecated
fn peek_exn[A](T[A]) -> A

fn pop[A](T[A]) -> A?

#deprecated
fn pop_exn[A](T[A]) -> A

fn push[A](T[A], A) -> Unit

fn transfer[A](T[A], T[A]) -> Unit

fn unsafe_peek[A](T[A]) -> A

fn unsafe_pop[A](T[A]) -> A

// Types and methods
type T[A]
impl T {
  clear[A](Self[A]) -> Unit
  copy[A](Self[A]) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  #deprecated
  from_array[A](Array[A]) -> Self[A]
  #deprecated
  from_iter[A](Iter[A]) -> Self[A]
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  length[A](Self[A]) -> Int
  #deprecated
  new[A]() -> Self[A]
  #deprecated
  of[A](FixedArray[A]) -> Self[A]
  peek[A](Self[A]) -> A?
  #deprecated
  peek_exn[A](Self[A]) -> A
  pop[A](Self[A]) -> A?
  #deprecated
  pop_exn[A](Self[A]) -> A
  push[A](Self[A], A) -> Unit
  transfer[A](Self[A], Self[A]) -> Unit
  unsafe_peek[A](Self[A]) -> A
  unsafe_pop[A](Self[A]) -> A
}
impl[A : Show] Show for T[A]
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

