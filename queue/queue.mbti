package moonbitlang/core/queue

// Values

// Types and methods
type Queue
impl Queue {
  clear[T](Self[T]) -> Unit
  copy[T](Self[T]) -> Self[T]
  debug_write[T : Show](Self[T], Buffer) -> Unit
  each[T](Self[T], (T) -> Unit) -> Unit
  eachi[T](Self[T], (Int, T) -> Unit) -> Unit
  fold[T](Self[T], ~init : T, (T, T) -> T) -> T
  from_array[T](Array[T]) -> Self[T]
  is_empty[T](Self[T]) -> Bool
  iter[T](Self[T]) -> Iter[T]
  length[T](Self[T]) -> Int
  new[T]() -> Self[T]
  of[T](FixedArray[T]) -> Self[T]
  peek[T](Self[T]) -> T?
  peek_exn[T](Self[T]) -> T
  pop[T](Self[T]) -> T?
  pop_exn[T](Self[T]) -> T
  push[T](Self[T], T) -> Unit
  to_string[T : Show](Self[T]) -> String
  transfer[T](Self[T], Self[T]) -> Unit
}

// Traits

// Extension Methods
impl Show for Queue

