package moonbitlang/core/queue

alias @moonbitlang/core/quickcheck as @quickcheck

// Values

// Types and methods
type T
impl T {
  clear[A](Self[A]) -> Unit
  copy[A](Self[A]) -> Self[A]
  each[A](Self[A], (A) -> Unit) -> Unit
  eachi[A](Self[A], (Int, A) -> Unit) -> Unit
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  from_array[A](Array[A]) -> Self[A]
  from_iter[A](Iter[A]) -> Self[A]
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  length[A](Self[A]) -> Int
  new[A]() -> Self[A]
  of[A](FixedArray[A]) -> Self[A]
  peek[A](Self[A]) -> A?
  peek_exn[A](Self[A]) -> A //deprecated
  pop[A](Self[A]) -> A?
  pop_exn[A](Self[A]) -> A //deprecated
  push[A](Self[A], A) -> Unit
  transfer[A](Self[A], Self[A]) -> Unit
  unsafe_peek[A](Self[A]) -> A
  unsafe_pop[A](Self[A]) -> A
}
impl[A : Show] Show for T[A]
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

