package "moonbitlang/core/queue"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[A] clear(T[A]) -> Unit

fn[A] copy(T[A]) -> T[A]

fn[A] each(T[A], (A) -> Unit) -> Unit

fn[A] eachi(T[A], (Int, A) -> Unit) -> Unit

fn[A, B] fold(T[A], init~ : B, (B, A) -> B) -> B

fn[A] from_array(Array[A]) -> T[A]

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] is_empty(T[A]) -> Bool

fn[A] iter(T[A]) -> Iter[A]

fn[A] length(T[A]) -> Int

fn[A] new() -> T[A]

fn[A] of(FixedArray[A]) -> T[A]

fn[A] peek(T[A]) -> A?

#deprecated
fn[A] peek_exn(T[A]) -> A

fn[A] pop(T[A]) -> A?

#deprecated
fn[A] pop_exn(T[A]) -> A

fn[A] push(T[A], A) -> Unit

fn[A] transfer(T[A], T[A]) -> Unit

fn[A] unsafe_peek(T[A]) -> A

fn[A] unsafe_pop(T[A]) -> A

// Types and methods
type T[A]
fn[A] T::clear(Self[A]) -> Unit
fn[A] T::copy(Self[A]) -> Self[A]
fn[A] T::each(Self[A], (A) -> Unit) -> Unit
fn[A] T::eachi(Self[A], (Int, A) -> Unit) -> Unit
fn[A, B] T::fold(Self[A], init~ : B, (B, A) -> B) -> B
fn[A] T::is_empty(Self[A]) -> Bool
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A] T::length(Self[A]) -> Int
fn[A] T::peek(Self[A]) -> A?
#deprecated
fn[A] T::peek_exn(Self[A]) -> A
fn[A] T::pop(Self[A]) -> A?
#deprecated
fn[A] T::pop_exn(Self[A]) -> A
fn[A] T::push(Self[A], A) -> Unit
fn[A] T::transfer(Self[A], Self[A]) -> Unit
fn[A] T::unsafe_peek(Self[A]) -> A
fn[A] T::unsafe_pop(Self[A]) -> A
impl[A : Show] Show for T[A]
impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[X]

// Type aliases

// Traits

