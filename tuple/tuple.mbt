// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
/// Create a tuple with two elements.
///
/// # Example
/// ```mbt
///   let tuple = @tuple.pair(1, 2)
///   assert_eq(tuple, (1, 2))
/// ```
#deprecated
#coverage.skip
pub fn[T, U] pair(x : T, y : U) -> (T, U) {
  (x, y)
}

///|
/// Get the first element of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let x = @tuple.fst(tuple)
///   assert_eq(x, 1)
/// ```
#deprecated("use `tuple.0` instead")
#coverage.skip
pub fn[T, U] fst(tuple : (T, U)) -> T {
  tuple.0
}

///|
/// Get the second element of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let y = @tuple.snd(tuple)
///   assert_eq(y, 2)
/// ```
#deprecated("use `tuple.1` instead")
#coverage.skip
pub fn[T, U] snd(tuple : (T, U)) -> U {
  tuple.1
}

///|
/// Map a function over the first element of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let mapped = tuple |> then(fn { (a, b) => (a + 1, b) })
///   assert_eq(mapped, (2, 2))
/// ```
#deprecated("use `tuple |> then(fn { (a, b) => (f(a), b) })` instead")
#coverage.skip
pub fn[T, U, V] map_fst(f : (T) -> U, tuple : (T, V)) -> (U, V) {
  (f(tuple.0), tuple.1)
}

///|
/// Map a function over the second element of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let mapped = tuple|> then(fn { (a, b) => (a, b+1) })
///   assert_eq(mapped, (1, 3))
/// ```
#deprecated("use `tuple |> then(fn { (a, b) => (a, f(b)) })` instead")
#coverage.skip
pub fn[T, U, V] map_snd(f : (T) -> U, tuple : (V, T)) -> (V, U) {
  (tuple.0, f(tuple.1))
}

///|
/// Map a function over both elements of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let mapped = tuple |> then(fn { (a, b) => (a + 1, b - 1) })
///   assert_eq(mapped, (2, 1))
/// ```
#deprecated("use `tuple |> then(fn { (a, b) => (f(a), g(b)) })` instead")
#coverage.skip
pub fn[T, U, V, W] map_both(
  f : (T) -> U,
  g : (V) -> W,
  tuple : (T, V)
) -> (U, W) {
  (f(tuple.0), g(tuple.1))
}

///|
/// Swap the elements of a tuple.
///
/// # Example
/// ```mbt
///   let tuple = (1, 2)
///   let swapped = @tuple.swap(tuple)
///   assert_eq(swapped, (2, 1))
/// ```
#deprecated
#coverage.skip
pub fn[T, U] swap(tuple : (T, U)) -> (U, T) {
  (tuple.1, tuple.0)
}

///|
/// Curry a function.
///
/// # Example
/// ```mbt
///   let add = fn(x : Int, y : Int) -> Int { x + y }
///   let curried_add = @tuple.curry(add)
///   assert_eq(curried_add(1)(2), 3)
/// ```
#deprecated
#coverage.skip
pub fn[T, U, V] curry(f : (T, U) -> V) -> (T) -> (U) -> V {
  fn(x : T) { fn(y : U) -> V { f(x, y) } }
}

///|
/// Uncurry a function.
///
/// # Example
/// ```mbt
///   let add = fn(x : Int) -> (Int) -> Int { fn(y : Int) -> Int { x + y } }
///   let uncurried_add = @tuple.uncurry(add)
///   assert_eq(uncurried_add(1, 2), 3)
/// ```
#deprecated
#coverage.skip
pub fn[T, U, V] uncurry(f : (T) -> (U) -> V) -> (T, U) -> V {
  fn(x : T, y : U) { f(x)(y) }
}
