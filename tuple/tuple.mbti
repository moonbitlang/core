package "moonbitlang/core/tuple"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn curry[T, U, V]((T, U) -> V) -> (T) -> (U) -> V

fn fst[T, U]((T, U)) -> T

fn map_both[T, U, V, W]((T) -> U, (V) -> W, (T, V)) -> (U, W)

fn map_fst[T, U, V]((T) -> U, (T, V)) -> (U, V)

fn map_snd[T, U, V]((T) -> U, (V, T)) -> (V, U)

fn pair[T, U](T, U) -> (T, U)

fn snd[T, U]((T, U)) -> U

fn swap[T, U]((T, U)) -> (U, T)

fn uncurry[T, U, V]((T) -> (U) -> V) -> (T, U) -> V

// Types and methods
impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B)

impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary, C : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B, C)

impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary, C : @quickcheck.Arbitrary, D : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B, C, D)

impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary, C : @quickcheck.Arbitrary, D : @quickcheck.Arbitrary, E : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B, C, D, E)

impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary, C : @quickcheck.Arbitrary, D : @quickcheck.Arbitrary, E : @quickcheck.Arbitrary, F : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B, C, D, E, F)

impl[A : @quickcheck.Arbitrary, B : @quickcheck.Arbitrary, C : @quickcheck.Arbitrary, D : @quickcheck.Arbitrary, E : @quickcheck.Arbitrary, F : @quickcheck.Arbitrary, G : @quickcheck.Arbitrary] @quickcheck.Arbitrary for (A, B, C, D, E, F, G)

// Type aliases

// Traits

